{
    "docs": [
        {
            "location": "/",
            "text": "!! Under Construction !!\n\n\n\n\nProblem Solving 101 with Python\n\n\nIf you like this book, please consider purchasing a hard copy version when it becomes available on \namazon.com\n.\n\n\nOverview\n\n\n\n\nYou will find the book chapters on the left hand menu\n\n\nYou will find navigation within a section of a chapter (one webpage) on the righthand menu\n\n\nFull documentation on how to build this site locally are on github at github.com/professorkazarinoff/Problem-Solving-101-with-Python/website\n\n\n\n\nCopywrite\n\n\nCopyright \u00a9 2017 - 2018 Peter D. Kazarinoff",
            "title": "Home"
        },
        {
            "location": "/#under-construction",
            "text": "",
            "title": "!! Under Construction !!"
        },
        {
            "location": "/#problem-solving-101-with-python",
            "text": "If you like this book, please consider purchasing a hard copy version when it becomes available on  amazon.com .",
            "title": "Problem Solving 101 with Python"
        },
        {
            "location": "/#overview",
            "text": "You will find the book chapters on the left hand menu  You will find navigation within a section of a chapter (one webpage) on the righthand menu  Full documentation on how to build this site locally are on github at github.com/professorkazarinoff/Problem-Solving-101-with-Python/website",
            "title": "Overview"
        },
        {
            "location": "/#copywrite",
            "text": "Copyright \u00a9 2017 - 2018 Peter D. Kazarinoff",
            "title": "Copywrite"
        },
        {
            "location": "/00-Preface/00.00-Motivation/",
            "text": "Preface\n\n\nMotivation\n\n\nThe motivation for writing this book is that many undergraduate engineering students have to take a prgramming course based on MATLAB. MATLAB is a great piece of software, but it currently costs $49.00 for a student licence and requires a site licence to be used on school computers. Subsequently, it is costly for a student to use MATLAB and it is costly for a college to support a course that uses MATLAB. \n\n\nThe Python programming language on the other hand is open source and free. To download and use Python, the cost to both the student and the college is zero. By moving an undergradate engineering programming class to Python, students will save money and have greater access to the software they use in class. Further in their engineering education, students can continue to use Python for free.",
            "title": "Motivation"
        },
        {
            "location": "/00-Preface/00.00-Motivation/#preface",
            "text": "",
            "title": "Preface"
        },
        {
            "location": "/00-Preface/00.00-Motivation/#motivation",
            "text": "The motivation for writing this book is that many undergraduate engineering students have to take a prgramming course based on MATLAB. MATLAB is a great piece of software, but it currently costs $49.00 for a student licence and requires a site licence to be used on school computers. Subsequently, it is costly for a student to use MATLAB and it is costly for a college to support a course that uses MATLAB.   The Python programming language on the other hand is open source and free. To download and use Python, the cost to both the student and the college is zero. By moving an undergradate engineering programming class to Python, students will save money and have greater access to the software they use in class. Further in their engineering education, students can continue to use Python for free.",
            "title": "Motivation"
        },
        {
            "location": "/00-Preface/00.02-Acknowledgements/",
            "text": "Acknowledgements\n\n\nThe creation of this book and supporting material would not be possible without the gracious support of my wife and family. Students at Portland Community College continue to give me hope that the next generation of engineers will be a diverse group of team problem solvers.\n\n\nThe Python Data Science Handbook and Machine Learning in Python as well as Reiman Equations in Python served as inspiration and examples of using Jupyter notebooks to construct a book. The bookbook repository on github provided a starting point for the tooling to convert the book from jupyter notebooks to the web and into print.",
            "title": "Acknowledgements"
        },
        {
            "location": "/00-Preface/00.02-Acknowledgements/#acknowledgements",
            "text": "The creation of this book and supporting material would not be possible without the gracious support of my wife and family. Students at Portland Community College continue to give me hope that the next generation of engineers will be a diverse group of team problem solvers.  The Python Data Science Handbook and Machine Learning in Python as well as Reiman Equations in Python served as inspiration and examples of using Jupyter notebooks to construct a book. The bookbook repository on github provided a starting point for the tooling to convert the book from jupyter notebooks to the web and into print.",
            "title": "Acknowledgements"
        },
        {
            "location": "/00-Preface/00.03-Supporting-Materials/",
            "text": "Supporting Materials\n\n\nSupporting materials for this text can be found at the textbook website:\n\n\n\n\nhttps://github.io/PythonForUndergraduateEngineers\n\n\n\n\nThe textbook website contains all of the text in web format. Code Examples and Jupyter notebooks for the text can be found on the github repository for the book:\n\n\n\n\nhttps:github.com/ProfessorKazarinoff/PythonForUndergraduateEngineers\n\n\n\n\nLive notebooks where you can run the code examples found in the text without installing any software are available at:\n\n\n\n\nhttps://gitform.ucberkley.edu/PythonForUndergraduateEngineers\n\n\n\n\nIf you are an instructor and using this book in your course with students, please send me an email with your school email address, the course your are teaching and term, enrollment, and a link to the course listing on your school website. I am happy to reply with a solution key for the end of chapter review problems as well as quiz and exam question banks.",
            "title": "Supporting Materials"
        },
        {
            "location": "/00-Preface/00.03-Supporting-Materials/#supporting-materials",
            "text": "Supporting materials for this text can be found at the textbook website:   https://github.io/PythonForUndergraduateEngineers   The textbook website contains all of the text in web format. Code Examples and Jupyter notebooks for the text can be found on the github repository for the book:   https:github.com/ProfessorKazarinoff/PythonForUndergraduateEngineers   Live notebooks where you can run the code examples found in the text without installing any software are available at:   https://gitform.ucberkley.edu/PythonForUndergraduateEngineers   If you are an instructor and using this book in your course with students, please send me an email with your school email address, the course your are teaching and term, enrollment, and a link to the course listing on your school website. I am happy to reply with a solution key for the end of chapter review problems as well as quiz and exam question banks.",
            "title": "Supporting Materials"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/",
            "text": "Formatting Conventions\n\n\nThis book and supporting materials use the following convenstions:\n\n\nWeb Address\n\n\nWeb address will be shown as:\n\n\nhttps://github.com/professorkazarinoff/PythonForUndergraduateEngineers\n\n\nImport terms and vocabulary\n\n\nImportant terms and vocabulary is shown in \nitalic text\n\n\nThere is a difference between \nlocal variables\n and \nglobal variables\n in Python code\n\n\nFile Names\n\n\nFile Names are  shown in \nbold and italic text\n\n\nAfter completing the code, save the file as \nhello.py\n in the current directory.\n\n\nModule and Package Names\n\n\nModule and Package names will be shown in \nbold text\n\n\nNumpy\n and \nmatplotlib\n are two useful packages for engineers\n\n\nInline code\n\n\nInline code including variable names and extensions are shown in \nmonospace font\n\n\nTo compare a variable use \nvar == 'string'\n and make sure to include \n==\n, the doouble equals sign\n\n\nSeperate code blocks\n\n\nSeparate code blocks will appear in their own boxes in `` monospaced font```\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\n\n\nTerminal and Anaconda Prompt Commands\n\n\nCommands typed into the terminal or \nAnaconda Prompt\n will be in seperate boxes which contain \n$\n the dollar sign before each line. Note the \n$\n dollar sign should not be typed. It is included to indicate the terminal or Anaconda prompt, not a character for the user to enter\n\n\n$ conda creat -n newenv pyton=3.6\n$ conda activate newenv\n\n\n\n\nPython REPL Commands\n\n\nCommands typed into the Python REPL, or Python Interperator will be in seperate code boxes which contain >>> the triple arrow prompt. Note the >>> triple arrow sign should not be typed. It is included to indicate the Python REPL prompt, not a character for the user to enter. The output from the Python REPL will be shown on a separate line below the command, without the >>> prompt.\n\n\n>>> 2 + 2\n4\n>>> print('Python for Undergraduate Engineers')\nPython for Undergraduate Engineers\n\n\n\n\nJupyter Notebook cells\n\n\nCommands typed into \nJupyter Notebook\n cells will apprear with an label \nIn [#]:\n and \nOut [#]:\n. Output from a jupyter notebook cell will be shown after the input cell. You only need to run the code in the input cell. The output cell will be prodoced automatically when the you click the run button or type \n[shift]+[Enter]\n\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nA\n \n=\n \n2\n\n\nB\n \n=\n \n3\n\n\nC\n \n=\n \nA\n \n+\n \nB\n\n\nprint\n(\nC\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5",
            "title": "Formatting Conventions"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/#formatting-conventions",
            "text": "This book and supporting materials use the following convenstions:",
            "title": "Formatting Conventions"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/#web-address",
            "text": "Web address will be shown as:  https://github.com/professorkazarinoff/PythonForUndergraduateEngineers",
            "title": "Web Address"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/#import-terms-and-vocabulary",
            "text": "Important terms and vocabulary is shown in  italic text  There is a difference between  local variables  and  global variables  in Python code",
            "title": "Import terms and vocabulary"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/#file-names",
            "text": "File Names are  shown in  bold and italic text  After completing the code, save the file as  hello.py  in the current directory.",
            "title": "File Names"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/#module-and-package-names",
            "text": "Module and Package names will be shown in  bold text  Numpy  and  matplotlib  are two useful packages for engineers",
            "title": "Module and Package Names"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/#inline-code",
            "text": "Inline code including variable names and extensions are shown in  monospace font  To compare a variable use  var == 'string'  and make sure to include  == , the doouble equals sign",
            "title": "Inline code"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/#seperate-code-blocks",
            "text": "Separate code blocks will appear in their own boxes in `` monospaced font```  import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt",
            "title": "Seperate code blocks"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/#terminal-and-anaconda-prompt-commands",
            "text": "Commands typed into the terminal or  Anaconda Prompt  will be in seperate boxes which contain  $  the dollar sign before each line. Note the  $  dollar sign should not be typed. It is included to indicate the terminal or Anaconda prompt, not a character for the user to enter  $ conda creat -n newenv pyton=3.6\n$ conda activate newenv",
            "title": "Terminal and Anaconda Prompt Commands"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/#python-repl-commands",
            "text": "Commands typed into the Python REPL, or Python Interperator will be in seperate code boxes which contain >>> the triple arrow prompt. Note the >>> triple arrow sign should not be typed. It is included to indicate the Python REPL prompt, not a character for the user to enter. The output from the Python REPL will be shown on a separate line below the command, without the >>> prompt.  >>> 2 + 2\n4\n>>> print('Python for Undergraduate Engineers')\nPython for Undergraduate Engineers",
            "title": "Python REPL Commands"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/#jupyter-notebook-cells",
            "text": "Commands typed into  Jupyter Notebook  cells will apprear with an label  In [#]:  and  Out [#]: . Output from a jupyter notebook cell will be shown after the input cell. You only need to run the code in the input cell. The output cell will be prodoced automatically when the you click the run button or type  [shift]+[Enter]    In\u00a0[2]:  \n      A   =   2  B   =   3  C   =   A   +   B  print ( C )           5",
            "title": "Jupyter Notebook cells"
        },
        {
            "location": "/00-Preface/00.05-Errata/",
            "text": "Errata\n\n\nErrata including any typos, code errors and formatting inconsistencies can be submitted to\n\n\n\n\nerrata@pythonforundergraduateengineers.com.\n\n\n\n\nPlease note the chapter number and section number in your email. Thank-you in advanced for helping to improve this text for future students.",
            "title": "Errata"
        },
        {
            "location": "/00-Preface/00.05-Errata/#errata",
            "text": "Errata including any typos, code errors and formatting inconsistencies can be submitted to   errata@pythonforundergraduateengineers.com.   Please note the chapter number and section number in your email. Thank-you in advanced for helping to improve this text for future students.",
            "title": "Errata"
        },
        {
            "location": "/01-What-is-Python/01.00-Introduction/",
            "text": "What is Python?\n\n\nIntroduction\n\n\nWelcome to the world of problem solving with Python. This first chapter will help you get started by reviewing what the Python programming language is and why it is useful for solving a wide array of problems.\n\n\nBy the end of this chapter, you should be able to:\n\n\n\n\nDescribe why Python is a good programming language for problem solving\n\n\nDescribe applications where Python is used\n\n\nDetail advantages of Python over other programming languages\n\n\nKnow the cost of Python\n\n\nKnow the difference between Python and Anaconda",
            "title": "Introduction"
        },
        {
            "location": "/01-What-is-Python/01.00-Introduction/#what-is-python",
            "text": "",
            "title": "What is Python?"
        },
        {
            "location": "/01-What-is-Python/01.00-Introduction/#introduction",
            "text": "Welcome to the world of problem solving with Python. This first chapter will help you get started by reviewing what the Python programming language is and why it is useful for solving a wide array of problems.",
            "title": "Introduction"
        },
        {
            "location": "/01-What-is-Python/01.00-Introduction/#by-the-end-of-this-chapter-you-should-be-able-to",
            "text": "Describe why Python is a good programming language for problem solving  Describe applications where Python is used  Detail advantages of Python over other programming languages  Know the cost of Python  Know the difference between Python and Anaconda",
            "title": "By the end of this chapter, you should be able to:"
        },
        {
            "location": "/01-What-is-Python/01.01-What-is-Python/",
            "text": "What is Python?\n\n\nYou might be wondering \"What is Python?\"\n\n\nPython is a computer programming language\n\n\nPython is a computer programming language. Other computer programming languages include C++, Java, Javascript and MATLAB. \n\n\nWhen you download and install Python, you install the \nPython Interpreter\n. The Python interpreter is a program that run on your computer. Other programs running on your computer include Microsoft Word, Microsoft Excel and a web browser like Google Chrome or Firefox. Each of these prgrams use a different file type. The file type the Python Interpreter run are files that contain Python code. You can think of the Python Interpreter like a cook in a resteraunt that only does exactly as the cook reads in the recipie. The recipie is kind of like Python code. It contains instructions for the cook to run. \n\n\nPython can use over 100,000 external modules\n\n\nWhen you install Python on your computer you typically get the Python Interpreter which includes what is know as the standard libary. The standard library contains all the code that can be run by the interpreter. But in addition to the code that comes with Python, there are over 100,000 external modules that you can download and use. \n\n\nBrief History of Python\n\n\nPython was created by Guido van Rossum, a Dutch computer programmer, and was first released in 1991. The name \nPython\n is attributed to \nMonte Python\n, \n<1>\n\n \n the British commedy troupe that became popular in the 1970's and 80's for their TV show \nMonte Python's Flying Circus\n and movies like \nMonty Python and the Holy Grail\n.\n\n\nWhy was Python created?\n\n\nGuido created Python based on his experience working with another earlier computer programming language called ABC. Guido had a couple of \"gripes\" with the ABC programming language including it's lack of extensability\n<1>\n. He wrote Python partly in response to this problem. Unlike ABC, Python is indeed very extensible. It can be extended with additional packages downloaded from the PyPI.org and runs on servers, desktop computers, laptops and tiny microcontrollers.",
            "title": "What is Python?"
        },
        {
            "location": "/01-What-is-Python/01.01-What-is-Python/#what-is-python",
            "text": "You might be wondering \"What is Python?\"",
            "title": "What is Python?"
        },
        {
            "location": "/01-What-is-Python/01.01-What-is-Python/#python-is-a-computer-programming-language",
            "text": "Python is a computer programming language. Other computer programming languages include C++, Java, Javascript and MATLAB.   When you download and install Python, you install the  Python Interpreter . The Python interpreter is a program that run on your computer. Other programs running on your computer include Microsoft Word, Microsoft Excel and a web browser like Google Chrome or Firefox. Each of these prgrams use a different file type. The file type the Python Interpreter run are files that contain Python code. You can think of the Python Interpreter like a cook in a resteraunt that only does exactly as the cook reads in the recipie. The recipie is kind of like Python code. It contains instructions for the cook to run.",
            "title": "Python is a computer programming language"
        },
        {
            "location": "/01-What-is-Python/01.01-What-is-Python/#python-can-use-over-100000-external-modules",
            "text": "When you install Python on your computer you typically get the Python Interpreter which includes what is know as the standard libary. The standard library contains all the code that can be run by the interpreter. But in addition to the code that comes with Python, there are over 100,000 external modules that you can download and use.",
            "title": "Python can use over 100,000 external modules"
        },
        {
            "location": "/01-What-is-Python/01.01-What-is-Python/#brief-history-of-python",
            "text": "Python was created by Guido van Rossum, a Dutch computer programmer, and was first released in 1991. The name  Python  is attributed to  Monte Python ,  <1> \n   the British commedy troupe that became popular in the 1970's and 80's for their TV show  Monte Python's Flying Circus  and movies like  Monty Python and the Holy Grail .",
            "title": "Brief History of Python"
        },
        {
            "location": "/01-What-is-Python/01.01-What-is-Python/#why-was-python-created",
            "text": "Guido created Python based on his experience working with another earlier computer programming language called ABC. Guido had a couple of \"gripes\" with the ABC programming language including it's lack of extensability <1> . He wrote Python partly in response to this problem. Unlike ABC, Python is indeed very extensible. It can be extended with additional packages downloaded from the PyPI.org and runs on servers, desktop computers, laptops and tiny microcontrollers.",
            "title": "Why was Python created?"
        },
        {
            "location": "/01-What-is-Python/01.02-Why-Python/",
            "text": "Why Python?\n\n\nYou might be wondering \"Why should I learn Python?\" There are other programming languages in the engineering world such as MATLAB, LabView, C++ and Java. What makes Python useful for problem solving?\n\n\nPython is a powerful programming language\n\n\nPython defines the types of objects you build into your code. Unlike some other languages such as C, you do not need to declare the object type. The object type is also mutable, you can change the type of object easily and on the fly. There is a wide array of object types built into Python. Objects can change in size. Python objects can also contain mixed data types. Strings and floating point numbers can be part of the same list.\n\n\nPython has an extensive standard library. A huge number of object types, functions and methods are available for use without importing any external modules. These include math functions, list methods, calls to a computers system. There is a lot that can be done with the standard library. The first couple chapters of this book will just use the standard library. It can do a lot.\n\n\nPython has over 100,000 external packages available for download and use. They are easy to install off of the python package index, commonly called PyPI (\"pie pee eye\"). There is a python package for just about everything. There are packages which can help you: interact with the web, make complex computations, do unit conversions, plot data, work with .csv, .xls, and .pdf files, manipulate images and video, read data from sensors and test equipment, train machine learning algorithms, design web apps, work with GIS data, work with astronautical data, and many more added every day. In this book we will use some of the more useful Python packages for engineers such as numpy, matplotlib, pandas, and scipy.\n\n\nPython is easy to learn and use\n\n\nEngineers solve the world's problems in teams. One way Python helps solve these problems faster than other programming languages is that it is easy to learn and use. Python programs tends to be shorter and quicker to write than a program that does a similar function in other languages. In the rapid design, prototype, test, iterate cycle programming solutions can be spun up quickly. Python is also an easy language for fellow engineers on your team to learn. It is also quite human readable. While programmers can become preoccupied with a programs run time, it is development time that takes the longest.\n\n\nPython is transportable\n\n\nPython can be installed and run on each of the three major operating systems: Windows, Mac and Linux. On Mac and Linux Python comes installed out of the box. Just open up a terminal in on a Mac OSX or Linux machine and type \\texttt{python}. That's it, you are now using Python. On Windows I recommend downloading and using the Ananaconda distribution. The Anaconda distrobution is free and can be installed on all three major operating systems. The same programming environment can be replecated accross the three different opperating systems.\n\n\nPython is free\n\n\nMATLAB and LabView cost students to use and cost companies and colleges even more. Python is free to download and use. It is also open source and free to modify, contribute to, and propose improvements. All of the packages available for download on the Python Package Index, PyPI (pronouced pie-pee-eye) are free to download and install. Many more packages, scripts and utilities can be found in open source repos on github and bitbucket. \n\n\nPython is growing\n\n\nPython is growing in popularity. Python is particularly growing in the data sciences and in use with GIS systems, physical modeling, machine learning and computer vision. These are growing team problem solving areas for engineers.  \n\n\nPython has extensive standard library of modules and a vast array of external modules\n\n\nPythons Standard Library\n\n\nStandard Library Modules include:\n\n\nmath, statistics, os, urllib, table for what they are used for. More can be found on Read-the-docs\n\n\nExternal Modules available on PyPI\n\n\nThere are over 100,000 external modules available for Python on PyPI. Ones useful for engineers include\n\n\nnumpy, pandas, matplotlib, jupyter table for what they are used for\n\n\ninstalling Python modules can be done on the command line or at the Anaconda Prompt using;\n\n\n$ pip install <module_name>\n\n\n\n\nwhere \n<module_name>\n is the name of the module you want to install.",
            "title": "Why Python?"
        },
        {
            "location": "/01-What-is-Python/01.02-Why-Python/#why-python",
            "text": "You might be wondering \"Why should I learn Python?\" There are other programming languages in the engineering world such as MATLAB, LabView, C++ and Java. What makes Python useful for problem solving?",
            "title": "Why Python?"
        },
        {
            "location": "/01-What-is-Python/01.02-Why-Python/#python-is-a-powerful-programming-language",
            "text": "Python defines the types of objects you build into your code. Unlike some other languages such as C, you do not need to declare the object type. The object type is also mutable, you can change the type of object easily and on the fly. There is a wide array of object types built into Python. Objects can change in size. Python objects can also contain mixed data types. Strings and floating point numbers can be part of the same list.  Python has an extensive standard library. A huge number of object types, functions and methods are available for use without importing any external modules. These include math functions, list methods, calls to a computers system. There is a lot that can be done with the standard library. The first couple chapters of this book will just use the standard library. It can do a lot.  Python has over 100,000 external packages available for download and use. They are easy to install off of the python package index, commonly called PyPI (\"pie pee eye\"). There is a python package for just about everything. There are packages which can help you: interact with the web, make complex computations, do unit conversions, plot data, work with .csv, .xls, and .pdf files, manipulate images and video, read data from sensors and test equipment, train machine learning algorithms, design web apps, work with GIS data, work with astronautical data, and many more added every day. In this book we will use some of the more useful Python packages for engineers such as numpy, matplotlib, pandas, and scipy.",
            "title": "Python is a powerful programming language"
        },
        {
            "location": "/01-What-is-Python/01.02-Why-Python/#python-is-easy-to-learn-and-use",
            "text": "Engineers solve the world's problems in teams. One way Python helps solve these problems faster than other programming languages is that it is easy to learn and use. Python programs tends to be shorter and quicker to write than a program that does a similar function in other languages. In the rapid design, prototype, test, iterate cycle programming solutions can be spun up quickly. Python is also an easy language for fellow engineers on your team to learn. It is also quite human readable. While programmers can become preoccupied with a programs run time, it is development time that takes the longest.",
            "title": "Python is easy to learn and use"
        },
        {
            "location": "/01-What-is-Python/01.02-Why-Python/#python-is-transportable",
            "text": "Python can be installed and run on each of the three major operating systems: Windows, Mac and Linux. On Mac and Linux Python comes installed out of the box. Just open up a terminal in on a Mac OSX or Linux machine and type \\texttt{python}. That's it, you are now using Python. On Windows I recommend downloading and using the Ananaconda distribution. The Anaconda distrobution is free and can be installed on all three major operating systems. The same programming environment can be replecated accross the three different opperating systems.",
            "title": "Python is transportable"
        },
        {
            "location": "/01-What-is-Python/01.02-Why-Python/#python-is-free",
            "text": "MATLAB and LabView cost students to use and cost companies and colleges even more. Python is free to download and use. It is also open source and free to modify, contribute to, and propose improvements. All of the packages available for download on the Python Package Index, PyPI (pronouced pie-pee-eye) are free to download and install. Many more packages, scripts and utilities can be found in open source repos on github and bitbucket.",
            "title": "Python is free"
        },
        {
            "location": "/01-What-is-Python/01.02-Why-Python/#python-is-growing",
            "text": "Python is growing in popularity. Python is particularly growing in the data sciences and in use with GIS systems, physical modeling, machine learning and computer vision. These are growing team problem solving areas for engineers.",
            "title": "Python is growing"
        },
        {
            "location": "/01-What-is-Python/01.02-Why-Python/#python-has-extensive-standard-library-of-modules-and-a-vast-array-of-external-modules",
            "text": "",
            "title": "Python has extensive standard library of modules and a vast array of external modules"
        },
        {
            "location": "/01-What-is-Python/01.02-Why-Python/#pythons-standard-library",
            "text": "Standard Library Modules include:  math, statistics, os, urllib, table for what they are used for. More can be found on Read-the-docs",
            "title": "Pythons Standard Library"
        },
        {
            "location": "/01-What-is-Python/01.02-Why-Python/#external-modules-available-on-pypi",
            "text": "There are over 100,000 external modules available for Python on PyPI. Ones useful for engineers include  numpy, pandas, matplotlib, jupyter table for what they are used for  installing Python modules can be done on the command line or at the Anaconda Prompt using;  $ pip install <module_name>  where  <module_name>  is the name of the module you want to install.",
            "title": "External Modules available on PyPI"
        },
        {
            "location": "/01-What-is-Python/01.03-What-is-Anaconda/",
            "text": "What is Anaconda?\n\n\nYou might be wondering \"OK, I know what Python is. It is computer programming language\"\n\n\n\"But what is Anaconda? How is it different than Python?\"\n\n\nAnaconda is a Python Distribution\n\n\nAnaconda is a Python Distribution. When you downlod Anaconda you download a Python Interpreter. \n\n\nHow is Anaconda different from Python?\n\n\nWhen you download Python from Python.org you get the Python Interpreter, a little text editing program called IDLE and all of the Python standard library modules.\n\n\nWhen you download Anaconda from Anaconda.com, you get a Python Interpreter, a command line program called the Anaconda Prompt, a text editor called Spyder and about 200 extra Python modules that aren't included in the standard library.\n\n\nWhy would I download Anaconda if I want to use is Python?\n\n\nRegarless if you download just Python from Python.org or you download Anaconda (with all the extra stuff it comes with) from Anaconda.com, you will be able to write and execute Python code.\n\n\nAnaconda includes Python plus about 200 additional Python packages\n\n\nAnaconda is adventageous because it includes Python as well as about 200 aditional Python packages. These are all free to use. The packages that come with Anaconda includes many of the most common Python packages people use. If you download Anaconda, you get Python including the standard library plus 200 extra packages. If you download just Python, well you just get plain old Python and the standard library. You could install the extra modules that come with Anaconda (that don't come with plain old Python), but why not save a step (or 200 steps) and download one thing instead of downloading 201 and one things (200 extra modules + 1 Python download).\n\n\nAnaconda installs without administrator privaleges\n\n\nEven if you don't have the ability to install program on a computer, like a computer in a school computer lab, you can still download and use Anaconda.\n\n\nAnaconda works on MacOS\n\n\nIf you use MacOS, you probably already have Python installed on you computer without even knowing it. MacOS comes with Python pre-installed. The problem is that the version of Python that comes with MacOS is old and it is locked up behind a set of administrator privaleges. This means you can have trouble using the version of Python that comes on MacOS. Some things will seem to work fine, and then other things won't run at all or you will keep get asked for an adminstrator password over and over. Downloading and installing Anaconda (seperate from the version of Python that came with MacOS) prevents most of these problems.\n\n\nAnaconda makes package managment and virtual environment management easier\n\n\nAnother advantage that downloading Anaconda has over downloading just Python is that package managememt and virtual environment management are a lot easier when you have Anaconda. This might not seem to make a difference right now. If you just downloaded Anaconda for the first time, you are probably not dealing with package management and virtual environments yet, and might not even know what those two things are. After you write a couple Python programs and start downloading a couple extra modules from the internet, dealing with package managment and virtual environments becomes more important.",
            "title": "What is Anaconda?"
        },
        {
            "location": "/01-What-is-Python/01.03-What-is-Anaconda/#what-is-anaconda",
            "text": "You might be wondering \"OK, I know what Python is. It is computer programming language\"  \"But what is Anaconda? How is it different than Python?\"",
            "title": "What is Anaconda?"
        },
        {
            "location": "/01-What-is-Python/01.03-What-is-Anaconda/#anaconda-is-a-python-distribution",
            "text": "Anaconda is a Python Distribution. When you downlod Anaconda you download a Python Interpreter.",
            "title": "Anaconda is a Python Distribution"
        },
        {
            "location": "/01-What-is-Python/01.03-What-is-Anaconda/#how-is-anaconda-different-from-python",
            "text": "When you download Python from Python.org you get the Python Interpreter, a little text editing program called IDLE and all of the Python standard library modules.  When you download Anaconda from Anaconda.com, you get a Python Interpreter, a command line program called the Anaconda Prompt, a text editor called Spyder and about 200 extra Python modules that aren't included in the standard library.",
            "title": "How is Anaconda different from Python?"
        },
        {
            "location": "/01-What-is-Python/01.03-What-is-Anaconda/#why-would-i-download-anaconda-if-i-want-to-use-is-python",
            "text": "Regarless if you download just Python from Python.org or you download Anaconda (with all the extra stuff it comes with) from Anaconda.com, you will be able to write and execute Python code.",
            "title": "Why would I download Anaconda if I want to use is Python?"
        },
        {
            "location": "/01-What-is-Python/01.03-What-is-Anaconda/#anaconda-includes-python-plus-about-200-additional-python-packages",
            "text": "Anaconda is adventageous because it includes Python as well as about 200 aditional Python packages. These are all free to use. The packages that come with Anaconda includes many of the most common Python packages people use. If you download Anaconda, you get Python including the standard library plus 200 extra packages. If you download just Python, well you just get plain old Python and the standard library. You could install the extra modules that come with Anaconda (that don't come with plain old Python), but why not save a step (or 200 steps) and download one thing instead of downloading 201 and one things (200 extra modules + 1 Python download).",
            "title": "Anaconda includes Python plus about 200 additional Python packages"
        },
        {
            "location": "/01-What-is-Python/01.03-What-is-Anaconda/#anaconda-installs-without-administrator-privaleges",
            "text": "Even if you don't have the ability to install program on a computer, like a computer in a school computer lab, you can still download and use Anaconda.",
            "title": "Anaconda installs without administrator privaleges"
        },
        {
            "location": "/01-What-is-Python/01.03-What-is-Anaconda/#anaconda-works-on-macos",
            "text": "If you use MacOS, you probably already have Python installed on you computer without even knowing it. MacOS comes with Python pre-installed. The problem is that the version of Python that comes with MacOS is old and it is locked up behind a set of administrator privaleges. This means you can have trouble using the version of Python that comes on MacOS. Some things will seem to work fine, and then other things won't run at all or you will keep get asked for an adminstrator password over and over. Downloading and installing Anaconda (seperate from the version of Python that came with MacOS) prevents most of these problems.",
            "title": "Anaconda works on MacOS"
        },
        {
            "location": "/01-What-is-Python/01.03-What-is-Anaconda/#anaconda-makes-package-managment-and-virtual-environment-management-easier",
            "text": "Another advantage that downloading Anaconda has over downloading just Python is that package managememt and virtual environment management are a lot easier when you have Anaconda. This might not seem to make a difference right now. If you just downloaded Anaconda for the first time, you are probably not dealing with package management and virtual environments yet, and might not even know what those two things are. After you write a couple Python programs and start downloading a couple extra modules from the internet, dealing with package managment and virtual environments becomes more important.",
            "title": "Anaconda makes package managment and virtual environment management easier"
        },
        {
            "location": "/01-What-is-Python/01.05-Summary/",
            "text": "Summary\n\n\nKey Terms\n\n\nPython\n\n\nPython Interperater\n\n\nPython REPL\n\n\nAnaconda\n\n\nAnaconda Prompt\n\n\nCPython\n\n\nRuntime\n\n\nPackage\n\n\nInstallation",
            "title": "Summary"
        },
        {
            "location": "/01-What-is-Python/01.05-Summary/#summary",
            "text": "",
            "title": "Summary"
        },
        {
            "location": "/01-What-is-Python/01.05-Summary/#key-terms",
            "text": "Python  Python Interperater  Python REPL  Anaconda  Anaconda Prompt  CPython  Runtime  Package  Installation",
            "title": "Key Terms"
        },
        {
            "location": "/01-What-is-Python/01.06-Review-Questions/",
            "text": "Review Questions\n\n\n\n\n\n\nWhat is Python? \n\n\n\n\n\n\nHow is the Python language different than the Python Interperater?\n\n\n\n\n\n\nWhat is the difference between the version of Python at Python.org and the version of Python at Anaconda.com?\n\n\n\n\n\n\nWhy is Python a good computer language to solve problems with?\n\n\n\n\n\n\nWhat does Anaconda come with that Python downloaded from Python.org does not?\n\n\n\n\n\n\nWhat are three advantages of using Anaconda compared to the using the version of Python at Python.org?\n\n\n\n\n\n\nWhy is Python named Python?\n\n\n\n\n\n\nWho created Python and when?\n\n\n\n\n\n\nWhy was Python created? What problem was the creator trying to solve?\n\n\n\n\n\n\nWhat are other computer programming languages besides Python?\n\n\n\n\n\n\nWhat computer programming lanuage did the creator of Python have \"gripes\" about? What were those \"gripes\"?\n\n\n\n\n\n\nWhere is Python used?\n\n\n\n\n\n\nWhich companies use Python?\n\n\n\n\n\n\nWhat are two ways Python is used in scientific research?",
            "title": "Review Questions"
        },
        {
            "location": "/01-What-is-Python/01.06-Review-Questions/#review-questions",
            "text": "What is Python?     How is the Python language different than the Python Interperater?    What is the difference between the version of Python at Python.org and the version of Python at Anaconda.com?    Why is Python a good computer language to solve problems with?    What does Anaconda come with that Python downloaded from Python.org does not?    What are three advantages of using Anaconda compared to the using the version of Python at Python.org?    Why is Python named Python?    Who created Python and when?    Why was Python created? What problem was the creator trying to solve?    What are other computer programming languages besides Python?    What computer programming lanuage did the creator of Python have \"gripes\" about? What were those \"gripes\"?    Where is Python used?    Which companies use Python?    What are two ways Python is used in scientific research?",
            "title": "Review Questions"
        },
        {
            "location": "/02-Installing-Python/02.00-Introduction/",
            "text": "Installing Python\n\n\nIntroduction\n\n\nWelcome to the world of problem solving. In this chapter you will learn how to install the Python on your computer. We will cover Python installation on three major operating systems: Windows 10, Mac OSX and Linux.  \n\n\nBy the end of this chapter, you should be able to:\n\n\n\n\nInstall the Anaconda distribution of Python on your personal computer\n\n\nCheck to see if Python is installed on your computer\n\n\nCheck which version of Python is installed on your computer\n\n\nOpen the Python REPL and run \n>>> import this\n\n\nKnow the difference between Python and Anaconda",
            "title": "Introduction"
        },
        {
            "location": "/02-Installing-Python/02.00-Introduction/#installing-python",
            "text": "",
            "title": "Installing Python"
        },
        {
            "location": "/02-Installing-Python/02.00-Introduction/#introduction",
            "text": "Welcome to the world of problem solving. In this chapter you will learn how to install the Python on your computer. We will cover Python installation on three major operating systems: Windows 10, Mac OSX and Linux.",
            "title": "Introduction"
        },
        {
            "location": "/02-Installing-Python/02.00-Introduction/#by-the-end-of-this-chapter-you-should-be-able-to",
            "text": "Install the Anaconda distribution of Python on your personal computer  Check to see if Python is installed on your computer  Check which version of Python is installed on your computer  Open the Python REPL and run  >>> import this  Know the difference between Python and Anaconda",
            "title": "By the end of this chapter, you should be able to:"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Anaconda-on-Windows/",
            "text": "Installing Anaconda on Windows\n\n\nFor undergraduate engineers, I recommend installing and using the Anaconda distribution of Python.\nIn this section, we will run through installing the Anaconda distribution of Python on Windows 10. I think the Anaconda distribution of Python is the the best option for undergraduate engineers who want to use Python. Anaconda is free (although the download is large which can take time) and can be installed on school or work computers where you don't have administrator access or the ability to install new programs. Anaconda comes bundled with over 100 packages pre-installed including \nnumpy\n, \nmatplotlib\n and \npandas\n. These three packages are very useful for engineers and will be discussed in subsequent chapters.\n\n\nSteps:\n\n\n\n\n\n\nVisit \nAnaconda.com/downloads\n\n\n\n\n\n\nSelect Windows\n\n\n\n\n\n\nDownload the .exe installer\n\n\n\n\n\n\nOpen and run the .exe installer\n\n\n\n\n\n\nOpen the Anaconda prompt and run some Python code\n\n\n\n\n\n\n1. Visit the Anaconda downloads page\n\n\nGo to the following link: \nAnaconda.com/downloads\n\n\nThe Anaconda Downloads Page will look something like this:\n\n\n\n\n2. Select Windows\n\n\nSelect Windows where the three opperating systems are listed.\n\n\n\n\n3. Download\n\n\nDownload the Python 3.6 distribution. Python 2.7 is legacy Python. For undergraduate engineers, select the Python 3.6 version.\n\n\n\n\nYou may be prompted to enter your email. You can still download Anaconda if you click \nNo Thanks\n and don't enter your Work Email address.\n\n\n\n\nThe download is quite large (over 500 MB) so it may take a while for the download to complete.\n\n\n\n\n4. Open and run the installer\n\n\nOnce the download completes, open and run the .exe installer\n\n\n\n\nAt the beginning of the install you will need to click \nNext\n to confirm the installation\n\n\n\n\nand agree to the license\n\n\n\n\nAt the Advanced Installation Options screen, I recommend that you \ndo not check\n \"Add Anaconda to my PATH environment variable\"\n\n\n\n\n5. Open the Conda prompt from the Windows start menu\n\n\nAfter the Anaconda install is complete, you can go to the Windows start menu and select the Anaconda Prompt\n\n\n\n\nThis will open up the \nAnaconda Prompt\n, which is often called the \nconda prompt\n. \nAnaconda\n is the Python distribution and the \nAnaconda Prompt\n is a command line shell (a program where you type in your commands instead of using a mouse). The black screen and text that makes up the \nAnaconda Prompt\n doesn't look like much, but it is really helpful for an undergraduate engineer using Python.\n\n\n\n\nAt the Anaconda prompt, type \npython\n. This will start the Python interperater, also called the Python REPL (for Read Evaluate Print Loop). \n\n\n\n\nNote the Python version. You should see something like \nPython 3.6.1\n.  With the interperter running, you will see a set of greater-than symbols \n>>>\n before the cursor. \n\n\n\n\nNow you can type Python commands. Try typing \nimport this\n. You should see the \nZen of Python\n by Tim Peters\n\n\n\n\nTo close the Python interperater, type \nexit()\n at the interperator prompt \n>>>\n.  Note the double parenthesis at the end of the \nexit()\n command. The \n()\n is needed to stop the Python interperator and get back out to the \nAnaconda Prompt\n.\n\n\nTo close the \nAnaconda Prompt\n, you can either close the window with the mouse, or type \nexit\n, no parenthesis necessary.\n\n\nCongratulations! You installed the Anaconda distribution on your Windows computer!\n\n\nWhen you want to use the Python interperater again, just click the Windows Start button and select the \nAnaconda Prompt\n and type \npython\n.",
            "title": "Installing Anaconda on Windows"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Anaconda-on-Windows/#installing-anaconda-on-windows",
            "text": "For undergraduate engineers, I recommend installing and using the Anaconda distribution of Python.\nIn this section, we will run through installing the Anaconda distribution of Python on Windows 10. I think the Anaconda distribution of Python is the the best option for undergraduate engineers who want to use Python. Anaconda is free (although the download is large which can take time) and can be installed on school or work computers where you don't have administrator access or the ability to install new programs. Anaconda comes bundled with over 100 packages pre-installed including  numpy ,  matplotlib  and  pandas . These three packages are very useful for engineers and will be discussed in subsequent chapters.",
            "title": "Installing Anaconda on Windows"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Anaconda-on-Windows/#steps",
            "text": "Visit  Anaconda.com/downloads    Select Windows    Download the .exe installer    Open and run the .exe installer    Open the Anaconda prompt and run some Python code",
            "title": "Steps:"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Anaconda-on-Windows/#1-visit-the-anaconda-downloads-page",
            "text": "Go to the following link:  Anaconda.com/downloads  The Anaconda Downloads Page will look something like this:",
            "title": "1. Visit the Anaconda downloads page"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Anaconda-on-Windows/#2-select-windows",
            "text": "Select Windows where the three opperating systems are listed.",
            "title": "2. Select Windows"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Anaconda-on-Windows/#3-download",
            "text": "Download the Python 3.6 distribution. Python 2.7 is legacy Python. For undergraduate engineers, select the Python 3.6 version.   You may be prompted to enter your email. You can still download Anaconda if you click  No Thanks  and don't enter your Work Email address.   The download is quite large (over 500 MB) so it may take a while for the download to complete.",
            "title": "3. Download"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Anaconda-on-Windows/#4-open-and-run-the-installer",
            "text": "Once the download completes, open and run the .exe installer   At the beginning of the install you will need to click  Next  to confirm the installation   and agree to the license   At the Advanced Installation Options screen, I recommend that you  do not check  \"Add Anaconda to my PATH environment variable\"",
            "title": "4. Open and run the installer"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Anaconda-on-Windows/#5-open-the-conda-prompt-from-the-windows-start-menu",
            "text": "After the Anaconda install is complete, you can go to the Windows start menu and select the Anaconda Prompt   This will open up the  Anaconda Prompt , which is often called the  conda prompt .  Anaconda  is the Python distribution and the  Anaconda Prompt  is a command line shell (a program where you type in your commands instead of using a mouse). The black screen and text that makes up the  Anaconda Prompt  doesn't look like much, but it is really helpful for an undergraduate engineer using Python.   At the Anaconda prompt, type  python . This will start the Python interperater, also called the Python REPL (for Read Evaluate Print Loop).    Note the Python version. You should see something like  Python 3.6.1 .  With the interperter running, you will see a set of greater-than symbols  >>>  before the cursor.    Now you can type Python commands. Try typing  import this . You should see the  Zen of Python  by Tim Peters   To close the Python interperater, type  exit()  at the interperator prompt  >>> .  Note the double parenthesis at the end of the  exit()  command. The  ()  is needed to stop the Python interperator and get back out to the  Anaconda Prompt .  To close the  Anaconda Prompt , you can either close the window with the mouse, or type  exit , no parenthesis necessary.",
            "title": "5. Open the Conda prompt from the Windows start menu"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Anaconda-on-Windows/#congratulations-you-installed-the-anaconda-distribution-on-your-windows-computer",
            "text": "When you want to use the Python interperater again, just click the Windows Start button and select the  Anaconda Prompt  and type  python .",
            "title": "Congratulations! You installed the Anaconda distribution on your Windows computer!"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Python/",
            "text": "Installing Python from Python.org\n\n\nBelow are the recommended ways to install a new version of Python from Python.org on the three major operating systems: Windows, MacOS and Linux. This book is based on Python version 3.6.  Some of the problems may not work properly on legacy Python (version 2.7).  I recommend using the Anaconda distribution of Python on Windows and MacOS. The installation of Anaconda was detailed in the previous sections of this chapter. \n\n\nInstalling Python on Windows\n\n\nGo to \nhttps://www.python.org/downloads/\n download the latest release. Make sure to select the box [add Python to my path]. \n\n\n\n\nInstalling Python on Mac OSX\n\n\nGo to \nhttps://www.python.org/downloads/mac-osx/\n and download the latest release. \n\n\n\n\nInstalling Python on Linux\n\n\nGo to open a terminal and enter \n$ python\n to see if a version of Python is already installed on the system. If the Python version is 2.7 or below, download the newest release in the apt repositories.\n\n\n$ sudo apt-get Python",
            "title": "Installing Python from Python.org"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Python/#installing-python-from-pythonorg",
            "text": "Below are the recommended ways to install a new version of Python from Python.org on the three major operating systems: Windows, MacOS and Linux. This book is based on Python version 3.6.  Some of the problems may not work properly on legacy Python (version 2.7).  I recommend using the Anaconda distribution of Python on Windows and MacOS. The installation of Anaconda was detailed in the previous sections of this chapter.",
            "title": "Installing Python from Python.org"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Python/#installing-python-on-windows",
            "text": "Go to  https://www.python.org/downloads/  download the latest release. Make sure to select the box [add Python to my path].",
            "title": "Installing Python on Windows"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Python/#installing-python-on-mac-osx",
            "text": "Go to  https://www.python.org/downloads/mac-osx/  and download the latest release.",
            "title": "Installing Python on Mac OSX"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Python/#installing-python-on-linux",
            "text": "Go to open a terminal and enter  $ python  to see if a version of Python is already installed on the system. If the Python version is 2.7 or below, download the newest release in the apt repositories.  $ sudo apt-get Python",
            "title": "Installing Python on Linux"
        },
        {
            "location": "/02-Installing-Python/02.03-Installing-Anaconda-on-MacOS/",
            "text": "Installing Anaconda on MacOS\n\n\nIn this section, we will run through installing the Anaconda distribution of Python on MacOS. MacOS comes pre-installed with legacy Python (Version 2.7). You can confirm this legacy version of Python is installed by opening the \nterminal\n. [command]+[Space Bar] type \nterminal\n\n\nIn the MacOS Terminal type:\n\n\n$ python\n\n\n\n\nYou will most likely see version 2.7 is installed. To install The Anaconda distridution of Python follow the steps below:\n\n\nSteps:\n\n\n\n\n\n\nVisit \nAnaconda.com/downloads\n\n\n\n\n\n\nSelect Mac OSX\n\n\n\n\n\n\nDownload the .pkg installer\n\n\n\n\n\n\nMove the .pkg file to the Apps folder\n\n\n\n\n\n\nOpen the Anaconda prompt and run some Python code\n\n\n\n\n\n\n1. Visit the Anaconda downloads page\n\n\nGo to the following link: \nAnaconda.com/downloads\n\n\nThe Anaconda Downloads Page will look something like this:\n\n\n\n\n2. Download\n\n\nDownload the Python 3.6 distribution. Python 2.7 is legacy Python. For undergraduate engineers, select the Python 3.6 version.\n\n\n\n\nYou may be prompted to enter your email. You can still download Anaconda if you click \nNo Thanks\n and don't enter your Work Email address.\n\n\n\n\nThe download is quite large (over 500 MB) so it may take a while for the download to complete.\n\n\n\n\n3. Move the .dkg pacakge to the app folder\n\n\nMove the .pdk package to the app folder. \n\n\nPut Image of .pdk package to app folder\n\n\n4. Add conda to your PATH\n\n\nOpen the OSX Terminal and type:\n\n\n$ export PATH = /usr/bin/Anaconda/python\n\n\n\n\n5. Open the the Python REPL\n\n\nOpen the OSX Terminal and type:\n\n\nconda create -n env python=3.6\n\n\n\n\nType \ny\n after the prompts\n\n\nThen activate your environment with\n\n\n$ conda activate env\n\n\n\n\nYou should now see \n(env)\n before the command prompt. At the prompt type:\n\n\n$(env) Python\n\n\n\n\nThis will bring up the python prompt also called the Python REPL\n\n\nTo exit the REPL type:\n\n\n>>> exit()",
            "title": "Installing Anaconda on MacOS"
        },
        {
            "location": "/02-Installing-Python/02.03-Installing-Anaconda-on-MacOS/#installing-anaconda-on-macos",
            "text": "In this section, we will run through installing the Anaconda distribution of Python on MacOS. MacOS comes pre-installed with legacy Python (Version 2.7). You can confirm this legacy version of Python is installed by opening the  terminal . [command]+[Space Bar] type  terminal  In the MacOS Terminal type:  $ python  You will most likely see version 2.7 is installed. To install The Anaconda distridution of Python follow the steps below:",
            "title": "Installing Anaconda on MacOS"
        },
        {
            "location": "/02-Installing-Python/02.03-Installing-Anaconda-on-MacOS/#steps",
            "text": "Visit  Anaconda.com/downloads    Select Mac OSX    Download the .pkg installer    Move the .pkg file to the Apps folder    Open the Anaconda prompt and run some Python code",
            "title": "Steps:"
        },
        {
            "location": "/02-Installing-Python/02.03-Installing-Anaconda-on-MacOS/#1-visit-the-anaconda-downloads-page",
            "text": "Go to the following link:  Anaconda.com/downloads  The Anaconda Downloads Page will look something like this:",
            "title": "1. Visit the Anaconda downloads page"
        },
        {
            "location": "/02-Installing-Python/02.03-Installing-Anaconda-on-MacOS/#2-download",
            "text": "Download the Python 3.6 distribution. Python 2.7 is legacy Python. For undergraduate engineers, select the Python 3.6 version.   You may be prompted to enter your email. You can still download Anaconda if you click  No Thanks  and don't enter your Work Email address.   The download is quite large (over 500 MB) so it may take a while for the download to complete.",
            "title": "2. Download"
        },
        {
            "location": "/02-Installing-Python/02.03-Installing-Anaconda-on-MacOS/#3-move-the-dkg-pacakge-to-the-app-folder",
            "text": "Move the .pdk package to the app folder.   Put Image of .pdk package to app folder",
            "title": "3. Move the .dkg pacakge to the app folder"
        },
        {
            "location": "/02-Installing-Python/02.03-Installing-Anaconda-on-MacOS/#4-add-conda-to-your-path",
            "text": "Open the OSX Terminal and type:  $ export PATH = /usr/bin/Anaconda/python",
            "title": "4. Add conda to your PATH"
        },
        {
            "location": "/02-Installing-Python/02.03-Installing-Anaconda-on-MacOS/#5-open-the-the-python-repl",
            "text": "Open the OSX Terminal and type:  conda create -n env python=3.6  Type  y  after the prompts  Then activate your environment with  $ conda activate env  You should now see  (env)  before the command prompt. At the prompt type:  $(env) Python  This will bring up the python prompt also called the Python REPL  To exit the REPL type:  >>> exit()",
            "title": "5. Open the the Python REPL"
        },
        {
            "location": "/02-Installing-Python/02.04-Installing-Anaconda-on-Linux/",
            "text": "Installing Anaconda on Linux\n\n\nIn this section, we will run through installing the Anaconda distribution of Python on Linux, specifically Ubuntu 16.04. Ubuntu 16.04 comes pre-installed with Python (Version 3.3) and legacy Python (Version 2.7). You can confirm this legacy version of Python is installed by opening up a terminal.\n\n\nIn the terminal type:\n\n\n$ python\n\n\n\n\nYou will most likely see version 2.7 is installed. If you enter:\n\n\n$ python3\n\n\n\n\nYou will most likely see version 3.3 is installed.\n\n\nSteps:\n\n\n\n\n\n\nVisit \nAnaconda.com/downloads\n\n\n\n\n\n\nSelect Mac OSX\n\n\n\n\n\n\nDownload the .pkg installer\n\n\n\n\n\n\nMove the .pkg file to the Apps folder\n\n\n\n\n\n\nOpen the Anaconda prompt and run some Python code\n\n\n\n\n\n\n1. Visit the Anaconda downloads page\n\n\nGo to the following link: \nAnaconda.com/downloads\n\n\nThe Anaconda Downloads Page will look something like this:\n\n\n\n\n2. Download\n\n\nDownload the Python 3.6 distribution. Python 2.7 is legacy Python. For undergraduate engineers, select the Python 3.6 version.\n\n\n\n\nYou may be prompted to enter your email. You can still download Anaconda if you click \nNo Thanks\n and don't enter your Work Email address.\n\n\n\n\nThe download is quite large (over 500 MB) so it may take a while for the download to complete.\n\n\n\n\n3. Move the .dkg pacakge to the app folder\n\n\nMove the .pdk package to the app folder. \n\n\nPut Image of .pdk package to app folder\n\n\n4. Add conda to your PATH\n\n\nOpen the OSX Terminal and type:\n\n\n$ export PATH = /usr/bin/Anaconda/python\n\n\n\n\n5. Open the the Python REPL\n\n\nOpen the OSX Terminal and type:\n\n\nconda create -n env python=3.6\n\n\n\n\nType \ny\n after the prompts\n\n\nThen activate your environment with\n\n\n$ conda activate env\n\n\n\n\nYou should now see \n(env)\n before the command prompt. At the prompt type:\n\n\n$(env) Python\n\n\n\n\nThis will bring up the python prompt also called the Python REPL\n\n\nTo exit the REPL type:\n\n\n>>> exit()",
            "title": "Installing Anaconda on Linux"
        },
        {
            "location": "/02-Installing-Python/02.04-Installing-Anaconda-on-Linux/#installing-anaconda-on-linux",
            "text": "In this section, we will run through installing the Anaconda distribution of Python on Linux, specifically Ubuntu 16.04. Ubuntu 16.04 comes pre-installed with Python (Version 3.3) and legacy Python (Version 2.7). You can confirm this legacy version of Python is installed by opening up a terminal.  In the terminal type:  $ python  You will most likely see version 2.7 is installed. If you enter:  $ python3  You will most likely see version 3.3 is installed.",
            "title": "Installing Anaconda on Linux"
        },
        {
            "location": "/02-Installing-Python/02.04-Installing-Anaconda-on-Linux/#steps",
            "text": "Visit  Anaconda.com/downloads    Select Mac OSX    Download the .pkg installer    Move the .pkg file to the Apps folder    Open the Anaconda prompt and run some Python code",
            "title": "Steps:"
        },
        {
            "location": "/02-Installing-Python/02.04-Installing-Anaconda-on-Linux/#1-visit-the-anaconda-downloads-page",
            "text": "Go to the following link:  Anaconda.com/downloads  The Anaconda Downloads Page will look something like this:",
            "title": "1. Visit the Anaconda downloads page"
        },
        {
            "location": "/02-Installing-Python/02.04-Installing-Anaconda-on-Linux/#2-download",
            "text": "Download the Python 3.6 distribution. Python 2.7 is legacy Python. For undergraduate engineers, select the Python 3.6 version.   You may be prompted to enter your email. You can still download Anaconda if you click  No Thanks  and don't enter your Work Email address.   The download is quite large (over 500 MB) so it may take a while for the download to complete.",
            "title": "2. Download"
        },
        {
            "location": "/02-Installing-Python/02.04-Installing-Anaconda-on-Linux/#3-move-the-dkg-pacakge-to-the-app-folder",
            "text": "Move the .pdk package to the app folder.   Put Image of .pdk package to app folder",
            "title": "3. Move the .dkg pacakge to the app folder"
        },
        {
            "location": "/02-Installing-Python/02.04-Installing-Anaconda-on-Linux/#4-add-conda-to-your-path",
            "text": "Open the OSX Terminal and type:  $ export PATH = /usr/bin/Anaconda/python",
            "title": "4. Add conda to your PATH"
        },
        {
            "location": "/02-Installing-Python/02.04-Installing-Anaconda-on-Linux/#5-open-the-the-python-repl",
            "text": "Open the OSX Terminal and type:  conda create -n env python=3.6  Type  y  after the prompts  Then activate your environment with  $ conda activate env  You should now see  (env)  before the command prompt. At the prompt type:  $(env) Python  This will bring up the python prompt also called the Python REPL  To exit the REPL type:  >>> exit()",
            "title": "5. Open the the Python REPL"
        },
        {
            "location": "/02-Installing-Python/02.05-Summary/",
            "text": "Summary\n\n\nIn this chapter you learned how to install Anaconda on your computer\n\n\nKey Terms\n\n\nAnaconda\n\n\nDownload\n\n\nInstall\n\n\nPython\n\n\nOpperating System\n\n\nWindows\n\n\nMacOS\n\n\nLinux",
            "title": "Summary"
        },
        {
            "location": "/02-Installing-Python/02.05-Summary/#summary",
            "text": "In this chapter you learned how to install Anaconda on your computer",
            "title": "Summary"
        },
        {
            "location": "/02-Installing-Python/02.05-Summary/#key-terms",
            "text": "Anaconda  Download  Install  Python  Opperating System  Windows  MacOS  Linux",
            "title": "Key Terms"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.00-Introduction/",
            "text": "Jupyter Notebooks\n\n\nIntroduction\n\n\nIn this chapter you will learn:\n\n\n\n\n\n\nWhat a Jupyter Notebook is\n\n\n\n\n\n\nHow to Open a Jupyter Notebook\n\n\n\n\n\n\nHow to write code in a Jupyter Notebook\n\n\n\n\n\n\nHow to run code in a Jupyter Notebook\n\n\n\n\n\n\nHow to save and close a Jupyter Notebook",
            "title": "Introduction"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.00-Introduction/#jupyter-notebooks",
            "text": "",
            "title": "Jupyter Notebooks"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.00-Introduction/#introduction",
            "text": "In this chapter you will learn:    What a Jupyter Notebook is    How to Open a Jupyter Notebook    How to write code in a Jupyter Notebook    How to run code in a Jupyter Notebook    How to save and close a Jupyter Notebook",
            "title": "Introduction"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.01-What-is-a-Jupyter-Notebook/",
            "text": "What is a Jupyter Notebook\n\n\nA Jupyter notebook is sort of half way between the Python REPL and a Python module .py file. \n\n\nJupyter notebooks run in a web browser like Google Chrome where as .py files are edited with a text editor like notepad. Regular .py files only contain Python commands and comments. Jupyter notebooks contain two types of cells: code cells and markdown cells. Lines of Python code are run in code cells. Markdown cells contain comment like descriptions to describe code cells.",
            "title": "What is a Jupyter Notebook"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.01-What-is-a-Jupyter-Notebook/#what-is-a-jupyter-notebook",
            "text": "A Jupyter notebook is sort of half way between the Python REPL and a Python module .py file.   Jupyter notebooks run in a web browser like Google Chrome where as .py files are edited with a text editor like notepad. Regular .py files only contain Python commands and comments. Jupyter notebooks contain two types of cells: code cells and markdown cells. Lines of Python code are run in code cells. Markdown cells contain comment like descriptions to describe code cells.",
            "title": "What is a Jupyter Notebook"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.02-Why-Jupyter-Notebooks/",
            "text": "Why Jupyter Notebooks?\n\n\nThere is a vast array of editors and IDE's (Integrated Development Environments) which can be used to edit and run Python code. Why should engineers learn to use Jupyter Notebooks? \n\n\nBelow is a table of simple text editors and IDE's which can be used to edit and run Python code:\n\n\n\n\n\n\n\n\nText Editors\n\n\n\n\n\n\n\n\n\n\nNotepad\n\n\n\n\n\n\nIdle\n\n\n\n\n\n\nVim\n\n\n\n\n\n\nSublime Text\n\n\n\n\n\n\nAtom\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIDE's\n\n\n\n\n\n\n\n\n\n\nPyCharm\n\n\n\n\n\n\nVisual Studio Code\n\n\n\n\n\n\nSpyder\n\n\n\n\n\n\n\n\nJupyter Notebooks provide a quick and streamlined way for engineers to prototype code and quickly share code.  Jupyter notebooks also provide a way for engineers to share solutions with team members, supervisors and customers.",
            "title": "Why Jupyter Notebooks?"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.02-Why-Jupyter-Notebooks/#why-jupyter-notebooks",
            "text": "There is a vast array of editors and IDE's (Integrated Development Environments) which can be used to edit and run Python code. Why should engineers learn to use Jupyter Notebooks?   Below is a table of simple text editors and IDE's which can be used to edit and run Python code:     Text Editors      Notepad    Idle    Vim    Sublime Text    Atom        IDE's      PyCharm    Visual Studio Code    Spyder     Jupyter Notebooks provide a quick and streamlined way for engineers to prototype code and quickly share code.  Jupyter notebooks also provide a way for engineers to share solutions with team members, supervisors and customers.",
            "title": "Why Jupyter Notebooks?"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.03-Installing-Juypter/",
            "text": "Installing Juypter\n\n\nTo install \nJupyter Notebooks\n, the simplest way is to use the \nAnaconda\n distribution of Python. Anaconda has \nJupyter Notebooks\n pre-installed and no further steps are necessary.\n\n\nInstalling Jupyter on Windows\n\n\nTo install jupyter on Windows, open the Anaconda prompt and type:\n\n\n$ conda install jupyter\n\n\n\n\nType \ny\n for yes when prompted.\n\n\nInstalling Jupyter on Mac OSX\n\n\nTo install jupyter on Mac OSX, open the OSX terminal and type:\n\n\n$ conda install jupyter\n\n\n\n\nType \ny\n for yes when prompted.\n\n\nInstalling Jupyter on Ubuntu Linux\n\n\nTo install jupyter on Ubuntu Linux, open a terminal and type:\n\n\n$ conda install jupyter\n\n\n\n\nType \ny\n for yes when prompted.",
            "title": "Installing Juypter"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.03-Installing-Juypter/#installing-juypter",
            "text": "To install  Jupyter Notebooks , the simplest way is to use the  Anaconda  distribution of Python. Anaconda has  Jupyter Notebooks  pre-installed and no further steps are necessary.",
            "title": "Installing Juypter"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.03-Installing-Juypter/#installing-jupyter-on-windows",
            "text": "To install jupyter on Windows, open the Anaconda prompt and type:  $ conda install jupyter  Type  y  for yes when prompted.",
            "title": "Installing Jupyter on Windows"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.03-Installing-Juypter/#installing-jupyter-on-mac-osx",
            "text": "To install jupyter on Mac OSX, open the OSX terminal and type:  $ conda install jupyter  Type  y  for yes when prompted.",
            "title": "Installing Jupyter on Mac OSX"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.03-Installing-Juypter/#installing-jupyter-on-ubuntu-linux",
            "text": "To install jupyter on Ubuntu Linux, open a terminal and type:  $ conda install jupyter  Type  y  for yes when prompted.",
            "title": "Installing Jupyter on Ubuntu Linux"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.04-Opening-a-Jupyter-Notebook/",
            "text": "Opening a Jupyter Notebook\n\n\nOne simple way to open a jupyter notebook on Windows is to click the Windows Start Button in the lower left-hand corner, select the Anaconda Foldfer, and click Jupyter Notebook.\n\n\nOpen a Jupyter Notebook from the Anaconda prompt\n\n\nTo Open a Jupyter notebook from the Anaconda prompt, first open the Anaconda prompt, then type:\n\n\n$ jupyter notebook\n\n\n\n\nThis will produce output in the Anaconda Prompt Window which looks something like:\n\n\n\nA webbrowser will open and something which looks kind of like a file browser will be shown:\n\n\n\n\nHere you can select an exhisting jupyter notebook file which will end with the \n.ipynb\n extension (which stands for IPython Notebook). You can also start a new Jupyter Notebook my clicking the [New] button in the upper right and selecting [Python 3]",
            "title": "Opening a Jupyter Notebook"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.04-Opening-a-Jupyter-Notebook/#opening-a-jupyter-notebook",
            "text": "One simple way to open a jupyter notebook on Windows is to click the Windows Start Button in the lower left-hand corner, select the Anaconda Foldfer, and click Jupyter Notebook.",
            "title": "Opening a Jupyter Notebook"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.04-Opening-a-Jupyter-Notebook/#open-a-jupyter-notebook-from-the-anaconda-prompt",
            "text": "To Open a Jupyter notebook from the Anaconda prompt, first open the Anaconda prompt, then type:  $ jupyter notebook  This will produce output in the Anaconda Prompt Window which looks something like:  \nA webbrowser will open and something which looks kind of like a file browser will be shown:   Here you can select an exhisting jupyter notebook file which will end with the  .ipynb  extension (which stands for IPython Notebook). You can also start a new Jupyter Notebook my clicking the [New] button in the upper right and selecting [Python 3]",
            "title": "Open a Jupyter Notebook from the Anaconda prompt"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/",
            "text": "The Jupyter Notebook Interface\n\n\nWhen a new notebook opens, you will see the Jupter Notebook interface. Accross the top of the notebook will the the Jupyter icon and the Notebook name. You can click in the notebook name field and change the name of the notebook. Note that the file extension \n.ipynb\n is not printed in the file name field, but if you look in the Home tab, you will see that the notebook is saved with the \n.ipynb\n extension.\n\n\nMenus and Buttons\n\n\nA jupyter notebook is comprised of a bunch of cells which are arrayed one after another in boxes below the menu items and buttons. There are two main types of cells: Markdown cells and Code cells.\n\n\nCode Cells\n\n\nIn code cells you can type Python Code and see the output. An example of a code cell is shown below. Note that the code cell has an the text \nIn[ ]\n to the left of it. \n\n\nTo run the code in a code cell push the [Run] button or type [Shift]+[Enter]\n\n\nMarkdown Cells\n\n\nIn markdown cells you can type text and headings. Markdown cells are used for documentation and explaining your code. The text in a markdown cell is not executed. Markdown cells can be formatted with a few special characters\n\n\n# H1 Heading\n\n\nH1 Heading\n\n\n## H2 Heading\n\n\nH2 Heading\n\n\n### H3 Heading\n\n\nH3 Heading\n\n\n#### H4 Heading\n\n\nH4 Heading\n\n\n\n\nInline code blocks (use the ` left qutoe character, the character to the left of one, and above tab on most keyboards)\n\n\n``` \nInline code blocks\n ```\n\n\n\n\n```\n\n\nSeperated code blocks\n\n\n```\n\n\nSeperated code blocks\n\n\n\n\nSaving Jupyter Notebooks in Other Formats\n\n\nJupyter notebooks can be saved in other formats besides the native \n.ipynb\n format. These formats can be acceed on the [File] --> [Download As] menu.\n\n\n\n\nThe available file types are:\n\n\n\n\nNotebook (.ipynb) - The native jupyter notebook format\n\n\nPython (.py) - The native Python code file type.\n\n\nHTML (.html) - A web page\n\n\nMarkdown (.md) - Markdown format\n\n\nreST (.rst) - Restructured text format\n\n\nLaTeX (.tex) - LaTeX Artile format\n\n\nPDF via LaTeX - a pdf exported from LeTeX, requires a converter\n\n\n\n\nWhen a Notebook is saved as a \n.py\n file, any text in Mardown Cells are converted to commments, and any code cells are kept as Python code. \n\n\n\n\nThe \n.py\n file after this notebook is \nDownloaded as\n a \nPython(.py)\n looks like:",
            "title": "The Jupyter Notebook Interface"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#the-jupyter-notebook-interface",
            "text": "When a new notebook opens, you will see the Jupter Notebook interface. Accross the top of the notebook will the the Jupyter icon and the Notebook name. You can click in the notebook name field and change the name of the notebook. Note that the file extension  .ipynb  is not printed in the file name field, but if you look in the Home tab, you will see that the notebook is saved with the  .ipynb  extension.",
            "title": "The Jupyter Notebook Interface"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#menus-and-buttons",
            "text": "A jupyter notebook is comprised of a bunch of cells which are arrayed one after another in boxes below the menu items and buttons. There are two main types of cells: Markdown cells and Code cells.",
            "title": "Menus and Buttons"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#code-cells",
            "text": "In code cells you can type Python Code and see the output. An example of a code cell is shown below. Note that the code cell has an the text  In[ ]  to the left of it.   To run the code in a code cell push the [Run] button or type [Shift]+[Enter]",
            "title": "Code Cells"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#markdown-cells",
            "text": "In markdown cells you can type text and headings. Markdown cells are used for documentation and explaining your code. The text in a markdown cell is not executed. Markdown cells can be formatted with a few special characters  # H1 Heading",
            "title": "Markdown Cells"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#h1-heading",
            "text": "## H2 Heading",
            "title": "H1 Heading"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#h2-heading",
            "text": "### H3 Heading",
            "title": "H2 Heading"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#h3-heading",
            "text": "#### H4 Heading",
            "title": "H3 Heading"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#h4-heading",
            "text": "Inline code blocks (use the ` left qutoe character, the character to the left of one, and above tab on most keyboards)  ```  Inline code blocks  ```   ```  Seperated code blocks  ```  Seperated code blocks",
            "title": "H4 Heading"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#saving-jupyter-notebooks-in-other-formats",
            "text": "Jupyter notebooks can be saved in other formats besides the native  .ipynb  format. These formats can be acceed on the [File] --> [Download As] menu.   The available file types are:   Notebook (.ipynb) - The native jupyter notebook format  Python (.py) - The native Python code file type.  HTML (.html) - A web page  Markdown (.md) - Markdown format  reST (.rst) - Restructured text format  LaTeX (.tex) - LaTeX Artile format  PDF via LaTeX - a pdf exported from LeTeX, requires a converter   When a Notebook is saved as a  .py  file, any text in Mardown Cells are converted to commments, and any code cells are kept as Python code.    The  .py  file after this notebook is  Downloaded as  a  Python(.py)  looks like:",
            "title": "Saving Jupyter Notebooks in Other Formats"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.07-Magic-Cells/",
            "text": "Magic Cells\n\n\nJupyter notebook code cells can contain special commands which are note valid Python code, but will affect the behavior of the notebook\n\n\n%matplotlib inline\n\n\nOne of the most popular magic commands is:\n\n\n%matplotlib inline\n\n\n\n\nUsing this command at the top of a jupyter notebook will produce matplotlib plots in cells of the notebook. Without \n%matplotlib inline\n, plots will jump out as external windows. A typical start to a jupyter notebook using \nmatplotlib\n might start as:\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\n\n\n%load\n\n\nThe \n%load\n command will load a python module, webpage or file into an jupyter notebook\n\n\n\n\n\nIn\u00a0[9]:\n\n\n\n    \n\n\n# %load hello.py\n\n\nprint\n(\n'This code was run from a seperate Python file'\n)\n\n\nprint\n(\n'Hellow from the file hello.py'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis code was run from a seperate Python file\nHellow from the file hello.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n%run\n\n\nThe \n%run\n magic command followed by the name of a python file will run the current python file as a script. Suppose the file \nhello.py\n is created in the same directory as the running jupyter notebook. The directory structure will look something like this:\n\n\n| folder\n---| notebook.ipynb\n---| hello.py\n\n\n\n\nIn the file \nhello.py\n is the code:\n\n\nprint('This code was run from a seperate Python file')\nprint('Hellow from the file hello.py')\n\n\n\n\nWithin our jupyter notebook, if we \n%run\n this file, we will get the output of or hello.py script in a jupyter notebook output cell.\n\n\n%run hello.py\n\n\n\n\n\nIn\u00a0[10]:\n\n\n\n    \n\n\n%\npwd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[10]:\n\n\n\n\n\n\n\n\n'C:\\\\Users\\\\peter.kazarinoff\\\\Documents\\\\book\\\\notebooks\\\\04-Jupyter-Notebooks'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[11]:\n\n\n\n    \n\n\n%\nls\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Volume in drive C is Windows\n Volume Serial Number is A048-4C53\n\n Directory of C:\\Users\\peter.kazarinoff\\Documents\\book\\notebooks\\04-Jupyter-Notebooks\n\n04/19/2018  06:01 PM    <DIR>          .\n04/19/2018  06:01 PM    <DIR>          ..\n04/18/2018  12:24 PM    <DIR>          .ipynb_checkpoints\n04/18/2018  12:17 PM             1,164 04.00-Introduction.ipynb\n04/18/2018  12:21 PM             1,125 04.01-What-is-a-Jupyter-Notebook.ipynb\n04/18/2018  12:21 PM             1,477 04.02-Why-Jupyter-Notebooks.ipynb\n04/18/2018  12:26 PM             1,901 04.03-Installing-Juypter.ipynb\n04/18/2018  02:37 PM             2,029 04.04-Opening-a-Jupyter-Notebook.ipynb\n04/19/2018  07:23 AM             4,196 04.05-The-Jupyter-Notebook-Interface.ipynb\n04/19/2018  06:01 PM            11,102 04.07-Magic-Cells.ipynb\n04/18/2018  12:24 PM             1,325 04.08-Summary.ipynb\n04/03/2018  04:11 PM               970 04.09-Review-Questions.ipynb\n04/19/2018  05:53 PM                94 hello.py\n04/18/2018  02:36 PM    <DIR>          images\n              10 File(s)         25,383 bytes\n               4 Dir(s)  133,241,610,240 bytes free\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOther usefull magic commands\n\n\nOther usefull magic commands are:\n\n\n\n\n\n\n\n\nmagic command\n\n\nresult\n\n\n\n\n\n\n\n\n\n\n%pwd\n\n\nprint the current working directory\n\n\n\n\n\n\n%cd\n\n\nchange the current working directory\n\n\n\n\n\n\n%ls\n\n\nlist the contents of the current directory\n\n\n\n\n\n\n%history\n\n\nthe history of the \nIn [ ]:\n commands\n\n\n\n\n\n\n\n\nYou can list all of the available magic commands by typing and running \n%lsmagic\n in a jupyter notebook code cell:\n\n\n\n\n\nIn\u00a0[12]:\n\n\n\n    \n\n\n%\nlsmagic\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[12]:\n\n\n\n\n\n\n\n\nAvailable line magics:\n%alias  %alias_magic  %autocall  %automagic  %autosave  %bookmark  %cd  %clear  %cls  %colors  %config  %connect_info  %copy  %ddir  %debug  %dhist  %dirs  %doctest_mode  %echo  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %less  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %macro  %magic  %matplotlib  %mkdir  %more  %notebook  %page  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %popd  %pprint  %precision  %profile  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %qtconsole  %quickref  %recall  %rehashx  %reload_ext  %ren  %rep  %rerun  %reset  %reset_selective  %rmdir  %run  %save  %sc  %set_env  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode\n\nAvailable cell magics:\n%%!  %%HTML  %%SVG  %%bash  %%capture  %%cmd  %%debug  %%file  %%html  %%javascript  %%js  %%latex  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile\n\nAutomagic is ON, % prefix IS NOT needed for line magics.",
            "title": "Magic Cells"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.07-Magic-Cells/#magic-cells",
            "text": "Jupyter notebook code cells can contain special commands which are note valid Python code, but will affect the behavior of the notebook",
            "title": "Magic Cells"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.07-Magic-Cells/#matplotlib-inline",
            "text": "One of the most popular magic commands is:  %matplotlib inline  Using this command at the top of a jupyter notebook will produce matplotlib plots in cells of the notebook. Without  %matplotlib inline , plots will jump out as external windows. A typical start to a jupyter notebook using  matplotlib  might start as:  import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline",
            "title": "%matplotlib inline"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.07-Magic-Cells/#load",
            "text": "The  %load  command will load a python module, webpage or file into an jupyter notebook   In\u00a0[9]:  \n      # %load hello.py  print ( 'This code was run from a seperate Python file' )  print ( 'Hellow from the file hello.py' )           This code was run from a seperate Python file\nHellow from the file hello.py",
            "title": "%load"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.07-Magic-Cells/#run",
            "text": "The  %run  magic command followed by the name of a python file will run the current python file as a script. Suppose the file  hello.py  is created in the same directory as the running jupyter notebook. The directory structure will look something like this:  | folder\n---| notebook.ipynb\n---| hello.py  In the file  hello.py  is the code:  print('This code was run from a seperate Python file')\nprint('Hellow from the file hello.py')  Within our jupyter notebook, if we  %run  this file, we will get the output of or hello.py script in a jupyter notebook output cell.  %run hello.py   In\u00a0[10]:  \n      % pwd         Out[10]:   'C:\\\\Users\\\\peter.kazarinoff\\\\Documents\\\\book\\\\notebooks\\\\04-Jupyter-Notebooks'         In\u00a0[11]:  \n      % ls            Volume in drive C is Windows\n Volume Serial Number is A048-4C53\n\n Directory of C:\\Users\\peter.kazarinoff\\Documents\\book\\notebooks\\04-Jupyter-Notebooks\n\n04/19/2018  06:01 PM    <DIR>          .\n04/19/2018  06:01 PM    <DIR>          ..\n04/18/2018  12:24 PM    <DIR>          .ipynb_checkpoints\n04/18/2018  12:17 PM             1,164 04.00-Introduction.ipynb\n04/18/2018  12:21 PM             1,125 04.01-What-is-a-Jupyter-Notebook.ipynb\n04/18/2018  12:21 PM             1,477 04.02-Why-Jupyter-Notebooks.ipynb\n04/18/2018  12:26 PM             1,901 04.03-Installing-Juypter.ipynb\n04/18/2018  02:37 PM             2,029 04.04-Opening-a-Jupyter-Notebook.ipynb\n04/19/2018  07:23 AM             4,196 04.05-The-Jupyter-Notebook-Interface.ipynb\n04/19/2018  06:01 PM            11,102 04.07-Magic-Cells.ipynb\n04/18/2018  12:24 PM             1,325 04.08-Summary.ipynb\n04/03/2018  04:11 PM               970 04.09-Review-Questions.ipynb\n04/19/2018  05:53 PM                94 hello.py\n04/18/2018  02:36 PM    <DIR>          images\n              10 File(s)         25,383 bytes\n               4 Dir(s)  133,241,610,240 bytes free",
            "title": "%run"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.07-Magic-Cells/#other-usefull-magic-commands",
            "text": "Other usefull magic commands are:     magic command  result      %pwd  print the current working directory    %cd  change the current working directory    %ls  list the contents of the current directory    %history  the history of the  In [ ]:  commands     You can list all of the available magic commands by typing and running  %lsmagic  in a jupyter notebook code cell:   In\u00a0[12]:  \n      % lsmagic         Out[12]:   Available line magics:\n%alias  %alias_magic  %autocall  %automagic  %autosave  %bookmark  %cd  %clear  %cls  %colors  %config  %connect_info  %copy  %ddir  %debug  %dhist  %dirs  %doctest_mode  %echo  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %less  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %macro  %magic  %matplotlib  %mkdir  %more  %notebook  %page  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %popd  %pprint  %precision  %profile  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %qtconsole  %quickref  %recall  %rehashx  %reload_ext  %ren  %rep  %rerun  %reset  %reset_selective  %rmdir  %run  %save  %sc  %set_env  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode\n\nAvailable cell magics:\n%%!  %%HTML  %%SVG  %%bash  %%capture  %%cmd  %%debug  %%file  %%html  %%javascript  %%js  %%latex  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile\n\nAutomagic is ON, % prefix IS NOT needed for line magics.",
            "title": "Other usefull magic commands"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.08-Summary/",
            "text": "Summary\n\n\nIn this chapter we learned...\n\n\nKey Vocabulary and Terms\n\n\nKernal\n\n\nNotebook\n\n\nJupyter\n\n\niPython\n\n\nExecute\n\n\n.ipynb file\n\n\nPython Commands and Functions\n\n\n%matplotlib inline",
            "title": "Summary"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.08-Summary/#summary",
            "text": "In this chapter we learned...",
            "title": "Summary"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.08-Summary/#key-vocabulary-and-terms",
            "text": "Kernal  Notebook  Jupyter  iPython  Execute  .ipynb file",
            "title": "Key Vocabulary and Terms"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.08-Summary/#python-commands-and-functions",
            "text": "%matplotlib inline",
            "title": "Python Commands and Functions"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.09-Review-Questions/",
            "text": "Review Questions\n\n\n\n\n\n\n\n\n2.\n\n\n3.\n\n\n4.\n\n\n5.\n\n\n6.\n\n\n7.\n\n\n8.",
            "title": "Review Questions"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.09-Review-Questions/#review-questions",
            "text": "2.  3.  4.  5.  6.  7.  8.",
            "title": "Review Questions"
        },
        {
            "location": "/04-The-Python-REPL/02.00-Introduction/",
            "text": "The Python REPL\n\n\nIntroduction\n\n\nBy the end of this chapter, you will be able to:\n\n\n\n\n\n\nComplete mathematical calculations at the Python command line\n\n\n\n\n\n\nBe able to open and close the Python REPL\n\n\n\n\n\n\nImport the math and statistics module from the standard library and use their functions\n\n\n\n\n\n\nUse the output from Python command line as input in another problem\n\n\n\n\n\n\nCombine \nTrue\n and \nFalse\n in logical statements",
            "title": "Introduction"
        },
        {
            "location": "/04-The-Python-REPL/02.00-Introduction/#the-python-repl",
            "text": "",
            "title": "The Python REPL"
        },
        {
            "location": "/04-The-Python-REPL/02.00-Introduction/#introduction",
            "text": "By the end of this chapter, you will be able to:    Complete mathematical calculations at the Python command line    Be able to open and close the Python REPL    Import the math and statistics module from the standard library and use their functions    Use the output from Python command line as input in another problem    Combine  True  and  False  in logical statements",
            "title": "Introduction"
        },
        {
            "location": "/04-The-Python-REPL/02.01-Python-as-a-fancy-calculator/",
            "text": "Python as a fancy calculator\n\n\nPython can be used as a fancy calculator to do arithmetic like addition, subtraction, multiplication and division. It can also be used for trigonometric calculations and statistical calculations.\n\n\nArithmetic\n\n\nPython can be used as a calculator to make simple or complex calculations. \n\n\nWe can do this easily with Python at the Python Prompt, often called the Python REPL for Read Evaluate Print Loop. The Python REPL shows three arrow symbols \n>>>\n after which you will see a blinking cursor. Programmers type commands at the prompt then hit [ENTER]. The is Read by the interperator, results of running the commands are Evaluated then Printed to the command window.  After the output a new \n>>>\n prompt appears on a new line. This process happens over and over again (in a loop). Try the following commands at the Python REPL:\n\n\n\n\nThe mass of a battery is 5 kg and the mass of the battery cables is 3 kg. What is the mass of the battery cable assembly?\n\n\n\n\n>>> 5 + 3\n8\n\n\n\n\n\n\nSuppose one of the cables above is removed and it has a mass of 1.5 kg. What is the mass of the left over assembly\n\n\n\n\n>>> 8 - 1.5\n6.5\n\n\n\n\n\n\nIf the battery has a mass of 5000 g and a volume of 2500 \ncm^3\ncm^3\n What is the density of the battery? The formula for density is below, where D is density, m is mass and v is volume.\n\n\n\n\n\n\n D = \\frac{m}{v} \n\n\n D = \\frac{m}{v} \n\n\n\n\nIn the problem above \nm = 5000\nm = 5000\n and \nv=2500\nv=2500\n\n\nLet's solve this with Python\n\n\n>>> 5000 / 2500\n2.0\n\n\n\n\n\n\nWhat if we have 2 batteries that each weight 5 kg? How much mass is two batteries?\n\n\n\n\n>>> 5 * 2\n2.0\n\n\n\n\n\n\nThe dimension of the battery of each battery is 3 cm. What is the area of the base of the battery?\nTo do this probems we use the the ** symbol to raise a number to a power. This is similar to using \n3^2\n3^2\n.\n\n\n\n\n>>> 3 ** 2\n9\n\n\n\n\n\n\nWhat is the volume of the battery if each the length, width and height of the battery are all 3cm?\n\n\n\n\n>>> 3 ** 3\n27\n\n\n\n\n\n\nFind the mass of the two batteries, and two cables\n\n\n\n\nWe can use Python to find the mass of the batteries and then use the answer, which Python saves as an underscore _ to use in our next operation. (This is similar to ans in MatLab)\n\n\n>>> 2 * 5 \n10\n>>> _ + 1.5 + 1\n12.5\n\n\n\n\nSection Summary\n\n\nA summary of the arithmetic operations in python are below\n+ , - , * , /, ** \nthe answer is saved as underscore _\n\n\nTrig: sin, cos, tan\n\n\nPython as a fancy calculator is not limited to simple arithmetic. Trig functions sin, cos and tan are also available. In order to use these functions, we need to learn a new concept: importing modules. \nIn python there are many functions built into the language when it starts. These include + , -, *, / like we say in the last section. However not all functions will work right when python starts. Say we want to find the sin of an angle. Try the following:\n\n\n>>> sin(60)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sin' is not defined\n\n\n\n\nThis error is returned because we have not told python to include the sin function. The sin function is part of the \\textit{standard library}. The standard library comes with every python installation and includes many functions, but not all of these functions are available to us when we start a new python window. In order to use the sin function, we first need to import it from math \\textit{module} which is part of the standard library. \n\n\nImporting modules and functions is easy. We use the following syntax: from \\textit{module name} import textit{function name} \n\n\nTo import the sin function from the math module try:\n\n\n>>> from math import sin\n>>> sin(60)\n-0.3048106211022167\n\n\n\n\nsuccess! You can also import multiple modules at once. Say we want to use a bunch of different trig functions to solve the following problem.\n\n\n\n\nA vector is at an angle of pi/6 radians. What is the sin, cos and tan of the angle?\n\n\n\n\nTo solve this problem we need to import the sin, cos, and tan fuctions. It would also be usefull to have the value of pi, rather than having to write 3.14.... We can import these all at the same time with commas in between. \n\n\nTry:\n\n\n>>> from math import sin, cos, tan, pi\n>>> pi\n3.141592653589793\n>>> pi/4\n0.7853981633974483\n>>> sin(pi/4)\n0.7853981633974483\n>>> sin(2*pi)\n\n\n\n\ncos\ntan\npi\ndegrees(x) rad --> deg\nradians(x) deg --> rad\nasin\nacos\natan\n\n\nExponents and Logarithms\n\n\nIt is easy to calculate expnents and logarithms as well. Note that these need to be imported from the \nmath\n module just like the trig functions above. \n\n\nThe following functions can be imported from the math module:\n\n\nlog\nlog10\nexp\ne\npow(x,y)\nsqrt\n\n\nLet's try a couple of examples\n\n\n>>> from math import log, log10, exp, e, pow, sqrt\n>>> F = 3.0*e**3.4  \n>>> log(F)         # note: natural log\n4.4986122886681095\n\n\n\n\ntriangle with sides 3 and 4 what is the hypotenuse?\n\n\n>>> a=3\n>>> b=4\n>>> c=sqrt(a**2 + b**2)\n>>> c\n5.0 \n\n\n\n\nThe power function works like the \n**\n operator to raise a number to a power\n\n\n>>> a = 5**2\n>>> a\n\n\n\n\n>>> b = pow(5,2)\n>>> b\n25.0\n\n\n\n\nProblem: The arranous relationship states that\n\n\n\n\n n = n_{v}e^{-Q_v/(RT)} \n\n\n n = n_{v}e^{-Q_v/(RT)} \n\n\n\n\n>>> nv = 2.0**(-0.3)\n>>> Qv = 5\n>>> R = 3.18\n>>> T = 293\n>>> n = nv*e**(-1*Qv/(R*T))\n>>> n\n0.8079052775625613\n\n\n\n\nStaticstics\n\n\nTo round out this section, we will look at a couple of statistics functions. These functions are part of the \nstandard library\n but not part of the \nmath\n module. To access these statistics functions we need to import them from the \nstatistics\n module using the statement \nfrom statistics import mean, median, mode, stdev\n. Then the functions \nmean\n, \nmedian\n, \nmode\n and \nstdev\n(standard deviation) can be used.  \n\n\n>>> from statistics import mean, median, mode, stdev\n\n>>> test_scores = [ 60 , 83, 83, 91, 100]\n\n>>> mean(test_scores)\n83.4\n\n>>> median(test_scores)\n83\n\n>>> mode(test_scores)\n83\n\n>>> stdev(test_scores) # standard deviation of a sample\n14.842506526863986 \n\n\n\n\nAlternativly, we can import the whole \nstatistics\n module using the statement \nimport statistics\n. Then to use the functions, we need to use the names \nstatistics.mean\n, \nstatistics.median\n, \nstatistics.mode\n, and \nstatistics.stdev\n. See below:\n\n\n>>> import statistics\n\n>>> test_scores = [ 60 , 83, 83, 91, 100]\n\n>>> statistics.mean(test_scores)\n83.4\n\n>>> statistics.median(test_scores)\n83\n\n>>> statistics.mode(test_scores)\n83\n\n>>> statistics.stdev(test_scores) # standard deviation of a sample\n14.842506526863986",
            "title": "Python as a fancy calculator"
        },
        {
            "location": "/04-The-Python-REPL/02.01-Python-as-a-fancy-calculator/#python-as-a-fancy-calculator",
            "text": "Python can be used as a fancy calculator to do arithmetic like addition, subtraction, multiplication and division. It can also be used for trigonometric calculations and statistical calculations.",
            "title": "Python as a fancy calculator"
        },
        {
            "location": "/04-The-Python-REPL/02.01-Python-as-a-fancy-calculator/#arithmetic",
            "text": "Python can be used as a calculator to make simple or complex calculations.   We can do this easily with Python at the Python Prompt, often called the Python REPL for Read Evaluate Print Loop. The Python REPL shows three arrow symbols  >>>  after which you will see a blinking cursor. Programmers type commands at the prompt then hit [ENTER]. The is Read by the interperator, results of running the commands are Evaluated then Printed to the command window.  After the output a new  >>>  prompt appears on a new line. This process happens over and over again (in a loop). Try the following commands at the Python REPL:   The mass of a battery is 5 kg and the mass of the battery cables is 3 kg. What is the mass of the battery cable assembly?   >>> 5 + 3\n8   Suppose one of the cables above is removed and it has a mass of 1.5 kg. What is the mass of the left over assembly   >>> 8 - 1.5\n6.5   If the battery has a mass of 5000 g and a volume of 2500  cm^3 cm^3  What is the density of the battery? The formula for density is below, where D is density, m is mass and v is volume.     D = \\frac{m}{v}    D = \\frac{m}{v}    In the problem above  m = 5000 m = 5000  and  v=2500 v=2500  Let's solve this with Python  >>> 5000 / 2500\n2.0   What if we have 2 batteries that each weight 5 kg? How much mass is two batteries?   >>> 5 * 2\n2.0   The dimension of the battery of each battery is 3 cm. What is the area of the base of the battery?\nTo do this probems we use the the ** symbol to raise a number to a power. This is similar to using  3^2 3^2 .   >>> 3 ** 2\n9   What is the volume of the battery if each the length, width and height of the battery are all 3cm?   >>> 3 ** 3\n27   Find the mass of the two batteries, and two cables   We can use Python to find the mass of the batteries and then use the answer, which Python saves as an underscore _ to use in our next operation. (This is similar to ans in MatLab)  >>> 2 * 5 \n10\n>>> _ + 1.5 + 1\n12.5",
            "title": "Arithmetic"
        },
        {
            "location": "/04-The-Python-REPL/02.01-Python-as-a-fancy-calculator/#section-summary",
            "text": "A summary of the arithmetic operations in python are below\n+ , - , * , /, ** \nthe answer is saved as underscore _",
            "title": "Section Summary"
        },
        {
            "location": "/04-The-Python-REPL/02.01-Python-as-a-fancy-calculator/#trig-sin-cos-tan",
            "text": "Python as a fancy calculator is not limited to simple arithmetic. Trig functions sin, cos and tan are also available. In order to use these functions, we need to learn a new concept: importing modules. \nIn python there are many functions built into the language when it starts. These include + , -, *, / like we say in the last section. However not all functions will work right when python starts. Say we want to find the sin of an angle. Try the following:  >>> sin(60)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sin' is not defined  This error is returned because we have not told python to include the sin function. The sin function is part of the \\textit{standard library}. The standard library comes with every python installation and includes many functions, but not all of these functions are available to us when we start a new python window. In order to use the sin function, we first need to import it from math \\textit{module} which is part of the standard library.   Importing modules and functions is easy. We use the following syntax: from \\textit{module name} import textit{function name}   To import the sin function from the math module try:  >>> from math import sin\n>>> sin(60)\n-0.3048106211022167  success! You can also import multiple modules at once. Say we want to use a bunch of different trig functions to solve the following problem.   A vector is at an angle of pi/6 radians. What is the sin, cos and tan of the angle?   To solve this problem we need to import the sin, cos, and tan fuctions. It would also be usefull to have the value of pi, rather than having to write 3.14.... We can import these all at the same time with commas in between.   Try:  >>> from math import sin, cos, tan, pi\n>>> pi\n3.141592653589793\n>>> pi/4\n0.7853981633974483\n>>> sin(pi/4)\n0.7853981633974483\n>>> sin(2*pi)  cos\ntan\npi\ndegrees(x) rad --> deg\nradians(x) deg --> rad\nasin\nacos\natan",
            "title": "Trig: sin, cos, tan"
        },
        {
            "location": "/04-The-Python-REPL/02.01-Python-as-a-fancy-calculator/#exponents-and-logarithms",
            "text": "It is easy to calculate expnents and logarithms as well. Note that these need to be imported from the  math  module just like the trig functions above.   The following functions can be imported from the math module:  log\nlog10\nexp\ne\npow(x,y)\nsqrt  Let's try a couple of examples  >>> from math import log, log10, exp, e, pow, sqrt\n>>> F = 3.0*e**3.4  \n>>> log(F)         # note: natural log\n4.4986122886681095  triangle with sides 3 and 4 what is the hypotenuse?  >>> a=3\n>>> b=4\n>>> c=sqrt(a**2 + b**2)\n>>> c\n5.0   The power function works like the  **  operator to raise a number to a power  >>> a = 5**2\n>>> a  >>> b = pow(5,2)\n>>> b\n25.0  Problem: The arranous relationship states that    n = n_{v}e^{-Q_v/(RT)}    n = n_{v}e^{-Q_v/(RT)}    >>> nv = 2.0**(-0.3)\n>>> Qv = 5\n>>> R = 3.18\n>>> T = 293\n>>> n = nv*e**(-1*Qv/(R*T))\n>>> n\n0.8079052775625613",
            "title": "Exponents and Logarithms"
        },
        {
            "location": "/04-The-Python-REPL/02.01-Python-as-a-fancy-calculator/#staticstics",
            "text": "To round out this section, we will look at a couple of statistics functions. These functions are part of the  standard library  but not part of the  math  module. To access these statistics functions we need to import them from the  statistics  module using the statement  from statistics import mean, median, mode, stdev . Then the functions  mean ,  median ,  mode  and  stdev (standard deviation) can be used.    >>> from statistics import mean, median, mode, stdev\n\n>>> test_scores = [ 60 , 83, 83, 91, 100]\n\n>>> mean(test_scores)\n83.4\n\n>>> median(test_scores)\n83\n\n>>> mode(test_scores)\n83\n\n>>> stdev(test_scores) # standard deviation of a sample\n14.842506526863986   Alternativly, we can import the whole  statistics  module using the statement  import statistics . Then to use the functions, we need to use the names  statistics.mean ,  statistics.median ,  statistics.mode , and  statistics.stdev . See below:  >>> import statistics\n\n>>> test_scores = [ 60 , 83, 83, 91, 100]\n\n>>> statistics.mean(test_scores)\n83.4\n\n>>> statistics.median(test_scores)\n83\n\n>>> statistics.mode(test_scores)\n83\n\n>>> statistics.stdev(test_scores) # standard deviation of a sample\n14.842506526863986",
            "title": "Staticstics"
        },
        {
            "location": "/04-The-Python-REPL/02.02-Variables/",
            "text": "Variables and Data Types\n\n\nVariables are assigned in Python using the \n=\n equals sign also called the assignment opperator. The statment:\n\n\na = 2\n\n\n\n\nAssigns the integer \n2\n to the variable \na\n. Note this is different from the logical opperator \n==\n equivalent to.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\na\n \n=\n \n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\na\n \n==\n \n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[2]:\n\n\n\n\n\n\n\n\nTrue",
            "title": "Variables and Data Types"
        },
        {
            "location": "/04-The-Python-REPL/02.02-Variables/#variables-and-data-types",
            "text": "Variables are assigned in Python using the  =  equals sign also called the assignment opperator. The statment:  a = 2  Assigns the integer  2  to the variable  a . Note this is different from the logical opperator  ==  equivalent to.   In\u00a0[1]:  \n      a   =   2         In\u00a0[2]:  \n      a   ==   2         Out[2]:   True",
            "title": "Variables and Data Types"
        },
        {
            "location": "/04-The-Python-REPL/02.03-Boolean-Arithemtic/",
            "text": "Boolean Arithemtic\n\n\nBoolean Arithemtic is the Arithemtic of Logic. A boolean or logical value can either be True or False.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nA\n \n=\n \nTrue\n\n\nB\n \n=\n \nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[2]:\n\n\n\n\n\n\n\n\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[3]:\n\n\n\n\n\n\n\n\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nA\n \nor\n \nB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[4]:\n\n\n\n\n\n\n\n\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\nA\n \nand\n \nB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[5]:\n\n\n\n\n\n\n\n\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nnot\n \nA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[6]:\n\n\n\n\n\n\n\n\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\nnot\n \nB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[7]:\n\n\n\n\n\n\n\n\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[8]:\n\n\n\n    \n\n\nA\n \n==\n \nB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[8]:\n\n\n\n\n\n\n\n\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[9]:\n\n\n\n    \n\n\nA\n \n!=\n \nB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[9]:\n\n\n\n\n\n\n\n\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n\n\n    \n\n\nC\n \n=\n \nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[11]:\n\n\n\n    \n\n\nA\n \nor\n \n(\nC\n \nand\n \nB\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[11]:\n\n\n\n\n\n\n\n\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[12]:\n\n\n\n    \n\n\n(\nA\n \nand\n \nB\n)\n \nor\n \nC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[12]:\n\n\n\n\n\n\n\n\nFalse",
            "title": "Boolean Arithemtic"
        },
        {
            "location": "/04-The-Python-REPL/02.03-Boolean-Arithemtic/#boolean-arithemtic",
            "text": "Boolean Arithemtic is the Arithemtic of Logic. A boolean or logical value can either be True or False.   In\u00a0[1]:  \n      A   =   True  B   =   False         In\u00a0[2]:  \n      A         Out[2]:   True         In\u00a0[3]:  \n      B         Out[3]:   False         In\u00a0[4]:  \n      A   or   B         Out[4]:   True         In\u00a0[5]:  \n      A   and   B         Out[5]:   False         In\u00a0[6]:  \n      not   A         Out[6]:   False         In\u00a0[7]:  \n      not   B         Out[7]:   True         In\u00a0[8]:  \n      A   ==   B         Out[8]:   False         In\u00a0[9]:  \n      A   !=   B         Out[9]:   True         In\u00a0[10]:  \n      C   =   False         In\u00a0[11]:  \n      A   or   ( C   and   B )         Out[11]:   True         In\u00a0[12]:  \n      ( A   and   B )   or   C         Out[12]:   False",
            "title": "Boolean Arithemtic"
        },
        {
            "location": "/04-The-Python-REPL/02.04-String-Opperations/",
            "text": "String Opperations\n\n\nSome opperations we can do on strings include indexing, concatination, and logical comparisions\n\n\nIndexing\n\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nname\n \n=\n \n'Lady Ada'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nname\n[\n1\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[2]:\n\n\n\n\n\n\n\n\n'a'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nname\n[\n2\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[3]:\n\n\n\n\n\n\n\n\n'd'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nname\n[\n1\n:\n4\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[6]:\n\n\n\n\n\n\n\n\n'ady'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\nname\n[:]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[7]:\n\n\n\n\n\n\n\n\n'Lady Ada'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[9]:\n\n\n\n    \n\n\nname\n[\n-\n1\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[9]:\n\n\n\n\n\n\n\n\n'a'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n\n\n    \n\n\nname\n[\n-\n3\n:\n-\n1\n]\n  \n#not including ending\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[10]:\n\n\n\n\n\n\n\n\n'Ad'",
            "title": "String Opperations"
        },
        {
            "location": "/04-The-Python-REPL/02.04-String-Opperations/#string-opperations",
            "text": "Some opperations we can do on strings include indexing, concatination, and logical comparisions",
            "title": "String Opperations"
        },
        {
            "location": "/04-The-Python-REPL/02.04-String-Opperations/#indexing",
            "text": "In\u00a0[1]:  \n      name   =   'Lady Ada'         In\u00a0[2]:  \n      name [ 1 ]         Out[2]:   'a'         In\u00a0[3]:  \n      name [ 2 ]         Out[3]:   'd'         In\u00a0[6]:  \n      name [ 1 : 4 ]         Out[6]:   'ady'         In\u00a0[7]:  \n      name [:]         Out[7]:   'Lady Ada'         In\u00a0[9]:  \n      name [ - 1 ]         Out[9]:   'a'         In\u00a0[10]:  \n      name [ - 3 : - 1 ]    #not including ending         Out[10]:   'Ad'",
            "title": "Indexing"
        },
        {
            "location": "/04-The-Python-REPL/02.05-Print-and-Input-Statements/",
            "text": "Print and Input Statements\n\n\nThe \nprint\n and \ninput\n functions are useful in Python. Below is a code example:\n\n\nname = input('Type your name: ')\nprint('Your name is: ')\nprint(name)",
            "title": "Print and Input Statements"
        },
        {
            "location": "/04-The-Python-REPL/02.05-Print-and-Input-Statements/#print-and-input-statements",
            "text": "The  print  and  input  functions are useful in Python. Below is a code example:  name = input('Type your name: ')\nprint('Your name is: ')\nprint(name)",
            "title": "Print and Input Statements"
        },
        {
            "location": "/04-The-Python-REPL/02.06-Summary/",
            "text": "Summary\n\n\nThis is the text summary for the chapter. Will be about half a page long\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n\nKey Terms and Concepts\n\n\n\n\n\n\n\n\nKey Terms and Concepts\n\n\n\n\n\n\n\n\n\n\nREPL\n\n\n\n\n\n\nOperator\n\n\n\n\n\n\nMathematical Operator\n\n\n\n\n\n\nCommand Line\n\n\n\n\n\n\nError\n\n\n\n\n\n\nModule\n\n\n\n\n\n\nStandard Library\n\n\n\n\n\n\nImport\n\n\n\n\n\n\n\n\nSummary of Python Functions and Commands\n\n\nBelow is a summary of the functions and operators used in this chapter:\n\n\n\n\n\n\n\n\nArithmetic Opperators\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\n+\n\n\nAddition\n\n\n\n\n\n\n-\n\n\nSubtraction\n\n\n\n\n\n\n*\n\n\nMultiplication\n\n\n\n\n\n\n/\n\n\nDivision\n\n\n\n\n\n\n**\n\n\nExponents\n\n\n\n\n\n\n_\n\n\nanswer in memory\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrig Function\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsin\n\n\nsine of angle in radians\n\n\n\n\n\n\ncos\n\n\ncosine of angle in radians\n\n\n\n\n\n\ntan\n\n\ntangent of angle in radians\n\n\n\n\n\n\npi\n\n\n\\pi\n\\pi\n\n\n\n\n\n\ndegress\n\n\nconvert radians to degress\n\n\n\n\n\n\nradians\n\n\nconvert degrees to radians\n\n\n\n\n\n\nasin\n\n\ninverse sine\n\n\n\n\n\n\nacos\n\n\ninverse cosine\n\n\n\n\n\n\natan\n\n\ninverse tangent\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLogarithem and Eponents Function\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nfrom math import *\n\n\n\n\n\n\n\n\nlog\n\n\nlog base e, natural log\n\n\n\n\n\n\nlog10\n\n\nlog base 10\n\n\n\n\n\n\nexp\n\n\ne^{power}\ne^{power}\n\n\n\n\n\n\ne\n\n\nthe constant e\n\n\n\n\n\n\npow(x,y)\n\n\nx raised to the y power\n\n\n\n\n\n\nsqrt\n\n\nsquare root\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStaticstical Function\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nfrom statistics import *\n\n\n\n\n\n\n\n\nmean\n\n\nmean (average)\n\n\n\n\n\n\nmedian\n\n\nmedian (middle value)\n\n\n\n\n\n\nmode\n\n\n(most often)\n\n\n\n\n\n\nstdev\n\n\nstandard deviation of a sample\n\n\n\n\n\n\npstdev\n\n\nstandard deviation of a population",
            "title": "Summary"
        },
        {
            "location": "/04-The-Python-REPL/02.06-Summary/#summary",
            "text": "This is the text summary for the chapter. Will be about half a page long  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
            "title": "Summary"
        },
        {
            "location": "/04-The-Python-REPL/02.06-Summary/#key-terms-and-concepts",
            "text": "Key Terms and Concepts      REPL    Operator    Mathematical Operator    Command Line    Error    Module    Standard Library    Import",
            "title": "Key Terms and Concepts"
        },
        {
            "location": "/04-The-Python-REPL/02.06-Summary/#summary-of-python-functions-and-commands",
            "text": "Below is a summary of the functions and operators used in this chapter:     Arithmetic Opperators  description      +  Addition    -  Subtraction    *  Multiplication    /  Division    **  Exponents    _  answer in memory        Trig Function  description      sin  sine of angle in radians    cos  cosine of angle in radians    tan  tangent of angle in radians    pi  \\pi \\pi    degress  convert radians to degress    radians  convert degrees to radians    asin  inverse sine    acos  inverse cosine    atan  inverse tangent        Logarithem and Eponents Function  description      from math import *     log  log base e, natural log    log10  log base 10    exp  e^{power} e^{power}    e  the constant e    pow(x,y)  x raised to the y power    sqrt  square root        Staticstical Function  description      from statistics import *     mean  mean (average)    median  median (middle value)    mode  (most often)    stdev  standard deviation of a sample    pstdev  standard deviation of a population",
            "title": "Summary of Python Functions and Commands"
        },
        {
            "location": "/04-The-Python-REPL/02.07-Review-Questions/",
            "text": "Review Questions\n\n\n2.1\n\n\n2.2\n\n\n2.3\n\n\n2.4\n\n\n2.5\n\n\n2.6\n\n\n2.7\n\n\n2.8\n\n\n2.9\n\n\n2.10",
            "title": "Review Questions"
        },
        {
            "location": "/04-The-Python-REPL/02.07-Review-Questions/#review-questions",
            "text": "2.1  2.2  2.3  2.4  2.5  2.6  2.7  2.8  2.9  2.10",
            "title": "Review Questions"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.00-Introduction/",
            "text": "Plotting with Matplotlib\n\n\nIntroduction\n\n\nBy the end of this chapter you will be able to:\n\n\n\n\n\n\nImport matplotlib into a Python script or jupyter notebook\n\n\n\n\n\n\nConstruct line plots\n\n\n\n\n\n\nAdd axis labels, titles and legends to plots\n\n\n\n\n\n\nConstruct bar charts\n\n\n\n\n\n\nAdd error bars to bar charts\n\n\n\n\n\n\nPlot histograms",
            "title": "Introduction"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.00-Introduction/#plotting-with-matplotlib",
            "text": "",
            "title": "Plotting with Matplotlib"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.00-Introduction/#introduction",
            "text": "By the end of this chapter you will be able to:    Import matplotlib into a Python script or jupyter notebook    Construct line plots    Add axis labels, titles and legends to plots    Construct bar charts    Add error bars to bar charts    Plot histograms",
            "title": "Introduction"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.01-What-is-Matplotlib/",
            "text": "What is Matplotlib?\n\n\nMatplotlib is a popular Python package used to plot data. Matplotlib started as a project in the early 2000's partly to to use Python to visualize the electonic signals in the brain of epilepsy patients. Matplotlib's creator, John D. Hunter was a neurobilogist. He was looking for way to replicate MATLAB's plotting capability with Python. In addition to starting matplotlib, Dr. Hunter was part of the founding group that created Numfocus. The Numfocus group oversees some major Python projects including matplotlib, numpy, pandas and jupyter.\n\n\nWhy use Matplotlib?\n\n\nMatplotlib is useful for creating static 2D plot, the kind included in scientific publications and presentations. Almost any plot created in Micrsoft Excel can be created with matplotlib.",
            "title": "What is Matplotlib?"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.01-What-is-Matplotlib/#what-is-matplotlib",
            "text": "Matplotlib is a popular Python package used to plot data. Matplotlib started as a project in the early 2000's partly to to use Python to visualize the electonic signals in the brain of epilepsy patients. Matplotlib's creator, John D. Hunter was a neurobilogist. He was looking for way to replicate MATLAB's plotting capability with Python. In addition to starting matplotlib, Dr. Hunter was part of the founding group that created Numfocus. The Numfocus group oversees some major Python projects including matplotlib, numpy, pandas and jupyter.",
            "title": "What is Matplotlib?"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.01-What-is-Matplotlib/#why-use-matplotlib",
            "text": "Matplotlib is useful for creating static 2D plot, the kind included in scientific publications and presentations. Almost any plot created in Micrsoft Excel can be created with matplotlib.",
            "title": "Why use Matplotlib?"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.02-Installing Matplotlib/",
            "text": "Installing Matplotlib\n\n\nInstalling Matplotlib with the Anaconda Prompt\n\n\nTo install matplotlib, open the Anaconda Prompt and type:\n\n\n$ conda install matplotlib\n\n\n\n\nType \ny\n for yes when prompted.\n\n\nInstalling Matplotlib with pip\n\n\nTo install \nmatplotlib\n with pip, bring up a terminal window and type:\n\n\n$ pip install matplotlib\n\n\n\n\nThis will install \nmatplotlib\n in the current working python environment",
            "title": "Installing Matplotlib"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.02-Installing Matplotlib/#installing-matplotlib",
            "text": "",
            "title": "Installing Matplotlib"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.02-Installing Matplotlib/#installing-matplotlib-with-the-anaconda-prompt",
            "text": "To install matplotlib, open the Anaconda Prompt and type:  $ conda install matplotlib  Type  y  for yes when prompted.",
            "title": "Installing Matplotlib with the Anaconda Prompt"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.02-Installing Matplotlib/#installing-matplotlib-with-pip",
            "text": "To install  matplotlib  with pip, bring up a terminal window and type:  $ pip install matplotlib  This will install  matplotlib  in the current working python environment",
            "title": "Installing Matplotlib with pip"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.04-Line-Plots/",
            "text": "Line Plots\n\n\nLine plots in matplotlib can be created using matplotlib's pyplot library\nFirst import matplotlib. If using a jupyter notebook include the line \n%matplotlib inline\n\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nx\n \n=\n \nnp\n.\narange\n(\n0\n,\n4\n*\nnp\n.\npi\n,\n0.1\n)\n\n\ny\n \n=\n \nnp\n.\nsin\n(\nx\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nplt\n.\nplot\n(\nx\n,\ny\n)\n\n\nplt\n.\nshow\n()",
            "title": "Line Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.04-Line-Plots/#line-plots",
            "text": "Line plots in matplotlib can be created using matplotlib's pyplot library\nFirst import matplotlib. If using a jupyter notebook include the line  %matplotlib inline    In\u00a0[1]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  % matplotlib  inline        In\u00a0[4]:  \n      x   =   np . arange ( 0 , 4 * np . pi , 0.1 )  y   =   np . sin ( x )         In\u00a0[6]:  \n      plt . plot ( x , y )  plt . show ()",
            "title": "Line Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.05-Multi-Line-Plots/",
            "text": "Multi Line Plots\n\n\nMulti-line plots in \nmatplotlib\n can be created using \nmatplotlib's pyplot\n library. In this section we will build upon the work in the previous section where a plot with one line was created. We will also introduce \nmatplotlib\n object oriented approach to building a plot.\n\n\nmatplotlib\n object-oriented interface.\n\n\nAn object-oriented plotting interface is an interface where components of the plot (like the axis, title, line color, etc) are treated as programmatic \nobjects\n that have \nattributes\n and \nmethods\n associated with them. To create a new \nobject\n is called \ninstantiation\n. Once an object is created, or instantiated, the properties of that object can be modified and methods can be called on the object. The basic annatomy of a \nmatplotlib\n plot includes a couple of layers:\n\n\n\n\nFigure: The bottom layer. Think of the figure layer as the figure window which contains the minimize, maximize, close buttons.\n\n\nPlot: A Plot builds on the Figure layer. A Figure can have multiple Plots. These are called subplots.\n\n\nAxis: An axis is added to a plot. Axis can be thought of as sets of x and y axis that lines and bars are drawn on. An Axis contains daughter attributes like axis labels, tick labels and line thickness.\n\n\nData: data points, lines, shapes are plotted on an axis\n\n\n\n\nTo build a figure, we use matplotlib's \nplt.subplot()\n command. This will create both a figure object and an axis object. For now, we we'll leave the \nsubplot()\n arguments blank. By defaut the \nsubplot()\n function will create a single figure object and a single axis object.  We'll call the figure object \nfig\n and the axis object we'll call \nax\n. Note these two outputs of the \nplt.subplots()\n function are separated by a comma. \n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nprint\n(\ntype\n(\nfig\n))\n\n\nprint\n(\ntype\n(\nax\n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<class 'matplotlib.figure.Figure'>\n<class 'matplotlib.axes._subplots.AxesSubplot'>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow that we have a figure and axis objects \nfig\n and \nax\n, we can add elements to each object. Let's create three \nnumpy\n arrays to add to our axis object.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nx\n \n=\n \nnp\n.\narange\n(\n0\n,\n4\n*\nnp\n.\npi\n,\n0.1\n)\n\n\ny\n \n=\n \nnp\n.\nsin\n(\nx\n)\n\n\nz\n \n=\n \nnp\n.\ncos\n(\nx\n)\n\n\n\n\n\n\n\n\n\n\n\nThe \nnumpy\n arrays \nx\n, \ny\n, and \nz\n can be added to our axis object \nax\n\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nplot\n(\nx\n,\ny\n)\n\n\nax\n.\nplot\n(\nx\n,\nz\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe \nax\n object has many methods and daughter attributes. Two methods we can run on the \nax\n object include \nax.set_title()\n and \nax.legend()\n. A couple daughter attributes include \nax.xaxis\n and \nax.yaxis\n. These daughter attributes in turn have methods such as \nax.xaxis.set_label_text()\n and \nax.yaxis.set_label_text()\n.\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nplot\n(\nx\n,\ny\n)\n\n\nax\n.\nplot\n(\nx\n,\nz\n)\n\n\nax\n.\nset_title\n(\n'Two Trig Functions'\n)\n\n\nax\n.\nlegend\n([\n'sin'\n,\n'cos'\n])\n\n\nax\n.\nxaxis\n.\nset_label_text\n(\n'Angle \n\\Theta\n\\Theta\n'\n)\n\n\nax\n.\nyaxis\n.\nset_label_text\n(\n'Sine and Cosine'\n)\n\n\nplt\n.\nshow\n()",
            "title": "Multi Line Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.05-Multi-Line-Plots/#multi-line-plots",
            "text": "Multi-line plots in  matplotlib  can be created using  matplotlib's pyplot  library. In this section we will build upon the work in the previous section where a plot with one line was created. We will also introduce  matplotlib  object oriented approach to building a plot.",
            "title": "Multi Line Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.05-Multi-Line-Plots/#matplotlib-object-oriented-interface",
            "text": "An object-oriented plotting interface is an interface where components of the plot (like the axis, title, line color, etc) are treated as programmatic  objects  that have  attributes  and  methods  associated with them. To create a new  object  is called  instantiation . Once an object is created, or instantiated, the properties of that object can be modified and methods can be called on the object. The basic annatomy of a  matplotlib  plot includes a couple of layers:   Figure: The bottom layer. Think of the figure layer as the figure window which contains the minimize, maximize, close buttons.  Plot: A Plot builds on the Figure layer. A Figure can have multiple Plots. These are called subplots.  Axis: An axis is added to a plot. Axis can be thought of as sets of x and y axis that lines and bars are drawn on. An Axis contains daughter attributes like axis labels, tick labels and line thickness.  Data: data points, lines, shapes are plotted on an axis   To build a figure, we use matplotlib's  plt.subplot()  command. This will create both a figure object and an axis object. For now, we we'll leave the  subplot()  arguments blank. By defaut the  subplot()  function will create a single figure object and a single axis object.  We'll call the figure object  fig  and the axis object we'll call  ax . Note these two outputs of the  plt.subplots()  function are separated by a comma.    In\u00a0[1]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  % matplotlib  inline        In\u00a0[2]:  \n      fig ,   ax   =   plt . subplots ()  print ( type ( fig ))  print ( type ( ax ))           <class 'matplotlib.figure.Figure'>\n<class 'matplotlib.axes._subplots.AxesSubplot'>            \nNow that we have a figure and axis objects  fig  and  ax , we can add elements to each object. Let's create three  numpy  arrays to add to our axis object.   In\u00a0[2]:  \n      x   =   np . arange ( 0 , 4 * np . pi , 0.1 )  y   =   np . sin ( x )  z   =   np . cos ( x )      \nThe  numpy  arrays  x ,  y , and  z  can be added to our axis object  ax    In\u00a0[4]:  \n      fig ,   ax   =   plt . subplots ()  ax . plot ( x , y )  ax . plot ( x , z )  plt . show ()                \nThe  ax  object has many methods and daughter attributes. Two methods we can run on the  ax  object include  ax.set_title()  and  ax.legend() . A couple daughter attributes include  ax.xaxis  and  ax.yaxis . These daughter attributes in turn have methods such as  ax.xaxis.set_label_text()  and  ax.yaxis.set_label_text() .   In\u00a0[5]:  \n      fig ,   ax   =   plt . subplots ()  ax . plot ( x , y )  ax . plot ( x , z )  ax . set_title ( 'Two Trig Functions' )  ax . legend ([ 'sin' , 'cos' ])  ax . xaxis . set_label_text ( 'Angle  \\Theta \\Theta ' )  ax . yaxis . set_label_text ( 'Sine and Cosine' )  plt . show ()",
            "title": "matplotlib object-oriented interface."
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.06-Bar-Charts-and-Pie-Charts/",
            "text": "Bar Plots\n\n\nBar plots in \nmatplotlib\n can be created using \nmatplotlib's\n \npyplot\n library\nTo contstruct a bar plot using \nmatplotlib\n, first import matplotlib. If using a jupyter notebook include the line \n%matplotlib inline\n\n\n\n\n\n\nIn\u00a0[10]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\n\n\nBar Charts\n\n\nTo create a bar chart, we need some data. In this case the data is from a set of \ncoefficient of thermal expansion\n lab measurements. The \ncoefficient of thermal expansion\n (CTE) is a material property that describes how much a material with change in length as a result of a change in temperature. Different materials have different CTE's and we can use the data to determine which material will expand the most if all three are heated up to the same temperature (assuming all three start at the same temperature).\n\n\nFirst we need to input the data as \nnumpy\n arrays:\n\n\n\n\n\nIn\u00a0[11]:\n\n\n\n    \n\n\n# Data\n\n\naluminum\n \n=\n \nnp\n.\narray\n([\n6.4e-5\n \n,\n \n3.01e-5\n \n,\n \n2.36e-5\n,\n \n3.0e-5\n,\n \n7.0e-5\n,\n \n4.5e-5\n,\n \n3.8e-5\n,\n \n4.2e-5\n,\n \n2.62e-5\n,\n \n3.6e-5\n])\n\n\ncopper\n \n=\n \nnp\n.\narray\n([\n4.5e-5\n \n,\n \n1.97e-5\n \n,\n \n1.6e-5\n,\n \n1.97e-5\n,\n \n4.0e-5\n,\n \n2.4e-5\n,\n \n1.9e-5\n,\n \n2.41e-5\n \n,\n \n1.85e-5\n,\n \n3.3e-5\n \n])\n\n\nsteel\n \n=\n \nnp\n.\narray\n([\n3.3e-5\n \n,\n \n1.2e-5\n \n,\n \n0.9e-5\n,\n \n1.2e-5\n,\n \n1.3e-5\n,\n \n1.6e-5\n,\n \n1.4e-5\n,\n \n1.58e-5\n,\n \n1.32e-5\n \n,\n \n2.1e-5\n])\n\n\n\n\n\n\n\n\n\n\n\nNext we will calculate the average or \nmean\n using \nnumpy's\n \nnp.mean()\n function.\n\n\n\n\n\nIn\u00a0[12]:\n\n\n\n    \n\n\n# Calculate the average\n\n\naluminum_mean\n \n=\n \nnp\n.\nmean\n(\naluminum\n)\n\n\ncopper_mean\n \n=\n \nnp\n.\nmean\n(\ncopper\n)\n\n\nsteel_mean\n \n=\n \nnp\n.\nmean\n(\nsteel\n)\n\n\n\n\n\n\n\n\n\n\n\nThen we will build a list of materials and CTE's\n\n\n\n\n\nIn\u00a0[13]:\n\n\n\n    \n\n\n# Create Arrays for the plot\n\n\nmaterials\n \n=\n \n[\n'Aluminum'\n,\n \n'Copper'\n,\n \n'Steel'\n]\n\n\nx_pos\n \n=\n \nnp\n.\narange\n(\nlen\n(\nmaterials\n))\n\n\nCTEs\n \n=\n \n[\naluminum_mean\n,\n \ncopper_mean\n,\n \nsteel_mean\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[14]:\n\n\n\n    \n\n\n# Build the plot\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nbar\n(\nx_pos\n,\n \nCTEs\n,\n \nalign\n=\n'center'\n,\n \nalpha\n=\n0.5\n)\n\n\nax\n.\nset_ylabel\n(\n'Coefficient of Thermal Expansion (\n\\degree C^{-1}\n\\degree C^{-1}\n)'\n)\n\n\nax\n.\nset_xticks\n(\nx_pos\n)\n\n\nax\n.\nset_xticklabels\n(\nmaterials\n)\n\n\nax\n.\nset_title\n(\n'Coefficent of Thermal Expansion (CTE) of Three Metals'\n)\n\n\nax\n.\nyaxis\n.\ngrid\n(\nTrue\n)\n\n\n# Save the figure and show\n\n\nplt\n.\ntight_layout\n()\n\n\nplt\n.\nsavefig\n(\n'bar_plot.png'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPie Charts\n\n\n\n\n\n\nIn\u00a0[15]:\n\n\n\n    \n\n\nx\n \n=\n \nnp\n.\narray\n([\n0.38\n,\n \n0.19\n,\n \n1\n-\n0.38\n-\n0.19\n])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[16]:\n\n\n\n    \n\n\n# Pie chart, where the slices will be ordered and plotted counter-clockwise:\n\n\nlabels\n \n=\n \n[\n'Civil'\n,\n \n'Electrical'\n,\n \n'Mechanical'\n,\n \n'Chemical'\n]\n\n\nsizes\n \n=\n \n[\n15\n,\n \n50\n,\n \n45\n,\n \n10\n]\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\npie\n(\nsizes\n,\n \nlabels\n=\nlabels\n,\n \nautopct\n=\n'\n%1.1f%%\n'\n)\n\n\nax\n.\naxis\n(\n'equal'\n)\n  \n# Equal aspect ratio ensures that pie is drawn as a circle.\n\n\nax\n.\nset_title\n(\n'Engineering Diciplines'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[17]:\n\n\n\n    \n\n\n# Pie chart, where the slices will be ordered and plotted counter-clockwise\n\n\nlabels\n \n=\n \n[\n'Civil'\n,\n \n'Electrical'\n,\n \n'Mechanical'\n,\n \n'Chemical'\n]\n\n\nsizes\n \n=\n \n[\n15\n,\n \n30\n,\n \n45\n,\n \n10\n]\n\n\nexplode\n \n=\n \n(\n0.1\n,\n \n0.1\n,\n \n0.1\n,\n \n0.4\n)\n  \n# \"explode, and highlight 4th entry 'Logs' by offsetting it a greater amount\"\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\npie\n(\nsizes\n,\n \nexplode\n=\nexplode\n,\n \nlabels\n=\nlabels\n,\n \nautopct\n=\n'\n%1.1f%%\n'\n,\n \nshadow\n=\nTrue\n,\n \nstartangle\n=\n90\n)\n\n\nax\n.\naxis\n(\n'equal'\n)\n  \n# Equal aspect ratio ensures that pie is drawn as a circle.\n\n\nplt\n.\nshow\n()",
            "title": "Bar Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.06-Bar-Charts-and-Pie-Charts/#bar-plots",
            "text": "Bar plots in  matplotlib  can be created using  matplotlib's   pyplot  library\nTo contstruct a bar plot using  matplotlib , first import matplotlib. If using a jupyter notebook include the line  %matplotlib inline    In\u00a0[10]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  % matplotlib  inline",
            "title": "Bar Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.06-Bar-Charts-and-Pie-Charts/#bar-charts",
            "text": "To create a bar chart, we need some data. In this case the data is from a set of  coefficient of thermal expansion  lab measurements. The  coefficient of thermal expansion  (CTE) is a material property that describes how much a material with change in length as a result of a change in temperature. Different materials have different CTE's and we can use the data to determine which material will expand the most if all three are heated up to the same temperature (assuming all three start at the same temperature).  First we need to input the data as  numpy  arrays:   In\u00a0[11]:  \n      # Data  aluminum   =   np . array ([ 6.4e-5   ,   3.01e-5   ,   2.36e-5 ,   3.0e-5 ,   7.0e-5 ,   4.5e-5 ,   3.8e-5 ,   4.2e-5 ,   2.62e-5 ,   3.6e-5 ])  copper   =   np . array ([ 4.5e-5   ,   1.97e-5   ,   1.6e-5 ,   1.97e-5 ,   4.0e-5 ,   2.4e-5 ,   1.9e-5 ,   2.41e-5   ,   1.85e-5 ,   3.3e-5   ])  steel   =   np . array ([ 3.3e-5   ,   1.2e-5   ,   0.9e-5 ,   1.2e-5 ,   1.3e-5 ,   1.6e-5 ,   1.4e-5 ,   1.58e-5 ,   1.32e-5   ,   2.1e-5 ])      \nNext we will calculate the average or  mean  using  numpy's   np.mean()  function.   In\u00a0[12]:  \n      # Calculate the average  aluminum_mean   =   np . mean ( aluminum )  copper_mean   =   np . mean ( copper )  steel_mean   =   np . mean ( steel )      \nThen we will build a list of materials and CTE's   In\u00a0[13]:  \n      # Create Arrays for the plot  materials   =   [ 'Aluminum' ,   'Copper' ,   'Steel' ]  x_pos   =   np . arange ( len ( materials ))  CTEs   =   [ aluminum_mean ,   copper_mean ,   steel_mean ]         In\u00a0[14]:  \n      # Build the plot  fig ,   ax   =   plt . subplots ()  ax . bar ( x_pos ,   CTEs ,   align = 'center' ,   alpha = 0.5 )  ax . set_ylabel ( 'Coefficient of Thermal Expansion ( \\degree C^{-1} \\degree C^{-1} )' )  ax . set_xticks ( x_pos )  ax . set_xticklabels ( materials )  ax . set_title ( 'Coefficent of Thermal Expansion (CTE) of Three Metals' )  ax . yaxis . grid ( True )  # Save the figure and show  plt . tight_layout ()  plt . savefig ( 'bar_plot.png' )  plt . show ()",
            "title": "Bar Charts"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.06-Bar-Charts-and-Pie-Charts/#pie-charts",
            "text": "In\u00a0[15]:  \n      x   =   np . array ([ 0.38 ,   0.19 ,   1 - 0.38 - 0.19 ])         In\u00a0[16]:  \n      # Pie chart, where the slices will be ordered and plotted counter-clockwise:  labels   =   [ 'Civil' ,   'Electrical' ,   'Mechanical' ,   'Chemical' ]  sizes   =   [ 15 ,   50 ,   45 ,   10 ]  fig ,   ax   =   plt . subplots ()  ax . pie ( sizes ,   labels = labels ,   autopct = ' %1.1f%% ' )  ax . axis ( 'equal' )    # Equal aspect ratio ensures that pie is drawn as a circle.  ax . set_title ( 'Engineering Diciplines' )  plt . show ()                   In\u00a0[17]:  \n      # Pie chart, where the slices will be ordered and plotted counter-clockwise  labels   =   [ 'Civil' ,   'Electrical' ,   'Mechanical' ,   'Chemical' ]  sizes   =   [ 15 ,   30 ,   45 ,   10 ]  explode   =   ( 0.1 ,   0.1 ,   0.1 ,   0.4 )    # \"explode, and highlight 4th entry 'Logs' by offsetting it a greater amount\"  fig ,   ax   =   plt . subplots ()  ax . pie ( sizes ,   explode = explode ,   labels = labels ,   autopct = ' %1.1f%% ' ,   shadow = True ,   startangle = 90 )  ax . axis ( 'equal' )    # Equal aspect ratio ensures that pie is drawn as a circle.  plt . show ()",
            "title": "Pie Charts"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.07-Error-Bars/",
            "text": "Error Bars\n\n\nError bars can be created with \nmatplotlib\n and applied to both line plots and bar plots.\nTo construct a bar plot with error bars, first import \nmatplotlib\n. If using a jupyter notebook, include the line \n%matplotlib inline\n\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\n# Data\n\n\naluminum\n \n=\n \nnp\n.\narray\n([\n6.4e-5\n \n,\n \n3.01e-5\n \n,\n \n2.36e-5\n,\n \n3.0e-5\n,\n \n7.0e-5\n,\n \n4.5e-5\n,\n \n3.8e-5\n,\n \n4.2e-5\n,\n \n2.62e-5\n,\n \n3.6e-5\n])\n\n\ncopper\n \n=\n \nnp\n.\narray\n([\n4.5e-5\n \n,\n \n1.97e-5\n \n,\n \n1.6e-5\n,\n \n1.97e-5\n,\n \n4.0e-5\n,\n \n2.4e-5\n,\n \n1.9e-5\n,\n \n2.41e-5\n \n,\n \n1.85e-5\n,\n \n3.3e-5\n \n])\n\n\nsteel\n \n=\n \nnp\n.\narray\n([\n3.3e-5\n \n,\n \n1.2e-5\n \n,\n \n0.9e-5\n,\n \n1.2e-5\n,\n \n1.3e-5\n,\n \n1.6e-5\n,\n \n1.4e-5\n,\n \n1.58e-5\n,\n \n1.32e-5\n \n,\n \n2.1e-5\n])\n\n\n# Calculate the average\n\n\naluminum_mean\n \n=\n \nnp\n.\nmean\n(\naluminum\n)\n\n\ncopper_mean\n \n=\n \nnp\n.\nmean\n(\ncopper\n)\n\n\nsteel_mean\n \n=\n \nnp\n.\nmean\n(\nsteel\n)\n\n\n# Calculate the standard deviation\n\n\naluminum_std\n \n=\n \nnp\n.\nstd\n(\naluminum\n)\n\n\ncopper_std\n \n=\n \nnp\n.\nstd\n(\ncopper\n)\n\n\nsteel_std\n \n=\n \nnp\n.\nstd\n(\nsteel\n)\n\n\n# Create Arrays for the plot\n\n\nmaterials\n \n=\n \n[\n'Aluminum'\n,\n \n'Copper'\n,\n \n'Steel'\n]\n\n\nx_pos\n \n=\n \nnp\n.\narange\n(\nlen\n(\nmaterials\n))\n\n\nCTEs\n \n=\n \n[\naluminum_mean\n,\n \ncopper_mean\n,\n \nsteel_mean\n]\n\n\nerror\n \n=\n \n[\naluminum_std\n,\n \ncopper_std\n,\n \nsteel_std\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[8]:\n\n\n\n    \n\n\n# Build the plot\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nbar\n(\nx_pos\n,\n \nCTEs\n,\n \nyerr\n=\nerror\n,\n \nalign\n=\n'center'\n,\n \nalpha\n=\n0.5\n,\n \necolor\n=\n'black'\n,\n \ncapsize\n=\n10\n)\n\n\nax\n.\nset_ylabel\n(\n'Coefficient of Thermal Expansion (\n\\degree C^{-1}\n\\degree C^{-1}\n)'\n)\n\n\nax\n.\nset_xticks\n(\nx_pos\n)\n\n\nax\n.\nset_xticklabels\n(\nmaterials\n)\n\n\nax\n.\nset_title\n(\n'Coefficent of Thermal Expansion (CTE) of Three Metals'\n)\n\n\nax\n.\nyaxis\n.\ngrid\n(\nTrue\n)\n\n\n# Save the figure and show\n\n\nplt\n.\ntight_layout\n()\n\n\nplt\n.\nsavefig\n(\n'bar_plot_with_error_bars.png'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nError bars in line plots\n\n\nError bars can also be added to line plots.\n\n\n\n\n\nIn\u00a0[9]:\n\n\n\n    \n\n\nx\n \n=\n \nnp\n.\narray\n([\n0.5\n,\n \n1.0\n,\n \n1.5\n,\n \n2.0\n,\n \n2.5\n,\n \n3.0\n,\n \n3.5\n,\n \n4.0\n,\n \n4.5\n,\n \n5.0\n])\n\n\ny\n \n=\n \n10\n*\nnp\n.\nexp\n(\n-\nx\n)\n\n\nxerr\n \n=\n \nnp\n.\nrandom\n.\nrandom_sample\n((\n10\n))\n\n\nyerr\n \n=\n \nnp\n.\nrandom\n.\nrandom_sample\n((\n10\n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[12]:\n\n\n\n    \n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nerrorbar\n(\nx\n,\n \ny\n,\n \nxerr\n=\nxerr\n,\n \nyerr\n=\nyerr\n,\n \nfmt\n=\n'-o'\n)\n\n\nax\n.\nset_xlabel\n(\n'x-axis'\n)\n\n\nax\n.\nset_ylabel\n(\n'y-axis'\n)\n\n\nax\n.\nset_title\n(\n'Line plot with error bars'\n)\n\n\nplt\n.\nshow\n()",
            "title": "Error Bars"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.07-Error-Bars/#error-bars",
            "text": "Error bars can be created with  matplotlib  and applied to both line plots and bar plots.\nTo construct a bar plot with error bars, first import  matplotlib . If using a jupyter notebook, include the line  %matplotlib inline    In\u00a0[6]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  % matplotlib  inline        In\u00a0[7]:  \n      # Data  aluminum   =   np . array ([ 6.4e-5   ,   3.01e-5   ,   2.36e-5 ,   3.0e-5 ,   7.0e-5 ,   4.5e-5 ,   3.8e-5 ,   4.2e-5 ,   2.62e-5 ,   3.6e-5 ])  copper   =   np . array ([ 4.5e-5   ,   1.97e-5   ,   1.6e-5 ,   1.97e-5 ,   4.0e-5 ,   2.4e-5 ,   1.9e-5 ,   2.41e-5   ,   1.85e-5 ,   3.3e-5   ])  steel   =   np . array ([ 3.3e-5   ,   1.2e-5   ,   0.9e-5 ,   1.2e-5 ,   1.3e-5 ,   1.6e-5 ,   1.4e-5 ,   1.58e-5 ,   1.32e-5   ,   2.1e-5 ])  # Calculate the average  aluminum_mean   =   np . mean ( aluminum )  copper_mean   =   np . mean ( copper )  steel_mean   =   np . mean ( steel )  # Calculate the standard deviation  aluminum_std   =   np . std ( aluminum )  copper_std   =   np . std ( copper )  steel_std   =   np . std ( steel )  # Create Arrays for the plot  materials   =   [ 'Aluminum' ,   'Copper' ,   'Steel' ]  x_pos   =   np . arange ( len ( materials ))  CTEs   =   [ aluminum_mean ,   copper_mean ,   steel_mean ]  error   =   [ aluminum_std ,   copper_std ,   steel_std ]         In\u00a0[8]:  \n      # Build the plot  fig ,   ax   =   plt . subplots ()  ax . bar ( x_pos ,   CTEs ,   yerr = error ,   align = 'center' ,   alpha = 0.5 ,   ecolor = 'black' ,   capsize = 10 )  ax . set_ylabel ( 'Coefficient of Thermal Expansion ( \\degree C^{-1} \\degree C^{-1} )' )  ax . set_xticks ( x_pos )  ax . set_xticklabels ( materials )  ax . set_title ( 'Coefficent of Thermal Expansion (CTE) of Three Metals' )  ax . yaxis . grid ( True )  # Save the figure and show  plt . tight_layout ()  plt . savefig ( 'bar_plot_with_error_bars.png' )  plt . show ()",
            "title": "Error Bars"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.07-Error-Bars/#error-bars-in-line-plots",
            "text": "Error bars can also be added to line plots.   In\u00a0[9]:  \n      x   =   np . array ([ 0.5 ,   1.0 ,   1.5 ,   2.0 ,   2.5 ,   3.0 ,   3.5 ,   4.0 ,   4.5 ,   5.0 ])  y   =   10 * np . exp ( - x )  xerr   =   np . random . random_sample (( 10 ))  yerr   =   np . random . random_sample (( 10 ))         In\u00a0[12]:  \n      fig ,   ax   =   plt . subplots ()  ax . errorbar ( x ,   y ,   xerr = xerr ,   yerr = yerr ,   fmt = '-o' )  ax . set_xlabel ( 'x-axis' )  ax . set_ylabel ( 'y-axis' )  ax . set_title ( 'Line plot with error bars' )  plt . show ()",
            "title": "Error bars in line plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.08-Histograms/",
            "text": "Histograms\n\n\nHistorgram plots can be created with \nmatplotlib\n\nFirst import matplotlib. If using a jupyter notebook include the line \n%matplotlib inline\n\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nmu\n \n=\n \n80\n\n\nsigma\n \n=\n \n7\n\n\nx\n \n=\n \nnp\n.\nrandom\n.\nnormal\n(\nmu\n,\n \nsigma\n,\n \nsize\n=\n200\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nhist\n(\nx\n,\n \n20\n,\n \ndensity\n=\nTrue\n,\n \nhisttype\n=\n'bar'\n,\n \nfacecolor\n=\n'g'\n,\n \nalpha\n=\n0.8\n)\n\n\nax\n.\nset_title\n(\n'Historgram'\n)\n\n\nax\n.\nset_xlabel\n(\n'x-axis'\n)\n\n\nax\n.\nset_ylabel\n(\n'y-axis'\n)\n\n\nfig\n.\ntight_layout\n()\n\n\nplt\n.\nshow\n()",
            "title": "Histograms"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.08-Histograms/#histograms",
            "text": "Historgram plots can be created with  matplotlib \nFirst import matplotlib. If using a jupyter notebook include the line  %matplotlib inline    In\u00a0[1]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  % matplotlib  inline        In\u00a0[6]:  \n      import   numpy   as   np  import   matplotlib.pyplot   as   plt  mu   =   80  sigma   =   7  x   =   np . random . normal ( mu ,   sigma ,   size = 200 )  fig ,   ax   =   plt . subplots ()  ax . hist ( x ,   20 ,   density = True ,   histtype = 'bar' ,   facecolor = 'g' ,   alpha = 0.8 )  ax . set_title ( 'Historgram' )  ax . set_xlabel ( 'x-axis' )  ax . set_ylabel ( 'y-axis' )  fig . tight_layout ()  plt . show ()",
            "title": "Histograms"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.09-Box-Plots-and-Violin-Plots/",
            "text": "Box Plots and Violin Plots\n\n\nA couple other useful types of statistical plots are box plots and violin plots\nFirst import matplotlib. If using a jupyter notebook include the line \n%matplotlib inline\n\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\n# generate some random data\n\n\ndata\n \n=\n \n[\nnp\n.\nrandom\n.\nnormal\n(\n0\n,\n \nstd\n,\n \n100\n)\n \nfor\n \nstd\n \nin\n \nrange\n(\n6\n,\n \n10\n)]\n\n\n# plot box plot\n\n\nax\n.\nboxplot\n(\ndata\n)\n\n\nax\n.\nset_title\n(\n'box plot'\n)\n\n\n# adding horizontal grid lines\n\n\nax\n.\nyaxis\n.\ngrid\n(\nTrue\n)\n\n\nax\n.\nset_xticks\n([\ny\n+\n1\n \nfor\n \ny\n \nin\n \nrange\n(\nlen\n(\ndata\n))])\n\n\nax\n.\nset_xlabel\n(\n'x-axis'\n)\n\n\nax\n.\nset_ylabel\n(\n'y-axis'\n)\n\n\n# add x-tick labels\n\n\nplt\n.\nsetp\n(\nax\n,\n \nxticks\n=\n[\ny\n+\n1\n \nfor\n \ny\n \nin\n \nrange\n(\nlen\n(\ndata\n))],\n\n         \nxticklabels\n=\n[\n'category 1'\n,\n \n'category 2'\n,\n \n'category 3'\n,\n \n'category 4'\n])\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[8]:\n\n\n\n    \n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\n# generate some random test data\n\n\nall_data\n \n=\n \n[\nnp\n.\nrandom\n.\nnormal\n(\n0\n,\n \nstd\n,\n \n100\n)\n \nfor\n \nstd\n \nin\n \nrange\n(\n6\n,\n \n10\n)]\n\n\n# plot violin plot\n\n\nax\n.\nviolinplot\n(\ndata\n,\n \nshowmeans\n=\nFalse\n,\n \nshowmedians\n=\nTrue\n)\n\n\nax\n.\nset_title\n(\n'violin plot'\n)\n\n\n# adding horizontal grid lines\n\n\nax\n.\nyaxis\n.\ngrid\n(\nTrue\n)\n\n\nax\n.\nset_xticks\n([\ny\n+\n1\n \nfor\n \ny\n \nin\n \nrange\n(\nlen\n(\ndata\n))])\n\n\nax\n.\nset_xlabel\n(\n'x-axis'\n)\n\n\nax\n.\nset_ylabel\n(\n'y-axis'\n)\n\n\n# add x-tick labels\n\n\nplt\n.\nsetp\n(\nax\n,\n \nxticks\n=\n[\ny\n+\n1\n \nfor\n \ny\n \nin\n \nrange\n(\nlen\n(\ndata\n))],\n\n         \nxticklabels\n=\n[\n'category 1'\n,\n \n'category 2'\n,\n \n'category 3'\n,\n \n'category 4'\n])\n\n\nplt\n.\nshow\n()",
            "title": "Box Plots and Violin Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.09-Box-Plots-and-Violin-Plots/#box-plots-and-violin-plots",
            "text": "A couple other useful types of statistical plots are box plots and violin plots\nFirst import matplotlib. If using a jupyter notebook include the line  %matplotlib inline    In\u00a0[1]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  % matplotlib  inline        In\u00a0[6]:  \n      fig ,   ax   =   plt . subplots ()  # generate some random data  data   =   [ np . random . normal ( 0 ,   std ,   100 )   for   std   in   range ( 6 ,   10 )]  # plot box plot  ax . boxplot ( data )  ax . set_title ( 'box plot' )  # adding horizontal grid lines  ax . yaxis . grid ( True )  ax . set_xticks ([ y + 1   for   y   in   range ( len ( data ))])  ax . set_xlabel ( 'x-axis' )  ax . set_ylabel ( 'y-axis' )  # add x-tick labels  plt . setp ( ax ,   xticks = [ y + 1   for   y   in   range ( len ( data ))], \n          xticklabels = [ 'category 1' ,   'category 2' ,   'category 3' ,   'category 4' ])  plt . show ()                   In\u00a0[8]:  \n      fig ,   ax   =   plt . subplots ()  # generate some random test data  all_data   =   [ np . random . normal ( 0 ,   std ,   100 )   for   std   in   range ( 6 ,   10 )]  # plot violin plot  ax . violinplot ( data ,   showmeans = False ,   showmedians = True )  ax . set_title ( 'violin plot' )  # adding horizontal grid lines  ax . yaxis . grid ( True )  ax . set_xticks ([ y + 1   for   y   in   range ( len ( data ))])  ax . set_xlabel ( 'x-axis' )  ax . set_ylabel ( 'y-axis' )  # add x-tick labels  plt . setp ( ax ,   xticks = [ y + 1   for   y   in   range ( len ( data ))], \n          xticklabels = [ 'category 1' ,   'category 2' ,   'category 3' ,   'category 4' ])  plt . show ()",
            "title": "Box Plots and Violin Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.10-Scatter-Plots/",
            "text": "Scatter Plots\n\n\nFirst import \nmatplotlib\n. If using a jupyter notebook include the line \n%matplotlib inline\n\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nN\n \n=\n \n100\n\n\nx1\n \n=\n \n1.5\n \n \nnp\n.\nrandom\n.\nrandn\n(\nN\n)\n \n+\n \n10\n\n\ny1\n \n=\n \n1.5\n \n \nnp\n.\nrandom\n.\nrandn\n(\nN\n)\n \n+\n \n10\n\n\nx2\n \n=\n \n1.5\n \n \nnp\n.\nrandom\n.\nrandn\n(\nN\n)\n \n+\n \n4\n\n\ny2\n \n=\n \n1.5\n \n \nnp\n.\nrandom\n.\nrandn\n(\nN\n)\n \n+\n \n4\n\n\nx\n \n=\n \nnp\n.\nappend\n(\nx1\n,\nx2\n)\n\n\ny\n \n=\n \nnp\n.\nappend\n(\ny1\n,\ny2\n)\n\n\ncolors\n \n=\n \nnp\n.\nrandom\n.\nrand\n(\nN\n2\n)\n\n\narea\n \n=\n \nnp\n.\npi\n \n \n(\n8\n \n \nnp\n.\nrandom\n.\nrand\n(\nN\n2\n))\n**\n2\n  \n# 0 to 15 point radii\n\n\nplt\n.\nscatter\n(\nx\n,\n \ny\n,\n \ns\n=\narea\n,\n \nc\n=\ncolors\n,\n \nalpha\n=\n0.5\n)\n\n\nplt\n.\nshow\n()",
            "title": "Scatter Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.10-Scatter-Plots/#scatter-plots",
            "text": "First import  matplotlib . If using a jupyter notebook include the line  %matplotlib inline    In\u00a0[1]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  % matplotlib  inline        In\u00a0[2]:  \n      N   =   100  x1   =   1.5     np . random . randn ( N )   +   10  y1   =   1.5     np . random . randn ( N )   +   10  x2   =   1.5     np . random . randn ( N )   +   4  y2   =   1.5     np . random . randn ( N )   +   4  x   =   np . append ( x1 , x2 )  y   =   np . append ( y1 , y2 )  colors   =   np . random . rand ( N 2 )  area   =   np . pi     ( 8     np . random . rand ( N 2 )) ** 2    # 0 to 15 point radii  plt . scatter ( x ,   y ,   s = area ,   c = colors ,   alpha = 0.5 )  plt . show ()",
            "title": "Scatter Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.11-Plot-Annotations/",
            "text": "Plot annotations\n\n\nSometimes it is useful for engineers to annotate plots. Text can be included on a plot to indicate a point of intrest. \nFirst import \nmatplotlib\n. If using a jupyter notebook include the line \n%matplotlib inline\n\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nt\n \n=\n \nnp\n.\narange\n(\n0.0\n,\n \n5.0\n,\n \n0.01\n)\n\n\ns\n \n=\n \nnp\n.\ncos\n(\n2\nnp\n.\npi\nt\n)\n\n\n# Plot a line and add some simple annotations\n\n\nline\n,\n \n=\n \nax\n.\nplot\n(\nt\n,\n \ns\n)\n\n\nax\n.\nannotate\n(\n'figure pixels'\n,\n\n            \nxy\n=\n(\n10\n,\n \n10\n),\n \nxycoords\n=\n'figure pixels'\n)\n\n\nax\n.\nannotate\n(\n'figure points'\n,\n\n            \nxy\n=\n(\n80\n,\n \n80\n),\n \nxycoords\n=\n'figure points'\n)\n\n\nax\n.\nannotate\n(\n'figure fraction'\n,\n\n            \nxy\n=\n(\n.\n025\n,\n \n.\n975\n),\n \nxycoords\n=\n'figure fraction'\n,\n\n            \nhorizontalalignment\n=\n'left'\n,\n \nverticalalignment\n=\n'top'\n,\n\n            \nfontsize\n=\n20\n)\n\n\n# The following examples show off how these arrows are drawn.\n\n\nax\n.\nannotate\n(\n'point offset from data'\n,\n\n            \nxy\n=\n(\n2\n,\n \n1\n),\n \nxycoords\n=\n'data'\n,\n\n            \nxytext\n=\n(\n-\n15\n,\n \n25\n),\n \ntextcoords\n=\n'offset points'\n,\n\n            \narrowprops\n=\ndict\n(\nfacecolor\n=\n'black'\n,\n \nshrink\n=\n0.05\n),\n\n            \nhorizontalalignment\n=\n'right'\n,\n \nverticalalignment\n=\n'bottom'\n)\n\n\nax\n.\nannotate\n(\n'axes fraction'\n,\n\n            \nxy\n=\n(\n3\n,\n \n1\n),\n \nxycoords\n=\n'data'\n,\n\n            \nxytext\n=\n(\n0.8\n,\n \n0.95\n),\n \ntextcoords\n=\n'axes fraction'\n,\n\n            \narrowprops\n=\ndict\n(\nfacecolor\n=\n'black'\n,\n \nshrink\n=\n0.05\n),\n\n            \nhorizontalalignment\n=\n'right'\n,\n \nverticalalignment\n=\n'top'\n)\n\n\n# You may also use negative points or pixels to specify from (right, top).\n\n\n# E.g., (-10, 10) is 10 points to the left of the right side of the axes and 10\n\n\n# points above the bottom\n\n\nax\n.\nannotate\n(\n'pixel offset from axes fraction'\n,\n\n            \nxy\n=\n(\n1\n,\n \n0\n),\n \nxycoords\n=\n'axes fraction'\n,\n\n            \nxytext\n=\n(\n-\n20\n,\n \n20\n),\n \ntextcoords\n=\n'offset pixels'\n,\n\n            \nhorizontalalignment\n=\n'right'\n,\n\n            \nverticalalignment\n=\n'bottom'\n)\n\n\nax\n.\nset\n(\nxlim\n=\n(\n-\n1\n,\n \n5\n),\n \nylim\n=\n(\n-\n3\n,\n \n5\n))\n\n\nplt\n.\nshow\n()",
            "title": "Plot annotations"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.11-Plot-Annotations/#plot-annotations",
            "text": "Sometimes it is useful for engineers to annotate plots. Text can be included on a plot to indicate a point of intrest. \nFirst import  matplotlib . If using a jupyter notebook include the line  %matplotlib inline    In\u00a0[1]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  % matplotlib  inline        In\u00a0[2]:  \n      fig ,   ax   =   plt . subplots ()  t   =   np . arange ( 0.0 ,   5.0 ,   0.01 )  s   =   np . cos ( 2 np . pi t )  # Plot a line and add some simple annotations  line ,   =   ax . plot ( t ,   s )  ax . annotate ( 'figure pixels' , \n             xy = ( 10 ,   10 ),   xycoords = 'figure pixels' )  ax . annotate ( 'figure points' , \n             xy = ( 80 ,   80 ),   xycoords = 'figure points' )  ax . annotate ( 'figure fraction' , \n             xy = ( . 025 ,   . 975 ),   xycoords = 'figure fraction' , \n             horizontalalignment = 'left' ,   verticalalignment = 'top' , \n             fontsize = 20 )  # The following examples show off how these arrows are drawn.  ax . annotate ( 'point offset from data' , \n             xy = ( 2 ,   1 ),   xycoords = 'data' , \n             xytext = ( - 15 ,   25 ),   textcoords = 'offset points' , \n             arrowprops = dict ( facecolor = 'black' ,   shrink = 0.05 ), \n             horizontalalignment = 'right' ,   verticalalignment = 'bottom' )  ax . annotate ( 'axes fraction' , \n             xy = ( 3 ,   1 ),   xycoords = 'data' , \n             xytext = ( 0.8 ,   0.95 ),   textcoords = 'axes fraction' , \n             arrowprops = dict ( facecolor = 'black' ,   shrink = 0.05 ), \n             horizontalalignment = 'right' ,   verticalalignment = 'top' )  # You may also use negative points or pixels to specify from (right, top).  # E.g., (-10, 10) is 10 points to the left of the right side of the axes and 10  # points above the bottom  ax . annotate ( 'pixel offset from axes fraction' , \n             xy = ( 1 ,   0 ),   xycoords = 'axes fraction' , \n             xytext = ( - 20 ,   20 ),   textcoords = 'offset pixels' , \n             horizontalalignment = 'right' , \n             verticalalignment = 'bottom' )  ax . set ( xlim = ( - 1 ,   5 ),   ylim = ( - 3 ,   5 ))  plt . show ()",
            "title": "Plot annotations"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.12-Subplots/",
            "text": "Subplots\n\n\nSometimes it is useful for engineers to include a couple plots side by side. This can be done in \nmatplotlib\n using \nsubplots\n\nFirst import matplotlib. If using a jupyter notebook include the line \n%matplotlib inline\n\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\n# Data for plotting\n\n\nt\n \n=\n \nnp\n.\narange\n(\n0.01\n,\n \n20.0\n,\n \n0.01\n)\n\n\n# Create figure\n\n\nfig\n,\n \n((\nax1\n,\n \nax2\n),\n \n(\nax3\n,\n \nax4\n))\n \n=\n \nplt\n.\nsubplots\n(\n2\n,\n \n2\n)\n\n\n# linear x and y axis\n\n\nax1\n.\nplot\n(\nt\n,\n \nnp\n.\nexp\n(\n-\nt\n \n/\n \n5.0\n))\n\n\nax1\n.\nset\n(\ntitle\n=\n'linear x and y'\n)\n\n\nax1\n.\ngrid\n()\n\n\n# log y axis\n\n\nax2\n.\nsemilogy\n(\nt\n,\n \nnp\n.\nexp\n(\n-\nt\n \n/\n \n5.0\n))\n\n\nax2\n.\nset\n(\ntitle\n=\n'semilogy'\n)\n\n\nax2\n.\ngrid\n()\n\n\n# log x axis\n\n\nax3\n.\nsemilogx\n(\nt\n,\n \nnp\n.\nsin\n(\n2\n \n \nnp\n.\npi\n \n \nt\n))\n\n\nax3\n.\nset\n(\ntitle\n=\n'semilogx'\n)\n\n\nax3\n.\ngrid\n()\n\n\n# log x and y axis\n\n\nax4\n.\nloglog\n(\nt\n,\n \n20\n \n*\n \nnp\n.\nexp\n(\n-\nt\n \n/\n \n10.0\n),\n \nbasex\n=\n2\n)\n\n\nax4\n.\nset\n(\ntitle\n=\n'loglog base 2 on x'\n)\n\n\nax4\n.\ngrid\n()\n\n\nfig\n.\ntight_layout\n()\n\n\nplt\n.\nshow\n()",
            "title": "Subplots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.12-Subplots/#subplots",
            "text": "Sometimes it is useful for engineers to include a couple plots side by side. This can be done in  matplotlib  using  subplots \nFirst import matplotlib. If using a jupyter notebook include the line  %matplotlib inline    In\u00a0[1]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  % matplotlib  inline        In\u00a0[4]:  \n      # Data for plotting  t   =   np . arange ( 0.01 ,   20.0 ,   0.01 )  # Create figure  fig ,   (( ax1 ,   ax2 ),   ( ax3 ,   ax4 ))   =   plt . subplots ( 2 ,   2 )  # linear x and y axis  ax1 . plot ( t ,   np . exp ( - t   /   5.0 ))  ax1 . set ( title = 'linear x and y' )  ax1 . grid ()  # log y axis  ax2 . semilogy ( t ,   np . exp ( - t   /   5.0 ))  ax2 . set ( title = 'semilogy' )  ax2 . grid ()  # log x axis  ax3 . semilogx ( t ,   np . sin ( 2     np . pi     t ))  ax3 . set ( title = 'semilogx' )  ax3 . grid ()  # log x and y axis  ax4 . loglog ( t ,   20   *   np . exp ( - t   /   10.0 ),   basex = 2 )  ax4 . set ( title = 'loglog base 2 on x' )  ax4 . grid ()  fig . tight_layout ()  plt . show ()",
            "title": "Subplots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.13-Plot-Styles/",
            "text": "Plot Styles\n\n\nSometimes it is useful for engineers to include a couple plots side by side. This can be done in \nmatplotlib\n using \nsubplots\n\nFirst import matplotlib. If using a jupyter notebook include the line \n%matplotlib inline\n\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[11]:\n\n\n\n    \n\n\nplt\n.\nstyle\n.\nuse\n(\n'default'\n)\n\n\nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n \n10\n)\n\n\n# Fixing random state for reproducibility\n\n\nnp\n.\nrandom\n.\nseed\n(\n19680801\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \n0.5\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \n2\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n-\n \n0.5\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n-\n \n2\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nset_title\n(\n\"'default' style sheet\"\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[14]:\n\n\n\n    \n\n\nprint\n(\nplt\n.\nstyle\n.\navailable\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n['bmh', 'classic', 'dark_background', 'fast', 'fivethirtyeight', 'ggplot', 'grayscale', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark-palette', 'seaborn-dark', 'seaborn-darkgrid', 'seaborn-deep', 'seaborn-muted', 'seaborn-notebook', 'seaborn-paper', 'seaborn-pastel', 'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white', 'seaborn-whitegrid', 'seaborn', 'Solarize_Light2', 'tableau-colorblind10', '_classic_test']\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nplt\n.\nstyle\n.\nuse\n(\n'fivethirtyeight'\n)\n\n\nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n \n10\n)\n\n\n# Fixing random state for reproducibility\n\n\nnp\n.\nrandom\n.\nseed\n(\n19680801\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \n0.5\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \n2\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n-\n \n0.5\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n-\n \n2\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nset_title\n(\n\"'fivethirtyeight' style sheet\"\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\nplt\n.\nstyle\n.\nuse\n(\n'ggplot'\n)\n\n\nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n \n10\n)\n\n\n# Fixing random state for reproducibility\n\n\nnp\n.\nrandom\n.\nseed\n(\n19680801\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \n0.5\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \n2\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n-\n \n0.5\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n-\n \n2\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nset_title\n(\n\"'ggplot' style sheet\"\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[8]:\n\n\n\n    \n\n\nplt\n.\nstyle\n.\nuse\n(\n'seaborn'\n)\n\n\nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n \n10\n)\n\n\n# Fixing random state for reproducibility\n\n\nnp\n.\nrandom\n.\nseed\n(\n19680801\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \n0.5\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \n2\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n-\n \n0.5\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n-\n \n2\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nset_title\n(\n\"'seaborn' style sheet\"\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n\n\n    \n\n\nplt\n.\nstyle\n.\nuse\n(\n'tableau-colorblind10'\n)\n\n\nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n \n10\n)\n\n\n# Fixing random state for reproducibility\n\n\nnp\n.\nrandom\n.\nseed\n(\n19680801\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \n0.5\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \n2\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n-\n \n0.5\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n-\n \n2\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nset_title\n(\n\"'tableau-colorblind10' style sheet\"\n)\n\n\nplt\n.\nshow\n()",
            "title": "Plot Styles"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.13-Plot-Styles/#plot-styles",
            "text": "Sometimes it is useful for engineers to include a couple plots side by side. This can be done in  matplotlib  using  subplots \nFirst import matplotlib. If using a jupyter notebook include the line  %matplotlib inline    In\u00a0[3]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  % matplotlib  inline        In\u00a0[11]:  \n      plt . style . use ( 'default' )  x   =   np . linspace ( 0 ,   10 )  # Fixing random state for reproducibility  np . random . seed ( 19680801 )  fig ,   ax   =   plt . subplots ()  ax . plot ( x ,   np . sin ( x )   +   x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   0.5     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   2     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   -   0.5     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   -   2     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   np . random . randn ( 50 ))  ax . set_title ( \"'default' style sheet\" )  plt . show ()                   In\u00a0[14]:  \n      print ( plt . style . available )           ['bmh', 'classic', 'dark_background', 'fast', 'fivethirtyeight', 'ggplot', 'grayscale', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark-palette', 'seaborn-dark', 'seaborn-darkgrid', 'seaborn-deep', 'seaborn-muted', 'seaborn-notebook', 'seaborn-paper', 'seaborn-pastel', 'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white', 'seaborn-whitegrid', 'seaborn', 'Solarize_Light2', 'tableau-colorblind10', '_classic_test']         In\u00a0[4]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  plt . style . use ( 'fivethirtyeight' )  x   =   np . linspace ( 0 ,   10 )  # Fixing random state for reproducibility  np . random . seed ( 19680801 )  fig ,   ax   =   plt . subplots ()  ax . plot ( x ,   np . sin ( x )   +   x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   0.5     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   2     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   -   0.5     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   -   2     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   np . random . randn ( 50 ))  ax . set_title ( \"'fivethirtyeight' style sheet\" )  plt . show ()                   In\u00a0[7]:  \n      plt . style . use ( 'ggplot' )  x   =   np . linspace ( 0 ,   10 )  # Fixing random state for reproducibility  np . random . seed ( 19680801 )  fig ,   ax   =   plt . subplots ()  ax . plot ( x ,   np . sin ( x )   +   x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   0.5     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   2     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   -   0.5     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   -   2     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   np . random . randn ( 50 ))  ax . set_title ( \"'ggplot' style sheet\" )  plt . show ()                   In\u00a0[8]:  \n      plt . style . use ( 'seaborn' )  x   =   np . linspace ( 0 ,   10 )  # Fixing random state for reproducibility  np . random . seed ( 19680801 )  fig ,   ax   =   plt . subplots ()  ax . plot ( x ,   np . sin ( x )   +   x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   0.5     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   2     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   -   0.5     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   -   2     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   np . random . randn ( 50 ))  ax . set_title ( \"'seaborn' style sheet\" )  plt . show ()                   In\u00a0[10]:  \n      plt . style . use ( 'tableau-colorblind10' )  x   =   np . linspace ( 0 ,   10 )  # Fixing random state for reproducibility  np . random . seed ( 19680801 )  fig ,   ax   =   plt . subplots ()  ax . plot ( x ,   np . sin ( x )   +   x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   0.5     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   2     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   -   0.5     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   -   2     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   np . random . randn ( 50 ))  ax . set_title ( \"'tableau-colorblind10' style sheet\" )  plt . show ()",
            "title": "Plot Styles"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.16-3D-Surface-Plots/",
            "text": "3D Surface Plots\n\n\nSurface plots are useful for engineers. The \nfrom mpl_toolkits.mplot3d import axes3d\n library allows us to plot in 3D.\nFirst import \nmatplotlib\n. If using a jupyter notebook include the line \n%matplotlib inline\n\n\nSurface Plots\n\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nfrom\n \nmpl_toolkits.mplot3d\n \nimport\n \naxes3d\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nx\n \n=\n \nnp\n.\narange\n(\n-\n5\n,\n5\n,\n0.1\n)\n\n\ny\n \n=\n \nnp\n.\narange\n(\n-\n5\n,\n5\n,\n0.1\n)\n\n\nX\n,\nY\n \n=\n \nnp\n.\nmeshgrid\n(\nx\n,\ny\n)\n\n\nZ\n \n=\n \nX\n*\nnp\n.\nexp\n(\n-\nX\n2\n \n-\n \nY\n2\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\nfig\n \n=\n \nplt\n.\nfigure\n()\n\n\nax\n \n=\n \nfig\n.\nadd_subplot\n(\n111\n,\n \nprojection\n=\n'3d'\n)\n\n\nsurf\n \n=\n \nax\n.\nplot_surface\n(\nX\n,\n \nY\n,\n \nZ\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWire Frame Plots\n\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nfrom\n \nmpl_toolkits.mplot3d\n \nimport\n \naxes3d\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\nfig\n \n=\n \nplt\n.\nfigure\n()\n\n\nax\n \n=\n \nfig\n.\nadd_subplot\n(\n111\n,\n \nprojection\n=\n'3d'\n)\n\n\n# Grab some test data.\n\n\nX\n,\n \nY\n,\n \nZ\n \n=\n \naxes3d\n.\nget_test_data\n(\n0.04\n)\n\n\n# Plot a basic wireframe.\n\n\nax\n.\nplot_wireframe\n(\nX\n,\n \nY\n,\n \nZ\n,\n \nrstride\n=\n10\n,\n \ncstride\n=\n10\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGradient Surface Plots\n\n\n\n\n\n\nIn\u00a0[8]:\n\n\n\n    \n\n\nfrom\n \nmpl_toolkits.mplot3d\n \nimport\n \nAxes3D\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nfrom\n \nmatplotlib\n \nimport\n \ncm\n\n\nfrom\n \nmatplotlib.ticker\n \nimport\n \nLinearLocator\n,\n \nFormatStrFormatter\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nfig\n \n=\n \nplt\n.\nfigure\n()\n\n\nax\n \n=\n \nfig\n.\ngca\n(\nprojection\n=\n'3d'\n)\n\n\n# Make data.\n\n\nX\n \n=\n \nnp\n.\narange\n(\n-\n5\n,\n \n5\n,\n \n0.25\n)\n\n\nY\n \n=\n \nnp\n.\narange\n(\n-\n5\n,\n \n5\n,\n \n0.25\n)\n\n\nX\n,\n \nY\n \n=\n \nnp\n.\nmeshgrid\n(\nX\n,\n \nY\n)\n\n\nR\n \n=\n \nnp\n.\nsqrt\n(\nX\n2\n \n+\n \nY\n2\n)\n\n\nZ\n \n=\n \nnp\n.\nsin\n(\nR\n)\n\n\n# Plot the surface.\n\n\nsurf\n \n=\n \nax\n.\nplot_surface\n(\nX\n,\n \nY\n,\n \nZ\n,\n \ncmap\n=\ncm\n.\ncoolwarm\n,\n\n                       \nlinewidth\n=\n0\n,\n \nantialiased\n=\nFalse\n)\n\n\n# Customize the z axis.\n\n\nax\n.\nset_zlim\n(\n-\n1.01\n,\n \n1.01\n)\n\n\nax\n.\nzaxis\n.\nset_major_locator\n(\nLinearLocator\n(\n10\n))\n\n\nax\n.\nzaxis\n.\nset_major_formatter\n(\nFormatStrFormatter\n(\n'\n%.02f\n'\n))\n\n\n# Add a color bar which maps values to colors.\n\n\nfig\n.\ncolorbar\n(\nsurf\n,\n \nshrink\n=\n0.5\n,\n \naspect\n=\n5\n)\n\n\nplt\n.\nshow\n()",
            "title": "3D Surface Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.16-3D-Surface-Plots/#3d-surface-plots",
            "text": "Surface plots are useful for engineers. The  from mpl_toolkits.mplot3d import axes3d  library allows us to plot in 3D.\nFirst import  matplotlib . If using a jupyter notebook include the line  %matplotlib inline",
            "title": "3D Surface Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.16-3D-Surface-Plots/#surface-plots",
            "text": "In\u00a0[3]:  \n      from   mpl_toolkits.mplot3d   import   axes3d  import   matplotlib.pyplot   as   plt  import   numpy   as   np  % matplotlib  inline        In\u00a0[4]:  \n      x   =   np . arange ( - 5 , 5 , 0.1 )  y   =   np . arange ( - 5 , 5 , 0.1 )  X , Y   =   np . meshgrid ( x , y )  Z   =   X * np . exp ( - X 2   -   Y 2 )         In\u00a0[5]:  \n      fig   =   plt . figure ()  ax   =   fig . add_subplot ( 111 ,   projection = '3d' )  surf   =   ax . plot_surface ( X ,   Y ,   Z )  plt . show ()",
            "title": "Surface Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.16-3D-Surface-Plots/#wire-frame-plots",
            "text": "In\u00a0[6]:  \n      from   mpl_toolkits.mplot3d   import   axes3d  import   matplotlib.pyplot   as   plt  % matplotlib  inline        In\u00a0[7]:  \n      fig   =   plt . figure ()  ax   =   fig . add_subplot ( 111 ,   projection = '3d' )  # Grab some test data.  X ,   Y ,   Z   =   axes3d . get_test_data ( 0.04 )  # Plot a basic wireframe.  ax . plot_wireframe ( X ,   Y ,   Z ,   rstride = 10 ,   cstride = 10 )  plt . show ()",
            "title": "Wire Frame Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.16-3D-Surface-Plots/#gradient-surface-plots",
            "text": "In\u00a0[8]:  \n      from   mpl_toolkits.mplot3d   import   Axes3D  import   matplotlib.pyplot   as   plt  from   matplotlib   import   cm  from   matplotlib.ticker   import   LinearLocator ,   FormatStrFormatter  import   numpy   as   np  fig   =   plt . figure ()  ax   =   fig . gca ( projection = '3d' )  # Make data.  X   =   np . arange ( - 5 ,   5 ,   0.25 )  Y   =   np . arange ( - 5 ,   5 ,   0.25 )  X ,   Y   =   np . meshgrid ( X ,   Y )  R   =   np . sqrt ( X 2   +   Y 2 )  Z   =   np . sin ( R )  # Plot the surface.  surf   =   ax . plot_surface ( X ,   Y ,   Z ,   cmap = cm . coolwarm , \n                        linewidth = 0 ,   antialiased = False )  # Customize the z axis.  ax . set_zlim ( - 1.01 ,   1.01 )  ax . zaxis . set_major_locator ( LinearLocator ( 10 ))  ax . zaxis . set_major_formatter ( FormatStrFormatter ( ' %.02f ' ))  # Add a color bar which maps values to colors.  fig . colorbar ( surf ,   shrink = 0.5 ,   aspect = 5 )  plt . show ()",
            "title": "Gradient Surface Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.17-Summary/",
            "text": "Summary\n\n\nIn this chapter you learned how to create plots using Python and \nmatplotlib\n. \nTypes of charts:\n * line graphs\n * bar graphs\n * pie charts\n * bar and line graphs with error bars\n * scatter plots\n * histograms\n * box plots and violin plots\n * quiver plots\n * heat maps\n\n\nAdditional Resources\n\n\nMatplotlib official documentation: \nhttps://matplotlib.org/contents.html\n\n\nMatplotlib summary notebook on Kaggle: \nhttps://www.kaggle.com/grroverpr/matplotlib-plotting-guide/notebook\n\n\nPython Plotting With Matplotlib (Guide) on Real Python: \nhttps://realpython.com/python-matplotlib-guide/#why-can-matplotlib-be-confusing\n\n\nPython For Data Science: Matplotlib Cheat Sheet from DataCamp: \nhttps://s3.amazonaws.com/assets.datacamp.com/blog_assets/Python_Matplotlib_Cheat_Sheet.pdf",
            "title": "Summary"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.17-Summary/#summary",
            "text": "In this chapter you learned how to create plots using Python and  matplotlib . \nTypes of charts:\n * line graphs\n * bar graphs\n * pie charts\n * bar and line graphs with error bars\n * scatter plots\n * histograms\n * box plots and violin plots\n * quiver plots\n * heat maps",
            "title": "Summary"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.17-Summary/#additional-resources",
            "text": "Matplotlib official documentation:  https://matplotlib.org/contents.html  Matplotlib summary notebook on Kaggle:  https://www.kaggle.com/grroverpr/matplotlib-plotting-guide/notebook  Python Plotting With Matplotlib (Guide) on Real Python:  https://realpython.com/python-matplotlib-guide/#why-can-matplotlib-be-confusing  Python For Data Science: Matplotlib Cheat Sheet from DataCamp:  https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Python_Matplotlib_Cheat_Sheet.pdf",
            "title": "Additional Resources"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.18-Review-Questions/",
            "text": "Review Questions\n\n\n6.1\n\n\n6.2\n\n\n6.3\n\n\n6.4\n\n\n6.5\n\n\n6.6\n\n\n6.7\n\n\n6.8\n\n\n6.9",
            "title": "Review Questions"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.18-Review-Questions/#review-questions",
            "text": "6.1  6.2  6.3  6.4  6.5  6.6  6.7  6.8  6.9",
            "title": "Review Questions"
        },
        {
            "location": "/06-User-Input-and-Loops/06.00-Introduction/",
            "text": "User Input and Loops\n\n\nIntroduction\n\n\nBy the end of this chapter you will be able to:\n\n\n\n\n\n\nuse a while loop\n\n\n\n\n\n\nuse a for loop\n\n\n\n\n\n\nuse the break statment\n\n\n\n\n\n\nuse the continue statment\n\n\n\n\n\n\nconstruct flow charts that describe a program which contains a loop",
            "title": "Introduction"
        },
        {
            "location": "/06-User-Input-and-Loops/06.00-Introduction/#user-input-and-loops",
            "text": "",
            "title": "User Input and Loops"
        },
        {
            "location": "/06-User-Input-and-Loops/06.00-Introduction/#introduction",
            "text": "By the end of this chapter you will be able to:    use a while loop    use a for loop    use the break statment    use the continue statment    construct flow charts that describe a program which contains a loop",
            "title": "Introduction"
        },
        {
            "location": "/06-User-Input-and-Loops/06.01-User-Input/",
            "text": "User Input\n\n\nPython can be used to as users for input and then calculate something with the resulting input. The input function is written below:\n\n\n<var> = input('<message>')\n\n\n\n\nWhere \n<var>\n is the variable that stores the user's input and \n is the message the user sees at the prompt. Let's ask a user for their age.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nage\n \n=\n \ninput\n(\n'how old are you?'\n)\n\n\n\n\n\n\n\n\n\n\n\nNow we can do something with the input. Let's print the user's age back to them. Note the \nf' '\n before the string. The \nf\n does not get printed. It indicates to Python that variables are going to be inserted in the string. A set of curley braces \n{  }\n need to surround the variable name.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nage\n \n=\n \ninput\n(\n'how old are you?'\n)\n\n\nprint\n(\nf\n'you are \n{age}\n years old'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nyou are 10 years old\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet's do something more useful. How about we ask for the base and height of a triagble and print back the area of the triangle\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nb\n \n=\n \ninput\n(\n'base of triangle: '\n)\n\n\nh\n \n=\n \ninput\n(\n'height of triangle: '\n)\n\n\nA\n \n=\n \n0.5\nfloat\n(\nb\n)\nfloat\n(\nh\n)\n\n\nprint\n(\nf\n'The area of the triangle is: \n{A}\n'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe area of the triangle is: 15.0",
            "title": "User Input"
        },
        {
            "location": "/06-User-Input-and-Loops/06.01-User-Input/#user-input",
            "text": "Python can be used to as users for input and then calculate something with the resulting input. The input function is written below:  <var> = input('<message>')  Where  <var>  is the variable that stores the user's input and   is the message the user sees at the prompt. Let's ask a user for their age.   In\u00a0[2]:  \n      age   =   input ( 'how old are you?' )      \nNow we can do something with the input. Let's print the user's age back to them. Note the  f' '  before the string. The  f  does not get printed. It indicates to Python that variables are going to be inserted in the string. A set of curley braces  {  }  need to surround the variable name.   In\u00a0[3]:  \n      age   =   input ( 'how old are you?' )  print ( f 'you are  {age}  years old' )           you are 10 years old      \nLet's do something more useful. How about we ask for the base and height of a triagble and print back the area of the triangle   In\u00a0[6]:  \n      b   =   input ( 'base of triangle: ' )  h   =   input ( 'height of triangle: ' )  A   =   0.5 float ( b ) float ( h )  print ( f 'The area of the triangle is:  {A} ' )           The area of the triangle is: 15.0",
            "title": "User Input"
        },
        {
            "location": "/99-Appendix/99.00-Appendix/",
            "text": "Appendix\n\n\nContents\n\n\nThe following will be detailed in the appendix:\n\n\n\n\n\n\nReserved and Key Words in Python\n\n\n\n\n\n\nPython \nmath\n and \nstatistics\n module fuctions\n\n\n\n\n\n\nAnswers to selected problems\n\n\n\n\n\n\nGlossary\n\n\n\n\n\n\nAbout the Author\n\n\n\n\n\n\nAbout the contirubuors",
            "title": "Contents"
        },
        {
            "location": "/99-Appendix/99.00-Appendix/#appendix",
            "text": "",
            "title": "Appendix"
        },
        {
            "location": "/99-Appendix/99.00-Appendix/#contents",
            "text": "The following will be detailed in the appendix:    Reserved and Key Words in Python    Python  math  and  statistics  module fuctions    Answers to selected problems    Glossary    About the Author    About the contirubuors",
            "title": "Contents"
        },
        {
            "location": "/99-Appendix/99.01-Reserved-and-Key-Words-in-Python/",
            "text": "Reserved and Key Words in Python\n\n\nThe following are reserved and key words in Python. These words should not be used as the names for user-defined functions, classes, methods or modules. The key words can be accessed with the following code:\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\nimport\n \nkeyword\n\n\nprint\n(\n'There are \n{}\n key words'\n.\nformat\n(\nlen\n(\nkeyword\n.\nkwlist\n)))\n\n\nfor\n \nkeywrd\n \nin\n \nkeyword\n.\nkwlist\n:\n\n    \nprint\n(\nkeywrd\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are 33 key words\nFalse\nNone\nTrue\nand\nas\nassert\nbreak\nclass\ncontinue\ndef\ndel\nelif\nelse\nexcept\nfinally\nfor\nfrom\nglobal\nif\nimport\nin\nis\nlambda\nnonlocal\nnot\nor\npass\nraise\nreturn\ntry\nwhile\nwith\nyield\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLogical Key Words\n\n\nTrue\n\n\nFalse\n\n\nnot\n\n\nand\n\n\nor\n\n\nis\n\n\nNone\n\n\nin\n\n\nControl Flow Key Words\n\n\nif\n\n\nelse\n\n\nelif\n\n\nfor\n\n\nwhile\n\n\nbreak\n\n\ncontinue\n\n\npass\n\n\ntry\n\n\nexcept\n\n\nfinally\n\n\nraise\n\n\nreturn\n\n\nyield\n\n\nDefinition Key Words\n\n\ndef\n\n\nglobal\n\n\nnonlocal\n\n\nclass\n\n\nlambda\n\n\nwith\n\n\nassert\n\n\ndel\n\n\nModule Key Words\n\n\nimport\n\n\nfrom\n\n\nas\n\n\nwith",
            "title": "Reserved and Key Words in Python"
        },
        {
            "location": "/99-Appendix/99.01-Reserved-and-Key-Words-in-Python/#reserved-and-key-words-in-python",
            "text": "The following are reserved and key words in Python. These words should not be used as the names for user-defined functions, classes, methods or modules. The key words can be accessed with the following code:   In\u00a0[5]:  \n      import   keyword  print ( 'There are  {}  key words' . format ( len ( keyword . kwlist )))  for   keywrd   in   keyword . kwlist : \n     print ( keywrd )           There are 33 key words\nFalse\nNone\nTrue\nand\nas\nassert\nbreak\nclass\ncontinue\ndef\ndel\nelif\nelse\nexcept\nfinally\nfor\nfrom\nglobal\nif\nimport\nin\nis\nlambda\nnonlocal\nnot\nor\npass\nraise\nreturn\ntry\nwhile\nwith\nyield",
            "title": "Reserved and Key Words in Python"
        },
        {
            "location": "/99-Appendix/99.01-Reserved-and-Key-Words-in-Python/#logical-key-words",
            "text": "True  False  not  and  or  is  None  in",
            "title": "Logical Key Words"
        },
        {
            "location": "/99-Appendix/99.01-Reserved-and-Key-Words-in-Python/#control-flow-key-words",
            "text": "if  else  elif  for  while  break  continue  pass  try  except  finally  raise  return  yield",
            "title": "Control Flow Key Words"
        },
        {
            "location": "/99-Appendix/99.01-Reserved-and-Key-Words-in-Python/#definition-key-words",
            "text": "def  global  nonlocal  class  lambda  with  assert  del",
            "title": "Definition Key Words"
        },
        {
            "location": "/99-Appendix/99.01-Reserved-and-Key-Words-in-Python/#module-key-words",
            "text": "import  from  as  with",
            "title": "Module Key Words"
        },
        {
            "location": "/99-Appendix/99.02-ASCII-Character-Codes/",
            "text": "ASCII Character Codes\n\n\nThe following is a list of ASCII character codes. These character codes can also be acccessed using the following code:\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nfor\n \nASCIIcode\n \nin\n \nrange\n(\n32\n,\n127\n):\n\n    \nprint\n(\n'ASCII code: \n{}\n    Character: \n{}\n'\n.\nformat\n(\nASCIIcode\n,\nchr\n(\nASCIIcode\n)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nASCII code: 32    Character:  \nASCII code: 33    Character: !\nASCII code: 34    Character: \"\nASCII code: 35    Character: #\nASCII code: 36    Character: $\nASCII code: 37    Character: %\nASCII code: 38    Character: &\nASCII code: 39    Character: '\nASCII code: 40    Character: (\nASCII code: 41    Character: )\nASCII code: 42    Character: *\nASCII code: 43    Character: +\nASCII code: 44    Character: ,\nASCII code: 45    Character: -\nASCII code: 46    Character: .\nASCII code: 47    Character: /\nASCII code: 48    Character: 0\nASCII code: 49    Character: 1\nASCII code: 50    Character: 2\nASCII code: 51    Character: 3\nASCII code: 52    Character: 4\nASCII code: 53    Character: 5\nASCII code: 54    Character: 6\nASCII code: 55    Character: 7\nASCII code: 56    Character: 8\nASCII code: 57    Character: 9\nASCII code: 58    Character: :\nASCII code: 59    Character: ;\nASCII code: 60    Character: <\nASCII code: 61    Character: =\nASCII code: 62    Character: >\nASCII code: 63    Character: ?\nASCII code: 64    Character: @\nASCII code: 65    Character: A\nASCII code: 66    Character: B\nASCII code: 67    Character: C\nASCII code: 68    Character: D\nASCII code: 69    Character: E\nASCII code: 70    Character: F\nASCII code: 71    Character: G\nASCII code: 72    Character: H\nASCII code: 73    Character: I\nASCII code: 74    Character: J\nASCII code: 75    Character: K\nASCII code: 76    Character: L\nASCII code: 77    Character: M\nASCII code: 78    Character: N\nASCII code: 79    Character: O\nASCII code: 80    Character: P\nASCII code: 81    Character: Q\nASCII code: 82    Character: R\nASCII code: 83    Character: S\nASCII code: 84    Character: T\nASCII code: 85    Character: U\nASCII code: 86    Character: V\nASCII code: 87    Character: W\nASCII code: 88    Character: X\nASCII code: 89    Character: Y\nASCII code: 90    Character: Z\nASCII code: 91    Character: [\nASCII code: 92    Character: \\\nASCII code: 93    Character: ]\nASCII code: 94    Character: ^\nASCII code: 95    Character: _\nASCII code: 96    Character: `\nASCII code: 97    Character: a\nASCII code: 98    Character: b\nASCII code: 99    Character: c\nASCII code: 100    Character: d\nASCII code: 101    Character: e\nASCII code: 102    Character: f\nASCII code: 103    Character: g\nASCII code: 104    Character: h\nASCII code: 105    Character: i\nASCII code: 106    Character: j\nASCII code: 107    Character: k\nASCII code: 108    Character: l\nASCII code: 109    Character: m\nASCII code: 110    Character: n\nASCII code: 111    Character: o\nASCII code: 112    Character: p\nASCII code: 113    Character: q\nASCII code: 114    Character: r\nASCII code: 115    Character: s\nASCII code: 116    Character: t\nASCII code: 117    Character: u\nASCII code: 118    Character: v\nASCII code: 119    Character: w\nASCII code: 120    Character: x\nASCII code: 121    Character: y\nASCII code: 122    Character: z\nASCII code: 123    Character: {\nASCII code: 124    Character: |\nASCII code: 125    Character: }\nASCII code: 126    Character: ~",
            "title": "ASCII Character Codes"
        },
        {
            "location": "/99-Appendix/99.02-ASCII-Character-Codes/#ascii-character-codes",
            "text": "The following is a list of ASCII character codes. These character codes can also be acccessed using the following code:   In\u00a0[2]:  \n      for   ASCIIcode   in   range ( 32 , 127 ): \n     print ( 'ASCII code:  {}     Character:  {} ' . format ( ASCIIcode , chr ( ASCIIcode )))           ASCII code: 32    Character:  \nASCII code: 33    Character: !\nASCII code: 34    Character: \"\nASCII code: 35    Character: #\nASCII code: 36    Character: $\nASCII code: 37    Character: %\nASCII code: 38    Character: &\nASCII code: 39    Character: '\nASCII code: 40    Character: (\nASCII code: 41    Character: )\nASCII code: 42    Character: *\nASCII code: 43    Character: +\nASCII code: 44    Character: ,\nASCII code: 45    Character: -\nASCII code: 46    Character: .\nASCII code: 47    Character: /\nASCII code: 48    Character: 0\nASCII code: 49    Character: 1\nASCII code: 50    Character: 2\nASCII code: 51    Character: 3\nASCII code: 52    Character: 4\nASCII code: 53    Character: 5\nASCII code: 54    Character: 6\nASCII code: 55    Character: 7\nASCII code: 56    Character: 8\nASCII code: 57    Character: 9\nASCII code: 58    Character: :\nASCII code: 59    Character: ;\nASCII code: 60    Character: <\nASCII code: 61    Character: =\nASCII code: 62    Character: >\nASCII code: 63    Character: ?\nASCII code: 64    Character: @\nASCII code: 65    Character: A\nASCII code: 66    Character: B\nASCII code: 67    Character: C\nASCII code: 68    Character: D\nASCII code: 69    Character: E\nASCII code: 70    Character: F\nASCII code: 71    Character: G\nASCII code: 72    Character: H\nASCII code: 73    Character: I\nASCII code: 74    Character: J\nASCII code: 75    Character: K\nASCII code: 76    Character: L\nASCII code: 77    Character: M\nASCII code: 78    Character: N\nASCII code: 79    Character: O\nASCII code: 80    Character: P\nASCII code: 81    Character: Q\nASCII code: 82    Character: R\nASCII code: 83    Character: S\nASCII code: 84    Character: T\nASCII code: 85    Character: U\nASCII code: 86    Character: V\nASCII code: 87    Character: W\nASCII code: 88    Character: X\nASCII code: 89    Character: Y\nASCII code: 90    Character: Z\nASCII code: 91    Character: [\nASCII code: 92    Character: \\\nASCII code: 93    Character: ]\nASCII code: 94    Character: ^\nASCII code: 95    Character: _\nASCII code: 96    Character: `\nASCII code: 97    Character: a\nASCII code: 98    Character: b\nASCII code: 99    Character: c\nASCII code: 100    Character: d\nASCII code: 101    Character: e\nASCII code: 102    Character: f\nASCII code: 103    Character: g\nASCII code: 104    Character: h\nASCII code: 105    Character: i\nASCII code: 106    Character: j\nASCII code: 107    Character: k\nASCII code: 108    Character: l\nASCII code: 109    Character: m\nASCII code: 110    Character: n\nASCII code: 111    Character: o\nASCII code: 112    Character: p\nASCII code: 113    Character: q\nASCII code: 114    Character: r\nASCII code: 115    Character: s\nASCII code: 116    Character: t\nASCII code: 117    Character: u\nASCII code: 118    Character: v\nASCII code: 119    Character: w\nASCII code: 120    Character: x\nASCII code: 121    Character: y\nASCII code: 122    Character: z\nASCII code: 123    Character: {\nASCII code: 124    Character: |\nASCII code: 125    Character: }\nASCII code: 126    Character: ~",
            "title": "ASCII Character Codes"
        },
        {
            "location": "/99-Appendix/99.03-Virtual-Environments/",
            "text": "Virtual Environments\n\n\nUsing \nvirtual environments\n is a good standard of practice in Python",
            "title": "Virtual Environments"
        },
        {
            "location": "/99-Appendix/99.03-Virtual-Environments/#virtual-environments",
            "text": "Using  virtual environments  is a good standard of practice in Python",
            "title": "Virtual Environments"
        },
        {
            "location": "/99-Appendix/99.04-Numpy-Math-Functions/",
            "text": "Numpy Math Functions\n\n\nThe code below will print out all of the numpy functions and methods:\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\n#import numpy as np\n\n\n#for func in dir(np):\n\n\n#    print(func)\n\n\n\n\n\n\n\n\n\n\n\n\n\nNumpy Statistics Fuctions and Methods\n\n\nnp.mean\nnp.median\nnp.std\nnp.var\nnp.erf\n\n\n\n\nNumpy Trigonometric Functions and Methods\n\n\nnp.pi\nnp.sin\nnp.cos\nnp.tan\nnp.arcsin\nnp.arccos\nnp.arctan\nnp.arcsinh\nnp.arccosh\nnp.arctanh\nnp.arctan2\nnp.radians\nnp.rad2deg\nnp.deg2rad\nnp.radians\n\nnp.sinc\nnp.sinh\nnp.tanh\n\nnp.angle\n\n\n\n\nNumpy Exponential and Logrithmic Functions and Methods\n\n\nnp.log\nnp.log10\nnp.log1p\nnp.log2\nnp.logaddexp\nnp.logaddexp2\nnp.exp\nnp.exp2\nnp.sqrt\nnp.power\nnp.e\n\n\n\n\nNumpy Matrix Creation and Manipulation Functions and Methods\n\n\nnp.linspace\nnp.zeros\nnp.ones\nnp.ndarray\nnp.matrix\nnp.traspose\nnp.size\nnp.shape\nnp.reshape\nnp.meshgrid\nnp.dot\nnp.asmatrix\nnp.asarray\nnp.arange\nnp.array",
            "title": "Numpy Math Functions"
        },
        {
            "location": "/99-Appendix/99.04-Numpy-Math-Functions/#numpy-math-functions",
            "text": "The code below will print out all of the numpy functions and methods:   In\u00a0[7]:  \n      #import numpy as np  #for func in dir(np):  #    print(func)",
            "title": "Numpy Math Functions"
        },
        {
            "location": "/99-Appendix/99.04-Numpy-Math-Functions/#numpy-statistics-fuctions-and-methods",
            "text": "np.mean\nnp.median\nnp.std\nnp.var\nnp.erf",
            "title": "Numpy Statistics Fuctions and Methods"
        },
        {
            "location": "/99-Appendix/99.04-Numpy-Math-Functions/#numpy-trigonometric-functions-and-methods",
            "text": "np.pi\nnp.sin\nnp.cos\nnp.tan\nnp.arcsin\nnp.arccos\nnp.arctan\nnp.arcsinh\nnp.arccosh\nnp.arctanh\nnp.arctan2\nnp.radians\nnp.rad2deg\nnp.deg2rad\nnp.radians\n\nnp.sinc\nnp.sinh\nnp.tanh\n\nnp.angle  Numpy Exponential and Logrithmic Functions and Methods  np.log\nnp.log10\nnp.log1p\nnp.log2\nnp.logaddexp\nnp.logaddexp2\nnp.exp\nnp.exp2\nnp.sqrt\nnp.power\nnp.e",
            "title": "Numpy Trigonometric Functions and Methods"
        },
        {
            "location": "/99-Appendix/99.04-Numpy-Math-Functions/#numpy-matrix-creation-and-manipulation-functions-and-methods",
            "text": "np.linspace\nnp.zeros\nnp.ones\nnp.ndarray\nnp.matrix\nnp.traspose\nnp.size\nnp.shape\nnp.reshape\nnp.meshgrid\nnp.dot\nnp.asmatrix\nnp.asarray\nnp.arange\nnp.array",
            "title": "Numpy Matrix Creation and Manipulation Functions and Methods"
        },
        {
            "location": "/99-Appendix/99.05-Git-and-github/",
            "text": "Git and github.com\n\n\nGit\n is a common version control tool used by computer program developers to save code and work on code as a team. \nGit\n is a program run from the command line or \nAnaconda Prompt\n.\n\ngithub.com\n is a website and service used by open source projects to share code and allow other users to make changes to exhisting code.\nBoth \ngit\n and \ngithub.com\n are useful of engineers working in teams.\nTo use git and github the understanding of a few terms is import:\n\n\n\n\ngit\n - a command line program used to track file changes and colaborate on code with others\n\n\nrepo\n - short name for \"repository\". A repo is a directory that contains files and other subfolders with files\n\n\nlocal repo\n -  a directory that contains files and subfolders on your computer that git knows about\n\n\nremote repo\n - a set of files and subfolders stored in the cloud that git knows about\nThe useful git commands are summarized below:\n\n\n\n\n\n\n\n\n\n\ncommand\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ngit init\n\n\ninitialize a new repository\n\n\n\n\n\n\ngit remote add origin https://github.com/username/reponame.git\n\n\nlinks a local git repo with a remote git repo on github.com\n\n\n\n\n\n\ngit add .\n\n\nadds all the files and changes to the local git repo\n\n\n\n\n\n\ngit commit -m \"commit message\"\n\n\ncommits the changes in the local repo\n\n\n\n\n\n\ngit push origin master\n\n\npushes the changes up to the remote repo on github.com\n\n\n\n\n\n\ngit pull origin master\n\n\npulls the version in the remote repo down to the local repo\n\n\n\n\n\n\ngit clone https://github.com/username/reponame.git\n\n\ncopies a remote repo on github.com to a local directory",
            "title": "Git and github.com"
        },
        {
            "location": "/99-Appendix/99.05-Git-and-github/#git-and-githubcom",
            "text": "Git  is a common version control tool used by computer program developers to save code and work on code as a team.  Git  is a program run from the command line or  Anaconda Prompt . github.com  is a website and service used by open source projects to share code and allow other users to make changes to exhisting code.\nBoth  git  and  github.com  are useful of engineers working in teams.\nTo use git and github the understanding of a few terms is import:   git  - a command line program used to track file changes and colaborate on code with others  repo  - short name for \"repository\". A repo is a directory that contains files and other subfolders with files  local repo  -  a directory that contains files and subfolders on your computer that git knows about  remote repo  - a set of files and subfolders stored in the cloud that git knows about\nThe useful git commands are summarized below:      command  description      git init  initialize a new repository    git remote add origin https://github.com/username/reponame.git  links a local git repo with a remote git repo on github.com    git add .  adds all the files and changes to the local git repo    git commit -m \"commit message\"  commits the changes in the local repo    git push origin master  pushes the changes up to the remote repo on github.com    git pull origin master  pulls the version in the remote repo down to the local repo    git clone https://github.com/username/reponame.git  copies a remote repo on github.com to a local directory",
            "title": "Git and github.com"
        },
        {
            "location": "/99-Appendix/99.06-Python-for-Undergaduate-Engineers-Book-Construction/",
            "text": "Python for Undergraduate Engineers Book Construction\n\n\nJupyter Notebooks\n\n\nThis book was constructed using \njupyter notebooks\n saved on github.com. The github repo for the books can be found at:\n\n\nhttps://github.com/ProfessorKazarinoff/PythonForUndergraduateEngineers\n\nThe directory structure of the github repo contains the \njupyter notebooks\n that were use the write the book, a set of conversion tools and the output of these conversion tools, the book website and pdf's that make the hard copy of the book\n\n\nPythonForUndergraduateEngineers/\n|-- conversion_tools/\n|-- notebooks/\n|-- LICENSE\n|-- notebooks/\n|-- pdf/\n|-- README.md\n|-- website/\n\n\n\n\nThe notebooks directory contains a folder for each chapter of the book:\n\n\nNotebooks/\n|-- 00-Preface/\n|-- 01-Orientation/\n|-- 02-The-Python-REPL/\n|-- 03-Data-Types-and-Variables/\n|-- 04-Jupyter-Notebooks/\n|-- 05-Functions-and-Modules/\n|-- 06-Plotting-with-Matplotlib/\n|-- 07-If-Else-Try-Except/\n|-- 08-Loops/\n|-- 09-Linear-Algebra/\n|-- 10-Symbolic-Math/\n|-- 11-Python-and-External-Hardware/\n|-- 12-MicroPython/\n|-- 99-Appendix/\n|-- figures/\n`-- TOC.ipynb\n\n\n\n\nWithin each chapter directory there is a \njupyter notebook\n for each section and an images directory for any images used in the markdown sections of the notebooks\n\n\n01-Orientation/\n|-- 01.00-Welcome.ipynb\n|-- 01.01-Why-Python.ipynb\n|-- 01.02-Installing-Python.ipynb\n|-- 01.03-Installing-Anaconda.ipynb\n|-- 01.04-Installing-Anaconda-on-OSX.ipynb\n|-- 01.05-Summary.ipynb\n|-- 01.06-Review-Questions.ipynb\n`-- images/\n\n\n\n\nWebsite\n\n\nThe website for the book was constructed using mkdocs. Jupyter noteboks were exported to html with the markdown cells unformatted. \n\n\nHardcopy\n\n\nThe hard copy of the book was constructed using \nLateX\n and \nnbconvert\n. A conversion script combined all of the notebooks into one BIG notebook and converted the one BIG notebook to \nLaTeX\n using a custom template.",
            "title": "Python for Undergraduate Engineers Book Construction"
        },
        {
            "location": "/99-Appendix/99.06-Python-for-Undergaduate-Engineers-Book-Construction/#python-for-undergraduate-engineers-book-construction",
            "text": "",
            "title": "Python for Undergraduate Engineers Book Construction"
        },
        {
            "location": "/99-Appendix/99.06-Python-for-Undergaduate-Engineers-Book-Construction/#jupyter-notebooks",
            "text": "This book was constructed using  jupyter notebooks  saved on github.com. The github repo for the books can be found at:  https://github.com/ProfessorKazarinoff/PythonForUndergraduateEngineers \nThe directory structure of the github repo contains the  jupyter notebooks  that were use the write the book, a set of conversion tools and the output of these conversion tools, the book website and pdf's that make the hard copy of the book  PythonForUndergraduateEngineers/\n|-- conversion_tools/\n|-- notebooks/\n|-- LICENSE\n|-- notebooks/\n|-- pdf/\n|-- README.md\n|-- website/  The notebooks directory contains a folder for each chapter of the book:  Notebooks/\n|-- 00-Preface/\n|-- 01-Orientation/\n|-- 02-The-Python-REPL/\n|-- 03-Data-Types-and-Variables/\n|-- 04-Jupyter-Notebooks/\n|-- 05-Functions-and-Modules/\n|-- 06-Plotting-with-Matplotlib/\n|-- 07-If-Else-Try-Except/\n|-- 08-Loops/\n|-- 09-Linear-Algebra/\n|-- 10-Symbolic-Math/\n|-- 11-Python-and-External-Hardware/\n|-- 12-MicroPython/\n|-- 99-Appendix/\n|-- figures/\n`-- TOC.ipynb  Within each chapter directory there is a  jupyter notebook  for each section and an images directory for any images used in the markdown sections of the notebooks  01-Orientation/\n|-- 01.00-Welcome.ipynb\n|-- 01.01-Why-Python.ipynb\n|-- 01.02-Installing-Python.ipynb\n|-- 01.03-Installing-Anaconda.ipynb\n|-- 01.04-Installing-Anaconda-on-OSX.ipynb\n|-- 01.05-Summary.ipynb\n|-- 01.06-Review-Questions.ipynb\n`-- images/",
            "title": "Jupyter Notebooks"
        },
        {
            "location": "/99-Appendix/99.06-Python-for-Undergaduate-Engineers-Book-Construction/#website",
            "text": "The website for the book was constructed using mkdocs. Jupyter noteboks were exported to html with the markdown cells unformatted.",
            "title": "Website"
        },
        {
            "location": "/99-Appendix/99.06-Python-for-Undergaduate-Engineers-Book-Construction/#hardcopy",
            "text": "The hard copy of the book was constructed using  LateX  and  nbconvert . A conversion script combined all of the notebooks into one BIG notebook and converted the one BIG notebook to  LaTeX  using a custom template.",
            "title": "Hardcopy"
        },
        {
            "location": "/99-Appendix/99.07-About-the-Author/",
            "text": "About the Author\n\n\nPeter D. Kazarinoff, PhD is a full-time faculty member in Engineering and Engineering Technology at Portland Community College in Portland, OR. Peter earned a PhD in Engineering from the University of Washington and a BA from Cornell University. \n\n\nPeter currently lives in Portland OR with his wife and two kids.",
            "title": "About the Author"
        },
        {
            "location": "/99-Appendix/99.07-About-the-Author/#about-the-author",
            "text": "Peter D. Kazarinoff, PhD is a full-time faculty member in Engineering and Engineering Technology at Portland Community College in Portland, OR. Peter earned a PhD in Engineering from the University of Washington and a BA from Cornell University.   Peter currently lives in Portland OR with his wife and two kids.",
            "title": "About the Author"
        }
    ]
}