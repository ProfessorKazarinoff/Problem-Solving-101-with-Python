{
    "docs": [
        {
            "location": "/",
            "text": "!! Under Construction !!\n\n\n!! Not Production Ready !!\n\n\n\n\nProblem Solving 101 with Python\n\n\nIf you like this book, please consider purchasing a hard copy version when it becomes available on \namazon.com\n.\n\n\nOverview\n\n\n\n\nYou will find the book chapters on the left hand menu\n\n\nYou will find navigation within a section of a chapter (one webpage) on the right hand menu\n\n\nFull documentation on how to build this site locally are on github at \nhttps://github.com/professorkazarinoff/Problem-Solving-101-with-Python/website\n\n\n\n\nCopywrite\n\n\nCopyright \u00a9 2017 - 2018 Peter D. Kazarinoff",
            "title": "Home"
        },
        {
            "location": "/#under-construction",
            "text": "",
            "title": "!! Under Construction !!"
        },
        {
            "location": "/#not-production-ready",
            "text": "",
            "title": "!! Not Production Ready !!"
        },
        {
            "location": "/#problem-solving-101-with-python",
            "text": "If you like this book, please consider purchasing a hard copy version when it becomes available on  amazon.com .",
            "title": "Problem Solving 101 with Python"
        },
        {
            "location": "/#overview",
            "text": "You will find the book chapters on the left hand menu  You will find navigation within a section of a chapter (one webpage) on the right hand menu  Full documentation on how to build this site locally are on github at  https://github.com/professorkazarinoff/Problem-Solving-101-with-Python/website",
            "title": "Overview"
        },
        {
            "location": "/#copywrite",
            "text": "Copyright \u00a9 2017 - 2018 Peter D. Kazarinoff",
            "title": "Copywrite"
        },
        {
            "location": "/00-Preface/00.00-Motivation/",
            "text": "Preface\n\n\nMotivation\n\n\nThe motivation for writing this book is that many undergraduate engineering students have to take a prgramming course based on MATLAB. MATLAB is a great piece of software, but it currently costs $49.00 for a student licence and requires a site licence to be used on school computers. Subsequently, it is costly for a student to use MATLAB and it is costly for a college to support a course that uses MATLAB. \n\n\nThe Python programming language on the other hand is open source and free. To download and use Python, the cost to both the student and the college is zero. By moving an undergradate engineering programming class to Python, students will save money and have greater access to the software they use in class. Further in their engineering education, students can continue to use Python for free.",
            "title": "Motivation"
        },
        {
            "location": "/00-Preface/00.00-Motivation/#preface",
            "text": "",
            "title": "Preface"
        },
        {
            "location": "/00-Preface/00.00-Motivation/#motivation",
            "text": "The motivation for writing this book is that many undergraduate engineering students have to take a prgramming course based on MATLAB. MATLAB is a great piece of software, but it currently costs $49.00 for a student licence and requires a site licence to be used on school computers. Subsequently, it is costly for a student to use MATLAB and it is costly for a college to support a course that uses MATLAB.   The Python programming language on the other hand is open source and free. To download and use Python, the cost to both the student and the college is zero. By moving an undergradate engineering programming class to Python, students will save money and have greater access to the software they use in class. Further in their engineering education, students can continue to use Python for free.",
            "title": "Motivation"
        },
        {
            "location": "/00-Preface/00.02-Acknowledgements/",
            "text": "Acknowledgements\n\n\nThe creation of this book and supporting material would not be possible without the gracious support of my wife and family. Students at Portland Community College continue to give me hope that the next generation of engineers will be a diverse group of team problem solvers.\n\n\nThe Python Data Science Handbook and Machine Learning in Python as well as Reiman Equations in Python served as inspiration and examples of using Jupyter notebooks to construct a book. The bookbook repository on github provided a starting point for the tooling to convert the book from jupyter notebooks to the web and into print.",
            "title": "Acknowledgements"
        },
        {
            "location": "/00-Preface/00.02-Acknowledgements/#acknowledgements",
            "text": "The creation of this book and supporting material would not be possible without the gracious support of my wife and family. Students at Portland Community College continue to give me hope that the next generation of engineers will be a diverse group of team problem solvers.  The Python Data Science Handbook and Machine Learning in Python as well as Reiman Equations in Python served as inspiration and examples of using Jupyter notebooks to construct a book. The bookbook repository on github provided a starting point for the tooling to convert the book from jupyter notebooks to the web and into print.",
            "title": "Acknowledgements"
        },
        {
            "location": "/00-Preface/00.03-Supporting-Materials/",
            "text": "Supporting Materials\n\n\nSupporting materials for this text can be found at the textbook website:\n\n\n\n\nhttps://github.io/PythonForUndergraduateEngineers\n\n\n\n\nThe textbook website contains all of the text in web format. Code Examples and Jupyter notebooks for the text can be found on the github repository for the book:\n\n\n\n\nhttps:github.com/ProfessorKazarinoff/PythonForUndergraduateEngineers\n\n\n\n\nLive notebooks where you can run the code examples found in the text without installing any software are available at:\n\n\n\n\nhttps://gitform.ucberkley.edu/PythonForUndergraduateEngineers\n\n\n\n\nIf you are an instructor and using this book in your course with students, please send me an email with your school email address, the course your are teaching and term, enrollment, and a link to the course listing on your school website. I am happy to reply with a solution key for the end of chapter review problems as well as quiz and exam question banks.",
            "title": "Supporting Materials"
        },
        {
            "location": "/00-Preface/00.03-Supporting-Materials/#supporting-materials",
            "text": "Supporting materials for this text can be found at the textbook website:   https://github.io/PythonForUndergraduateEngineers   The textbook website contains all of the text in web format. Code Examples and Jupyter notebooks for the text can be found on the github repository for the book:   https:github.com/ProfessorKazarinoff/PythonForUndergraduateEngineers   Live notebooks where you can run the code examples found in the text without installing any software are available at:   https://gitform.ucberkley.edu/PythonForUndergraduateEngineers   If you are an instructor and using this book in your course with students, please send me an email with your school email address, the course your are teaching and term, enrollment, and a link to the course listing on your school website. I am happy to reply with a solution key for the end of chapter review problems as well as quiz and exam question banks.",
            "title": "Supporting Materials"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/",
            "text": "Formatting Conventions\n\n\nThis book and supporting materials use the following convenstions:\n\n\nWeb Address\n\n\nWeb address will be shown as:\n\n\nhttps://github.com/professorkazarinoff/PythonForUndergraduateEngineers\n\n\nImport terms and vocabulary\n\n\nImportant terms and vocabulary is shown in \nitalic text\n\n\nThere is a difference between \nlocal variables\n and \nglobal variables\n in Python code\n\n\nFile Names\n\n\nFile Names are  shown in \nbold and italic text\n\n\nAfter completing the code, save the file as \nhello.py\n in the current directory.\n\n\nModule and Package Names\n\n\nModule and Package names will be shown in \nbold text\n\n\nNumpy\n and \nmatplotlib\n are two useful packages for engineers\n\n\nInline code\n\n\nInline code including variable names and extensions are shown in \nmonospace font\n\n\nTo compare a variable use \nvar == 'string'\n and make sure to include \n==\n, the doouble equals sign\n\n\nSeperate code blocks\n\n\nSeparate code blocks will appear in their own boxes in `` monospaced font```\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\n\n\nTerminal and Anaconda Prompt Commands\n\n\nCommands typed into the terminal or \nAnaconda Prompt\n will be in seperate boxes which contain \n$\n the dollar sign before each line. Note the \n$\n dollar sign should not be typed. It is included to indicate the terminal or Anaconda prompt, not a character for the user to enter\n\n\n$ conda creat -n newenv pyton=3.6\n$ conda activate newenv\n\n\n\n\nPython REPL Commands\n\n\nCommands typed into the Python REPL, or Python Interperator will be in seperate code boxes which contain >>> the triple arrow prompt. Note the >>> triple arrow sign should not be typed. It is included to indicate the Python REPL prompt, not a character for the user to enter. The output from the Python REPL will be shown on a separate line below the command, without the >>> prompt.\n\n\n>>> 2 + 2\n4\n>>> print('Python for Undergraduate Engineers')\nPython for Undergraduate Engineers\n\n\n\n\nJupyter Notebook cells\n\n\nCommands typed into \nJupyter Notebook\n cells will apprear with an label \nIn [#]:\n and \nOut [#]:\n. Output from a jupyter notebook cell will be shown after the input cell. You only need to run the code in the input cell. The output cell will be prodoced automatically when the you click the run button or type \n[shift]+[Enter]\n\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nA\n \n=\n \n2\n\n\nB\n \n=\n \n3\n\n\nC\n \n=\n \nA\n \n+\n \nB\n\n\nprint\n(\nC\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5",
            "title": "Formatting Conventions"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/#formatting-conventions",
            "text": "This book and supporting materials use the following convenstions:",
            "title": "Formatting Conventions"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/#web-address",
            "text": "Web address will be shown as:  https://github.com/professorkazarinoff/PythonForUndergraduateEngineers",
            "title": "Web Address"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/#import-terms-and-vocabulary",
            "text": "Important terms and vocabulary is shown in  italic text  There is a difference between  local variables  and  global variables  in Python code",
            "title": "Import terms and vocabulary"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/#file-names",
            "text": "File Names are  shown in  bold and italic text  After completing the code, save the file as  hello.py  in the current directory.",
            "title": "File Names"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/#module-and-package-names",
            "text": "Module and Package names will be shown in  bold text  Numpy  and  matplotlib  are two useful packages for engineers",
            "title": "Module and Package Names"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/#inline-code",
            "text": "Inline code including variable names and extensions are shown in  monospace font  To compare a variable use  var == 'string'  and make sure to include  == , the doouble equals sign",
            "title": "Inline code"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/#seperate-code-blocks",
            "text": "Separate code blocks will appear in their own boxes in `` monospaced font```  import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt",
            "title": "Seperate code blocks"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/#terminal-and-anaconda-prompt-commands",
            "text": "Commands typed into the terminal or  Anaconda Prompt  will be in seperate boxes which contain  $  the dollar sign before each line. Note the  $  dollar sign should not be typed. It is included to indicate the terminal or Anaconda prompt, not a character for the user to enter  $ conda creat -n newenv pyton=3.6\n$ conda activate newenv",
            "title": "Terminal and Anaconda Prompt Commands"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/#python-repl-commands",
            "text": "Commands typed into the Python REPL, or Python Interperator will be in seperate code boxes which contain >>> the triple arrow prompt. Note the >>> triple arrow sign should not be typed. It is included to indicate the Python REPL prompt, not a character for the user to enter. The output from the Python REPL will be shown on a separate line below the command, without the >>> prompt.  >>> 2 + 2\n4\n>>> print('Python for Undergraduate Engineers')\nPython for Undergraduate Engineers",
            "title": "Python REPL Commands"
        },
        {
            "location": "/00-Preface/00.04-Formatting Conventions/#jupyter-notebook-cells",
            "text": "Commands typed into  Jupyter Notebook  cells will apprear with an label  In [#]:  and  Out [#]: . Output from a jupyter notebook cell will be shown after the input cell. You only need to run the code in the input cell. The output cell will be prodoced automatically when the you click the run button or type  [shift]+[Enter]    In\u00a0[2]:  \n      A   =   2  B   =   3  C   =   A   +   B  print ( C )           5",
            "title": "Jupyter Notebook cells"
        },
        {
            "location": "/00-Preface/00.05-Errata/",
            "text": "Errata\n\n\nErrata including any typos, code errors and formatting inconsistencies can be submitted to\n\n\n\n\nerrata@pythonforundergraduateengineers.com.\n\n\n\n\nPlease note the chapter number and section number in your email. Thank-you in advanced for helping to improve this text for future students.",
            "title": "Errata"
        },
        {
            "location": "/00-Preface/00.05-Errata/#errata",
            "text": "Errata including any typos, code errors and formatting inconsistencies can be submitted to   errata@pythonforundergraduateengineers.com.   Please note the chapter number and section number in your email. Thank-you in advanced for helping to improve this text for future students.",
            "title": "Errata"
        },
        {
            "location": "/01-What-is-Python/01.00-Introduction/",
            "text": "What is Python?\n\n\nIntroduction\n\n\nWelcome to the world of problem solving with Python. This first chapter will help you get started by reviewing what the Python programming language is and why it is useful for solving a wide array of problems.\n\n\nBy the end of this chapter, you should be able to:\n\n\n\n\nDescribe why Python is a good programming language for problem solving\n\n\nDescribe applications where Python is used\n\n\nDetail advantages of Python over other programming languages\n\n\nKnow the cost of Python\n\n\nKnow the difference between Python and Anaconda",
            "title": "Introduction"
        },
        {
            "location": "/01-What-is-Python/01.00-Introduction/#what-is-python",
            "text": "",
            "title": "What is Python?"
        },
        {
            "location": "/01-What-is-Python/01.00-Introduction/#introduction",
            "text": "Welcome to the world of problem solving with Python. This first chapter will help you get started by reviewing what the Python programming language is and why it is useful for solving a wide array of problems.",
            "title": "Introduction"
        },
        {
            "location": "/01-What-is-Python/01.00-Introduction/#by-the-end-of-this-chapter-you-should-be-able-to",
            "text": "Describe why Python is a good programming language for problem solving  Describe applications where Python is used  Detail advantages of Python over other programming languages  Know the cost of Python  Know the difference between Python and Anaconda",
            "title": "By the end of this chapter, you should be able to:"
        },
        {
            "location": "/01-What-is-Python/01.01-What-is-Python/",
            "text": "What is Python?\n\n\nYou might be wondering \"What is Python?\"\n\n\nPython is a computer programming language\n\n\nPython is a computer programming language. Other computer programming languages include C++, Java, Javascript and MATLAB. \n\n\nWhen you download and install Python, you install the \nPython Interpreter\n. The Python interpreter is a program that run on your computer. Other programs running on your computer include Microsoft Word, Microsoft Excel and a web browser like Google Chrome or Firefox. Each of these prgrams use a different file type. The file type the Python Interpreter run are files that contain Python code. You can think of the Python Interpreter like a cook in a resteraunt that only does exactly as the cook reads in the recipie. The recipie is kind of like Python code. It contains instructions for the cook to run. \n\n\nPython can use over 100,000 external modules\n\n\nWhen you install Python on your computer you typically get the Python Interpreter which includes what is know as the standard libary. The standard library contains all the code that can be run by the interpreter. But in addition to the code that comes with Python, there are over 100,000 external modules that you can download and use. \n\n\nBrief History of Python\n\n\nPython was created by Guido van Rossum, a Dutch computer programmer, and was first released in 1991. The name \nPython\n is attributed to \nMonte Python\n the British commedy troupe that became popular in the 1970's and 80's for their TV show \nMonte Python's Flying Circus\n and movies like \nMonty Python and the Holy Grail\n.\n\n\nWhy was Python created?\n\n\nGuido created Python based on his experience working with another earlier computer programming language called ABC. Guido had a couple of \"gripes\" with the ABC programming language including it's lack of extensability. He wrote Python partly in response to this problem. Unlike ABC, Python is indeed very extensible. It can be extended with additional packages downloaded from the PyPI.org and runs on servers, desktop computers, laptops and tiny microcontrollers.",
            "title": "What is Python?"
        },
        {
            "location": "/01-What-is-Python/01.01-What-is-Python/#what-is-python",
            "text": "You might be wondering \"What is Python?\"",
            "title": "What is Python?"
        },
        {
            "location": "/01-What-is-Python/01.01-What-is-Python/#python-is-a-computer-programming-language",
            "text": "Python is a computer programming language. Other computer programming languages include C++, Java, Javascript and MATLAB.   When you download and install Python, you install the  Python Interpreter . The Python interpreter is a program that run on your computer. Other programs running on your computer include Microsoft Word, Microsoft Excel and a web browser like Google Chrome or Firefox. Each of these prgrams use a different file type. The file type the Python Interpreter run are files that contain Python code. You can think of the Python Interpreter like a cook in a resteraunt that only does exactly as the cook reads in the recipie. The recipie is kind of like Python code. It contains instructions for the cook to run.",
            "title": "Python is a computer programming language"
        },
        {
            "location": "/01-What-is-Python/01.01-What-is-Python/#python-can-use-over-100000-external-modules",
            "text": "When you install Python on your computer you typically get the Python Interpreter which includes what is know as the standard libary. The standard library contains all the code that can be run by the interpreter. But in addition to the code that comes with Python, there are over 100,000 external modules that you can download and use.",
            "title": "Python can use over 100,000 external modules"
        },
        {
            "location": "/01-What-is-Python/01.01-What-is-Python/#brief-history-of-python",
            "text": "Python was created by Guido van Rossum, a Dutch computer programmer, and was first released in 1991. The name  Python  is attributed to  Monte Python  the British commedy troupe that became popular in the 1970's and 80's for their TV show  Monte Python's Flying Circus  and movies like  Monty Python and the Holy Grail .",
            "title": "Brief History of Python"
        },
        {
            "location": "/01-What-is-Python/01.01-What-is-Python/#why-was-python-created",
            "text": "Guido created Python based on his experience working with another earlier computer programming language called ABC. Guido had a couple of \"gripes\" with the ABC programming language including it's lack of extensability. He wrote Python partly in response to this problem. Unlike ABC, Python is indeed very extensible. It can be extended with additional packages downloaded from the PyPI.org and runs on servers, desktop computers, laptops and tiny microcontrollers.",
            "title": "Why was Python created?"
        },
        {
            "location": "/01-What-is-Python/01.02-Why-Python/",
            "text": "Why Python?\n\n\nYou might be wondering \"Why should I learn Python?\" There are other programming languages in the engineering world such as MATLAB, LabView, C++ and Java. What makes Python useful for problem solving?\n\n\nPython is a powerful programming language\n\n\nPython defines the types of objects you build into your code. Unlike some other languages such as C, you do not need to declare the object type. The object type is also mutable, you can change the type of object easily and on the fly. There is a wide array of object types built into Python. Objects can change in size. Python objects can also contain mixed data types. Strings and floating point numbers can be part of the same list.\n\n\nPython has an extensive standard library. A huge number of object types, functions and methods are available for use without importing any external modules. These include math functions, list methods, calls to a computers system. There is a lot that can be done with the standard library. The first couple chapters of this book will just use the standard library. It can do a lot.\n\n\nPython has over 100,000 external packages available for download and use. They are easy to install off of the python package index, commonly called PyPI (\"pie pee eye\"). There is a python package for just about everything. There are packages which can help you: interact with the web, make complex computations, do unit conversions, plot data, work with .csv, .xls, and .pdf files, manipulate images and video, read data from sensors and test equipment, train machine learning algorithms, design web apps, work with GIS data, work with astronautical data, and many more added every day. In this book we will use some of the more useful Python packages for engineers such as numpy, matplotlib, pandas, and scipy.\n\n\nPython is easy to learn and use\n\n\nEngineers solve the world's problems in teams. One way Python helps solve these problems faster than other programming languages is that it is easy to learn and use. Python programs tends to be shorter and quicker to write than a program that does a similar function in other languages. In the rapid design, prototype, test, iterate cycle programming solutions can be spun up quickly. Python is also an easy language for fellow engineers on your team to learn. It is also quite human readable. While programmers can become preoccupied with a programs run time, it is development time that takes the longest.\n\n\nPython is transportable\n\n\nPython can be installed and run on each of the three major operating systems: Windows, Mac and Linux. On Mac and Linux Python comes installed out of the box. Just open up a terminal in on a Mac OSX or Linux machine and type \\texttt{python}. That's it, you are now using Python. On Windows I recommend downloading and using the Ananaconda distribution. The Anaconda distrobution is free and can be installed on all three major operating systems. The same programming environment can be replecated accross the three different opperating systems.\n\n\nPython is free\n\n\nMATLAB and LabView cost students to use and cost companies and colleges even more. Python is free to download and use. It is also open source and free to modify, contribute to, and propose improvements. All of the packages available for download on the Python Package Index, PyPI (pronouced pie-pee-eye) are free to download and install. Many more packages, scripts and utilities can be found in open source repos on github and bitbucket. \n\n\nPython is growing\n\n\nPython is growing in popularity. Python is particularly growing in the data sciences and in use with GIS systems, physical modeling, machine learning and computer vision. These are growing team problem solving areas for engineers.  \n\n\nPython has extensive standard library of modules and a vast array of external modules\n\n\nPythons Standard Library\n\n\nStandard Library Modules include:\n\n\nmath, statistics, os, urllib, table for what they are used for. More can be found on Read-the-docs\n\n\nExternal Modules available on PyPI\n\n\nThere are over 100,000 external modules available for Python on PyPI. Ones useful for engineers include\n\n\nnumpy, pandas, matplotlib, jupyter table for what they are used for\n\n\ninstalling Python modules can be done on the command line or at the Anaconda Prompt using;\n\n\n$ pip install <module_name>\n\n\n\n\nwhere \n<module_name>\n is the name of the module you want to install.",
            "title": "Why Python?"
        },
        {
            "location": "/01-What-is-Python/01.02-Why-Python/#why-python",
            "text": "You might be wondering \"Why should I learn Python?\" There are other programming languages in the engineering world such as MATLAB, LabView, C++ and Java. What makes Python useful for problem solving?",
            "title": "Why Python?"
        },
        {
            "location": "/01-What-is-Python/01.02-Why-Python/#python-is-a-powerful-programming-language",
            "text": "Python defines the types of objects you build into your code. Unlike some other languages such as C, you do not need to declare the object type. The object type is also mutable, you can change the type of object easily and on the fly. There is a wide array of object types built into Python. Objects can change in size. Python objects can also contain mixed data types. Strings and floating point numbers can be part of the same list.  Python has an extensive standard library. A huge number of object types, functions and methods are available for use without importing any external modules. These include math functions, list methods, calls to a computers system. There is a lot that can be done with the standard library. The first couple chapters of this book will just use the standard library. It can do a lot.  Python has over 100,000 external packages available for download and use. They are easy to install off of the python package index, commonly called PyPI (\"pie pee eye\"). There is a python package for just about everything. There are packages which can help you: interact with the web, make complex computations, do unit conversions, plot data, work with .csv, .xls, and .pdf files, manipulate images and video, read data from sensors and test equipment, train machine learning algorithms, design web apps, work with GIS data, work with astronautical data, and many more added every day. In this book we will use some of the more useful Python packages for engineers such as numpy, matplotlib, pandas, and scipy.",
            "title": "Python is a powerful programming language"
        },
        {
            "location": "/01-What-is-Python/01.02-Why-Python/#python-is-easy-to-learn-and-use",
            "text": "Engineers solve the world's problems in teams. One way Python helps solve these problems faster than other programming languages is that it is easy to learn and use. Python programs tends to be shorter and quicker to write than a program that does a similar function in other languages. In the rapid design, prototype, test, iterate cycle programming solutions can be spun up quickly. Python is also an easy language for fellow engineers on your team to learn. It is also quite human readable. While programmers can become preoccupied with a programs run time, it is development time that takes the longest.",
            "title": "Python is easy to learn and use"
        },
        {
            "location": "/01-What-is-Python/01.02-Why-Python/#python-is-transportable",
            "text": "Python can be installed and run on each of the three major operating systems: Windows, Mac and Linux. On Mac and Linux Python comes installed out of the box. Just open up a terminal in on a Mac OSX or Linux machine and type \\texttt{python}. That's it, you are now using Python. On Windows I recommend downloading and using the Ananaconda distribution. The Anaconda distrobution is free and can be installed on all three major operating systems. The same programming environment can be replecated accross the three different opperating systems.",
            "title": "Python is transportable"
        },
        {
            "location": "/01-What-is-Python/01.02-Why-Python/#python-is-free",
            "text": "MATLAB and LabView cost students to use and cost companies and colleges even more. Python is free to download and use. It is also open source and free to modify, contribute to, and propose improvements. All of the packages available for download on the Python Package Index, PyPI (pronouced pie-pee-eye) are free to download and install. Many more packages, scripts and utilities can be found in open source repos on github and bitbucket.",
            "title": "Python is free"
        },
        {
            "location": "/01-What-is-Python/01.02-Why-Python/#python-is-growing",
            "text": "Python is growing in popularity. Python is particularly growing in the data sciences and in use with GIS systems, physical modeling, machine learning and computer vision. These are growing team problem solving areas for engineers.",
            "title": "Python is growing"
        },
        {
            "location": "/01-What-is-Python/01.02-Why-Python/#python-has-extensive-standard-library-of-modules-and-a-vast-array-of-external-modules",
            "text": "",
            "title": "Python has extensive standard library of modules and a vast array of external modules"
        },
        {
            "location": "/01-What-is-Python/01.02-Why-Python/#pythons-standard-library",
            "text": "Standard Library Modules include:  math, statistics, os, urllib, table for what they are used for. More can be found on Read-the-docs",
            "title": "Pythons Standard Library"
        },
        {
            "location": "/01-What-is-Python/01.02-Why-Python/#external-modules-available-on-pypi",
            "text": "There are over 100,000 external modules available for Python on PyPI. Ones useful for engineers include  numpy, pandas, matplotlib, jupyter table for what they are used for  installing Python modules can be done on the command line or at the Anaconda Prompt using;  $ pip install <module_name>  where  <module_name>  is the name of the module you want to install.",
            "title": "External Modules available on PyPI"
        },
        {
            "location": "/01-What-is-Python/01.03-What-is-Anaconda/",
            "text": "What is Anaconda?\n\n\nYou might be wondering \"OK, I know what Python is. It is computer programming language\"\n\n\n\"But what is Anaconda? How is it different than Python?\"\n\n\nAnaconda is a Python Distribution\n\n\nAnaconda is a Python Distribution. When you downlod Anaconda you download a Python Interpreter. \n\n\nHow is Anaconda different from Python?\n\n\nWhen you download Python from Python.org you get the Python Interpreter, a little text editing program called IDLE and all of the Python standard library modules.\n\n\nWhen you download Anaconda from Anaconda.com, you get a Python Interpreter, a command line program called the Anaconda Prompt, a text editor called Spyder and about 200 extra Python modules that aren't included in the standard library.\n\n\nWhy would I download Anaconda if I want to use is Python?\n\n\nRegarless if you download just Python from Python.org or you download Anaconda (with all the extra stuff it comes with) from Anaconda.com, you will be able to write and execute Python code.\n\n\nAnaconda includes Python plus about 200 additional Python packages\n\n\nAnaconda is adventageous because it includes Python as well as about 200 aditional Python packages. These are all free to use. The packages that come with Anaconda includes many of the most common Python packages people use. If you download Anaconda, you get Python including the standard library plus 200 extra packages. If you download just Python, well you just get plain old Python and the standard library. You could install the extra modules that come with Anaconda (that don't come with plain old Python), but why not save a step (or 200 steps) and download one thing instead of downloading 201 and one things (200 extra modules + 1 Python download).\n\n\nAnaconda installs without administrator privaleges\n\n\nEven if you don't have the ability to install program on a computer, like a computer in a school computer lab, you can still download and use Anaconda.\n\n\nAnaconda works on MacOS\n\n\nIf you use MacOS, you probably already have Python installed on you computer without even knowing it. MacOS comes with Python pre-installed. The problem is that the version of Python that comes with MacOS is old and it is locked up behind a set of administrator privaleges. This means you can have trouble using the version of Python that comes on MacOS. Some things will seem to work fine, and then other things won't run at all or you will keep get asked for an adminstrator password over and over. Downloading and installing Anaconda (seperate from the version of Python that came with MacOS) prevents most of these problems.\n\n\nAnaconda makes package managment and virtual environment management easier\n\n\nAnother advantage that downloading Anaconda has over downloading just Python is that package managememt and virtual environment management are a lot easier when you have Anaconda. This might not seem to make a difference right now. If you just downloaded Anaconda for the first time, you are probably not dealing with package management and virtual environments yet, and might not even know what those two things are. After you write a couple Python programs and start downloading a couple extra modules from the internet, dealing with package managment and virtual environments becomes more important.",
            "title": "What is Anaconda?"
        },
        {
            "location": "/01-What-is-Python/01.03-What-is-Anaconda/#what-is-anaconda",
            "text": "You might be wondering \"OK, I know what Python is. It is computer programming language\"  \"But what is Anaconda? How is it different than Python?\"",
            "title": "What is Anaconda?"
        },
        {
            "location": "/01-What-is-Python/01.03-What-is-Anaconda/#anaconda-is-a-python-distribution",
            "text": "Anaconda is a Python Distribution. When you downlod Anaconda you download a Python Interpreter.",
            "title": "Anaconda is a Python Distribution"
        },
        {
            "location": "/01-What-is-Python/01.03-What-is-Anaconda/#how-is-anaconda-different-from-python",
            "text": "When you download Python from Python.org you get the Python Interpreter, a little text editing program called IDLE and all of the Python standard library modules.  When you download Anaconda from Anaconda.com, you get a Python Interpreter, a command line program called the Anaconda Prompt, a text editor called Spyder and about 200 extra Python modules that aren't included in the standard library.",
            "title": "How is Anaconda different from Python?"
        },
        {
            "location": "/01-What-is-Python/01.03-What-is-Anaconda/#why-would-i-download-anaconda-if-i-want-to-use-is-python",
            "text": "Regarless if you download just Python from Python.org or you download Anaconda (with all the extra stuff it comes with) from Anaconda.com, you will be able to write and execute Python code.",
            "title": "Why would I download Anaconda if I want to use is Python?"
        },
        {
            "location": "/01-What-is-Python/01.03-What-is-Anaconda/#anaconda-includes-python-plus-about-200-additional-python-packages",
            "text": "Anaconda is adventageous because it includes Python as well as about 200 aditional Python packages. These are all free to use. The packages that come with Anaconda includes many of the most common Python packages people use. If you download Anaconda, you get Python including the standard library plus 200 extra packages. If you download just Python, well you just get plain old Python and the standard library. You could install the extra modules that come with Anaconda (that don't come with plain old Python), but why not save a step (or 200 steps) and download one thing instead of downloading 201 and one things (200 extra modules + 1 Python download).",
            "title": "Anaconda includes Python plus about 200 additional Python packages"
        },
        {
            "location": "/01-What-is-Python/01.03-What-is-Anaconda/#anaconda-installs-without-administrator-privaleges",
            "text": "Even if you don't have the ability to install program on a computer, like a computer in a school computer lab, you can still download and use Anaconda.",
            "title": "Anaconda installs without administrator privaleges"
        },
        {
            "location": "/01-What-is-Python/01.03-What-is-Anaconda/#anaconda-works-on-macos",
            "text": "If you use MacOS, you probably already have Python installed on you computer without even knowing it. MacOS comes with Python pre-installed. The problem is that the version of Python that comes with MacOS is old and it is locked up behind a set of administrator privaleges. This means you can have trouble using the version of Python that comes on MacOS. Some things will seem to work fine, and then other things won't run at all or you will keep get asked for an adminstrator password over and over. Downloading and installing Anaconda (seperate from the version of Python that came with MacOS) prevents most of these problems.",
            "title": "Anaconda works on MacOS"
        },
        {
            "location": "/01-What-is-Python/01.03-What-is-Anaconda/#anaconda-makes-package-managment-and-virtual-environment-management-easier",
            "text": "Another advantage that downloading Anaconda has over downloading just Python is that package managememt and virtual environment management are a lot easier when you have Anaconda. This might not seem to make a difference right now. If you just downloaded Anaconda for the first time, you are probably not dealing with package management and virtual environments yet, and might not even know what those two things are. After you write a couple Python programs and start downloading a couple extra modules from the internet, dealing with package managment and virtual environments becomes more important.",
            "title": "Anaconda makes package managment and virtual environment management easier"
        },
        {
            "location": "/01-What-is-Python/01.05-Summary/",
            "text": "Summary\n\n\nKey Terms\n\n\nPython\n\n\nPython Interperater\n\n\nPython REPL\n\n\nAnaconda\n\n\nAnaconda Prompt\n\n\nCPython\n\n\nRuntime\n\n\nPackage\n\n\nInstallation",
            "title": "Summary"
        },
        {
            "location": "/01-What-is-Python/01.05-Summary/#summary",
            "text": "",
            "title": "Summary"
        },
        {
            "location": "/01-What-is-Python/01.05-Summary/#key-terms",
            "text": "Python  Python Interperater  Python REPL  Anaconda  Anaconda Prompt  CPython  Runtime  Package  Installation",
            "title": "Key Terms"
        },
        {
            "location": "/01-What-is-Python/01.06-Review-Questions/",
            "text": "Review Questions\n\n\n\n\n\n\nWhat is Python? \n\n\n\n\n\n\nHow is the Python language different than the Python Interperater?\n\n\n\n\n\n\nWhat is the difference between the version of Python at Python.org and the version of Python at Anaconda.com?\n\n\n\n\n\n\nWhy is Python a good computer language to solve problems with?\n\n\n\n\n\n\nWhat does Anaconda come with that Python downloaded from Python.org does not?\n\n\n\n\n\n\nWhat are three advantages of using Anaconda compared to the using the version of Python at Python.org?\n\n\n\n\n\n\nWhy is Python named Python?\n\n\n\n\n\n\nWho created Python and when?\n\n\n\n\n\n\nWhy was Python created? What problem was the creator trying to solve?\n\n\n\n\n\n\nWhat are other computer programming languages besides Python?\n\n\n\n\n\n\nWhat computer programming lanuage did the creator of Python have \"gripes\" about? What were those \"gripes\"?\n\n\n\n\n\n\nWhere is Python used?\n\n\n\n\n\n\nWhich companies use Python?\n\n\n\n\n\n\nWhat are two ways Python is used in scientific research?",
            "title": "Review Questions"
        },
        {
            "location": "/01-What-is-Python/01.06-Review-Questions/#review-questions",
            "text": "What is Python?     How is the Python language different than the Python Interperater?    What is the difference between the version of Python at Python.org and the version of Python at Anaconda.com?    Why is Python a good computer language to solve problems with?    What does Anaconda come with that Python downloaded from Python.org does not?    What are three advantages of using Anaconda compared to the using the version of Python at Python.org?    Why is Python named Python?    Who created Python and when?    Why was Python created? What problem was the creator trying to solve?    What are other computer programming languages besides Python?    What computer programming lanuage did the creator of Python have \"gripes\" about? What were those \"gripes\"?    Where is Python used?    Which companies use Python?    What are two ways Python is used in scientific research?",
            "title": "Review Questions"
        },
        {
            "location": "/02-Installing-Python/02.00-Introduction/",
            "text": "Installing Python\n\n\nIntroduction\n\n\nWelcome to the world of problem solving. In this chapter you will learn how to install the Python on your computer. We will cover Python installation on three major operating systems: Windows 10, Mac OSX and Linux.  \n\n\nBy the end of this chapter, you should be able to:\n\n\n\n\nInstall the Anaconda distribution of Python on your personal computer\n\n\nCheck to see if Python is installed on your computer\n\n\nCheck which version of Python is installed on your computer\n\n\nOpen the Python REPL and run \n>>> import this\n\n\nKnow the difference between Python and Anaconda",
            "title": "Introduction"
        },
        {
            "location": "/02-Installing-Python/02.00-Introduction/#installing-python",
            "text": "",
            "title": "Installing Python"
        },
        {
            "location": "/02-Installing-Python/02.00-Introduction/#introduction",
            "text": "Welcome to the world of problem solving. In this chapter you will learn how to install the Python on your computer. We will cover Python installation on three major operating systems: Windows 10, Mac OSX and Linux.",
            "title": "Introduction"
        },
        {
            "location": "/02-Installing-Python/02.00-Introduction/#by-the-end-of-this-chapter-you-should-be-able-to",
            "text": "Install the Anaconda distribution of Python on your personal computer  Check to see if Python is installed on your computer  Check which version of Python is installed on your computer  Open the Python REPL and run  >>> import this  Know the difference between Python and Anaconda",
            "title": "By the end of this chapter, you should be able to:"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Anaconda-on-Windows/",
            "text": "Installing Anaconda on Windows\n\n\nFor undergraduate engineers, I recommend installing and using the Anaconda distribution of Python.\nIn this section, we will run through installing the Anaconda distribution of Python on Windows 10. I think the Anaconda distribution of Python is the the best option for undergraduate engineers who want to use Python. Anaconda is free (although the download is large which can take time) and can be installed on school or work computers where you don't have administrator access or the ability to install new programs. Anaconda comes bundled with over 100 packages pre-installed including \nnumpy\n, \nmatplotlib\n and \npandas\n. These three packages are very useful for engineers and will be discussed in subsequent chapters.\n\n\nSteps:\n\n\n\n\n\n\nVisit \nAnaconda.com/downloads\n\n\n\n\n\n\nSelect Windows\n\n\n\n\n\n\nDownload the .exe installer\n\n\n\n\n\n\nOpen and run the .exe installer\n\n\n\n\n\n\nOpen the Anaconda prompt and run some Python code\n\n\n\n\n\n\n1. Visit the Anaconda downloads page\n\n\nGo to the following link: \nAnaconda.com/downloads\n\n\nThe Anaconda Downloads Page will look something like this:\n\n\n\n\n2. Select Windows\n\n\nSelect Windows where the three opperating systems are listed.\n\n\n\n\n3. Download\n\n\nDownload the Python 3.6 distribution. Python 2.7 is legacy Python. For undergraduate engineers, select the Python 3.6 version.\n\n\n\n\nYou may be prompted to enter your email. You can still download Anaconda if you click \nNo Thanks\n and don't enter your Work Email address.\n\n\n\n\nThe download is quite large (over 500 MB) so it may take a while for the download to complete.\n\n\n\n\n4. Open and run the installer\n\n\nOnce the download completes, open and run the .exe installer\n\n\n\n\nAt the beginning of the install you will need to click \nNext\n to confirm the installation\n\n\n\n\nand agree to the license\n\n\n\n\nAt the Advanced Installation Options screen, I recommend that you \ndo not check\n \"Add Anaconda to my PATH environment variable\"\n\n\n\n\n5. Open the Conda prompt from the Windows start menu\n\n\nAfter the Anaconda install is complete, you can go to the Windows start menu and select the Anaconda Prompt\n\n\n\n\nThis will open up the \nAnaconda Prompt\n, which is often called the \nconda prompt\n. \nAnaconda\n is the Python distribution and the \nAnaconda Prompt\n is a command line shell (a program where you type in your commands instead of using a mouse). The black screen and text that makes up the \nAnaconda Prompt\n doesn't look like much, but it is really helpful for an undergraduate engineer using Python.\n\n\n\n\nAt the Anaconda prompt, type \npython\n. This will start the Python interperater, also called the Python REPL (for Read Evaluate Print Loop). \n\n\n\n\nNote the Python version. You should see something like \nPython 3.6.1\n.  With the interperter running, you will see a set of greater-than symbols \n>>>\n before the cursor. \n\n\n\n\nNow you can type Python commands. Try typing \nimport this\n. You should see the \nZen of Python\n by Tim Peters\n\n\n\n\nTo close the Python interperater, type \nexit()\n at the interperator prompt \n>>>\n.  Note the double parenthesis at the end of the \nexit()\n command. The \n()\n is needed to stop the Python interperator and get back out to the \nAnaconda Prompt\n.\n\n\nTo close the \nAnaconda Prompt\n, you can either close the window with the mouse, or type \nexit\n, no parenthesis necessary.\n\n\nCongratulations! You installed the Anaconda distribution on your Windows computer!\n\n\nWhen you want to use the Python interperater again, just click the Windows Start button and select the \nAnaconda Prompt\n and type \npython\n.",
            "title": "Installing Anaconda on Windows"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Anaconda-on-Windows/#installing-anaconda-on-windows",
            "text": "For undergraduate engineers, I recommend installing and using the Anaconda distribution of Python.\nIn this section, we will run through installing the Anaconda distribution of Python on Windows 10. I think the Anaconda distribution of Python is the the best option for undergraduate engineers who want to use Python. Anaconda is free (although the download is large which can take time) and can be installed on school or work computers where you don't have administrator access or the ability to install new programs. Anaconda comes bundled with over 100 packages pre-installed including  numpy ,  matplotlib  and  pandas . These three packages are very useful for engineers and will be discussed in subsequent chapters.",
            "title": "Installing Anaconda on Windows"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Anaconda-on-Windows/#steps",
            "text": "Visit  Anaconda.com/downloads    Select Windows    Download the .exe installer    Open and run the .exe installer    Open the Anaconda prompt and run some Python code",
            "title": "Steps:"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Anaconda-on-Windows/#1-visit-the-anaconda-downloads-page",
            "text": "Go to the following link:  Anaconda.com/downloads  The Anaconda Downloads Page will look something like this:",
            "title": "1. Visit the Anaconda downloads page"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Anaconda-on-Windows/#2-select-windows",
            "text": "Select Windows where the three opperating systems are listed.",
            "title": "2. Select Windows"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Anaconda-on-Windows/#3-download",
            "text": "Download the Python 3.6 distribution. Python 2.7 is legacy Python. For undergraduate engineers, select the Python 3.6 version.   You may be prompted to enter your email. You can still download Anaconda if you click  No Thanks  and don't enter your Work Email address.   The download is quite large (over 500 MB) so it may take a while for the download to complete.",
            "title": "3. Download"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Anaconda-on-Windows/#4-open-and-run-the-installer",
            "text": "Once the download completes, open and run the .exe installer   At the beginning of the install you will need to click  Next  to confirm the installation   and agree to the license   At the Advanced Installation Options screen, I recommend that you  do not check  \"Add Anaconda to my PATH environment variable\"",
            "title": "4. Open and run the installer"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Anaconda-on-Windows/#5-open-the-conda-prompt-from-the-windows-start-menu",
            "text": "After the Anaconda install is complete, you can go to the Windows start menu and select the Anaconda Prompt   This will open up the  Anaconda Prompt , which is often called the  conda prompt .  Anaconda  is the Python distribution and the  Anaconda Prompt  is a command line shell (a program where you type in your commands instead of using a mouse). The black screen and text that makes up the  Anaconda Prompt  doesn't look like much, but it is really helpful for an undergraduate engineer using Python.   At the Anaconda prompt, type  python . This will start the Python interperater, also called the Python REPL (for Read Evaluate Print Loop).    Note the Python version. You should see something like  Python 3.6.1 .  With the interperter running, you will see a set of greater-than symbols  >>>  before the cursor.    Now you can type Python commands. Try typing  import this . You should see the  Zen of Python  by Tim Peters   To close the Python interperater, type  exit()  at the interperator prompt  >>> .  Note the double parenthesis at the end of the  exit()  command. The  ()  is needed to stop the Python interperator and get back out to the  Anaconda Prompt .  To close the  Anaconda Prompt , you can either close the window with the mouse, or type  exit , no parenthesis necessary.",
            "title": "5. Open the Conda prompt from the Windows start menu"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Anaconda-on-Windows/#congratulations-you-installed-the-anaconda-distribution-on-your-windows-computer",
            "text": "When you want to use the Python interperater again, just click the Windows Start button and select the  Anaconda Prompt  and type  python .",
            "title": "Congratulations! You installed the Anaconda distribution on your Windows computer!"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Python/",
            "text": "Installing Python from Python.org\n\n\nBelow are the recommended ways to install a new version of Python from Python.org on the three major operating systems: Windows, MacOS and Linux. This book is based on Python version 3.6.  Some of the problems may not work properly on legacy Python (version 2.7).  I recommend using the Anaconda distribution of Python on Windows and MacOS. The installation of Anaconda was detailed in the previous sections of this chapter. \n\n\nInstalling Python on Windows\n\n\nGo to \nhttps://www.python.org/downloads/\n download the latest release. Make sure to select the box [add Python to my path]. \n\n\n\n\nInstalling Python on Mac OSX\n\n\nGo to \nhttps://www.python.org/downloads/mac-osx/\n and download the latest release. \n\n\n\n\nInstalling Python on Linux\n\n\nGo to open a terminal and enter \n$ python\n to see if a version of Python is already installed on the system. If the Python version is 2.7 or below, download the newest release in the apt repositories.\n\n\n$ sudo apt-get Python",
            "title": "Installing Python from Python.org"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Python/#installing-python-from-pythonorg",
            "text": "Below are the recommended ways to install a new version of Python from Python.org on the three major operating systems: Windows, MacOS and Linux. This book is based on Python version 3.6.  Some of the problems may not work properly on legacy Python (version 2.7).  I recommend using the Anaconda distribution of Python on Windows and MacOS. The installation of Anaconda was detailed in the previous sections of this chapter.",
            "title": "Installing Python from Python.org"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Python/#installing-python-on-windows",
            "text": "Go to  https://www.python.org/downloads/  download the latest release. Make sure to select the box [add Python to my path].",
            "title": "Installing Python on Windows"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Python/#installing-python-on-mac-osx",
            "text": "Go to  https://www.python.org/downloads/mac-osx/  and download the latest release.",
            "title": "Installing Python on Mac OSX"
        },
        {
            "location": "/02-Installing-Python/02.02-Installing-Python/#installing-python-on-linux",
            "text": "Go to open a terminal and enter  $ python  to see if a version of Python is already installed on the system. If the Python version is 2.7 or below, download the newest release in the apt repositories.  $ sudo apt-get Python",
            "title": "Installing Python on Linux"
        },
        {
            "location": "/02-Installing-Python/02.03-Installing-Anaconda-on-MacOS/",
            "text": "Installing Anaconda on MacOS\n\n\nIn this section, we will run through installing the Anaconda distribution of Python on MacOS. MacOS comes pre-installed with legacy Python (Version 2.7). You can confirm this legacy version of Python is installed by opening the \nterminal\n. [command]+[Space Bar] type \nterminal\n\n\nIn the MacOS Terminal type:\n\n\n$ python\n\n\n\n\nYou will most likely see version 2.7 is installed. An issue for MacOS users is that the installed system version of Python has a set of permissions that will not always allow Python to run and may not allow Python to install external packages.  It is recommended that the \nAnaconda\n distribution of Python is installed in addition to the system version of Python on MacOS. You will be able to run Python code using the version of the \nAnaconda\n distribution of Python, and be able to install external packages on the the \nAnaconda\n distribution of Python.\n\n\nTo install the \nAnaconda\n distribution of Python follow the steps below:\n\n\nSteps:\n\n\n\n\n\n\nVisit \nAnaconda.com/downloads\n\n\n\n\n\n\nSelect MacOS and Download the .pkg installer\n\n\n\n\n\n\nOpen the .pkg installer\n\n\n\n\n\n\nFollow the installation instructions\n\n\n\n\n\n\nSource your .bash-rc file\n\n\n\n\n\n\nOpen a terminal and type \npython\n and run some code.\n\n\n\n\n\n\n1. Visit the Anaconda downloads page\n\n\nGo to the following link: \nAnaconda.com/downloads\n\n\nThe Anaconda Downloads Page will look something like this:\n\n\n\n\n2. Select MacOS and download the .pkg installer\n\n\nIn the opperating systems box, select [MacOS]. Then download the Python 3.6 distribution .pkg installer by clicking the \n Python 3.6 * Download \n link. Python 2.7 is legacy Python. For undergraduate engineers, select the Python 3.6 version.\n\n\n\n\nYou may be prompted to enter your email. You can still download Anaconda if you click \nNo Thanks\n or [x] and don't enter your Work Email address.\n\n\n\n\n3. Open the .pkg installer\n\n\nUsing the MacOS finder, navigate to the downloads folder and double click the .pkg installer file you just downloaded. It may be helpful to order your downloads by date.\n\n\n4. Follow the installation instructions\n\n\nFollow the installation instructions. It is advised that you install \nAnaconda\n for the current user and that \nAnaconda\n \nis added to your PATH\n\n\n5. Source your .bash-rc file\n\n\nOnce Anaconda is installed, you need to load the changes to your \nPATH\n into the current terminal session.\n\n\nOpen the MacOS Terminal and type:\n\n\n$ cd ~\n$ source .bash-rc\n\n\n\n\n6. Open a terminal and type \npython\n and run some code.\n\n\nOpen the MacOS Terminal and type:\n\n\n$ python\n\n\n\n\nYou should see something like\n\n\nPython 3.6.3 | Anaconda Inc. |\n\n\n\n\nAt the Python REPL (the Python \n>>>\n prompt) try:\n\n\n>>> import this\n\n\n\n\nIf you see the Zen of Python, the installation was successful. Exit out of the Python REPL using \n>>> exit()\n. Make sure to include the double parenthesis \n()\n after the \nexit\n command.",
            "title": "Installing Anaconda on MacOS"
        },
        {
            "location": "/02-Installing-Python/02.03-Installing-Anaconda-on-MacOS/#installing-anaconda-on-macos",
            "text": "In this section, we will run through installing the Anaconda distribution of Python on MacOS. MacOS comes pre-installed with legacy Python (Version 2.7). You can confirm this legacy version of Python is installed by opening the  terminal . [command]+[Space Bar] type  terminal  In the MacOS Terminal type:  $ python  You will most likely see version 2.7 is installed. An issue for MacOS users is that the installed system version of Python has a set of permissions that will not always allow Python to run and may not allow Python to install external packages.  It is recommended that the  Anaconda  distribution of Python is installed in addition to the system version of Python on MacOS. You will be able to run Python code using the version of the  Anaconda  distribution of Python, and be able to install external packages on the the  Anaconda  distribution of Python.  To install the  Anaconda  distribution of Python follow the steps below:",
            "title": "Installing Anaconda on MacOS"
        },
        {
            "location": "/02-Installing-Python/02.03-Installing-Anaconda-on-MacOS/#steps",
            "text": "Visit  Anaconda.com/downloads    Select MacOS and Download the .pkg installer    Open the .pkg installer    Follow the installation instructions    Source your .bash-rc file    Open a terminal and type  python  and run some code.",
            "title": "Steps:"
        },
        {
            "location": "/02-Installing-Python/02.03-Installing-Anaconda-on-MacOS/#1-visit-the-anaconda-downloads-page",
            "text": "Go to the following link:  Anaconda.com/downloads  The Anaconda Downloads Page will look something like this:",
            "title": "1. Visit the Anaconda downloads page"
        },
        {
            "location": "/02-Installing-Python/02.03-Installing-Anaconda-on-MacOS/#2-select-macos-and-download-the-pkg-installer",
            "text": "In the opperating systems box, select [MacOS]. Then download the Python 3.6 distribution .pkg installer by clicking the   Python 3.6 * Download   link. Python 2.7 is legacy Python. For undergraduate engineers, select the Python 3.6 version.   You may be prompted to enter your email. You can still download Anaconda if you click  No Thanks  or [x] and don't enter your Work Email address.",
            "title": "2. Select MacOS and download the .pkg installer"
        },
        {
            "location": "/02-Installing-Python/02.03-Installing-Anaconda-on-MacOS/#3-open-the-pkg-installer",
            "text": "Using the MacOS finder, navigate to the downloads folder and double click the .pkg installer file you just downloaded. It may be helpful to order your downloads by date.",
            "title": "3. Open the .pkg installer"
        },
        {
            "location": "/02-Installing-Python/02.03-Installing-Anaconda-on-MacOS/#4-follow-the-installation-instructions",
            "text": "Follow the installation instructions. It is advised that you install  Anaconda  for the current user and that  Anaconda   is added to your PATH",
            "title": "4. Follow the installation instructions"
        },
        {
            "location": "/02-Installing-Python/02.03-Installing-Anaconda-on-MacOS/#5-source-your-bash-rc-file",
            "text": "Once Anaconda is installed, you need to load the changes to your  PATH  into the current terminal session.  Open the MacOS Terminal and type:  $ cd ~\n$ source .bash-rc",
            "title": "5. Source your .bash-rc file"
        },
        {
            "location": "/02-Installing-Python/02.03-Installing-Anaconda-on-MacOS/#6-open-a-terminal-and-type-python-and-run-some-code",
            "text": "Open the MacOS Terminal and type:  $ python  You should see something like  Python 3.6.3 | Anaconda Inc. |  At the Python REPL (the Python  >>>  prompt) try:  >>> import this  If you see the Zen of Python, the installation was successful. Exit out of the Python REPL using  >>> exit() . Make sure to include the double parenthesis  ()  after the  exit  command.",
            "title": "6. Open a terminal and type python and run some code."
        },
        {
            "location": "/02-Installing-Python/02.04-Installing-Anaconda-on-Linux/",
            "text": "Installing Anaconda on Linux\n\n\nIn this section, we will run through installing the Anaconda distribution of Python on Linux, specifically Ubuntu 16.04. Ubuntu 16.04 comes pre-installed with Python (Version 3.3) and legacy Python (Version 2.7). You can confirm this legacy version of Python is installed by opening up a terminal.\n\n\nIn the terminal type:\n\n\n$ python\n\n\n\n\nYou will most likely see version 2.7 is installed. If you enter:\n\n\n$ python3\n\n\n\n\nYou will most likely see version 3.3 is installed. You can use this version of Python, but each time a new package needs to be downloaded, the command:\n\n\n$ pip3 install\n\n\n\n\nMust be used. In order to follow the examples in the book without installing external packages, the Anaconda distribution of Python can be installed.\n\n\nSteps:\n\n\n\n\n\n\nVisit \nAnaconda.com/downloads\n\n\n\n\n\n\nSelect Linux\n\n\n\n\n\n\nCopy the bash (.sh file) installer link\n\n\n\n\n\n\nUse \nwget\n to download the bash installer\n\n\n\n\n\n\nRun the bash script to install \nAnaconda3\n\n\n\n\n\n\nsource\n the \n.bash-rc\n file to add Anaconda to your \nPATH\n\n\n\n\n\n\nStart the Python REPL\n\n\n\n\n\n\n1. Visit the Anaconda downloads page\n\n\nGo to the following link: \nAnaconda.com/downloads\n\n\nThe Anaconda Downloads Page will look something like this:\n\n\n\n\n2. Select Linux\n\n\nOn the downloads page, select the Linux opperating system\n\n\n\n\n3. Copy the bash (.sh file) installer link\n\n\nIn the \nPython 3.6 Version* \n box, right-click on the [64-Bit(x86) Installer] link. Select [copy link address].\n\n\n\n\n4. Use \nwget\n to download the bash installer\n\n\nNow that the bash installer (.sh file) link is stored on the clipboard, we will use \nwget\n to download the installer script. In a terminal, \ncd\n into the home directory and make a new directory called \ntmp\n. \ncd\n into \ntmp\n and use \nwget\n to download the installer. Although the installer is a bash script, it is still quite large and the download will not be immediate\n\n\n$ cd ~\n$ mkdir tmp\n$ cd tmp\n$ wget https://repo.anaconda.com/archive/Anaconda3-5.2.0-Linux-x86_64.sh \n\n\n\n\n5. Run the bash script to install \nAnaconda3\n\n\nWith the bash installer script downloaded, we can run the script to install \nAnaconda3\n. Ensure you are in the directory where the installer script downloaded:\n\n\n$ ls\nAnaconda3-5.2.0-Linux-x86_64.sh\n\n\n\n\nRun the installer script with bash\n\n\n$ bash Anaconda3-5.2.0-Linux-x86_64.sh\n\n\n\n\nAccept the licence agreement and  allow Anaconda to be added to your \nPATH\n. By adding Anaconda to your \nPATH\n the Anaconda distribution of Python will be called when you type \n$ python\n.\n\n\n6. \nsource\n the \n.bash-rc\n file to add Anaconda to your \nPATH\n\n\nNow that \nAnaconda3\n is installed and \nAnaconda3\n is added to our \nPATH\n, \nsource\n the \n.bashrc\n file to load the new \nPATH\n environmnet variable into the current terminal session. Note the \n.bashrc\n file is in the home directory. You can see it with \nls -a\n.\n\n\n$ cd ~\n$ source .bashrc\n\n\n\n\n7. Start the Python REPL\n\n\nTo verify the installation is complete, try to open Python from the command line:\n\n\n$ python\n\nPython 3.6.5 |Anaconda, Inc.| (default, Mar 29 2018, 18:21:58)\n[GCC 7.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n\n\n\n\nIf you see Python 3.6.5 from Anaconda listed, your installation works. To exit the Python REPL, type:\n\n\n>>> exit()",
            "title": "Installing Anaconda on Linux"
        },
        {
            "location": "/02-Installing-Python/02.04-Installing-Anaconda-on-Linux/#installing-anaconda-on-linux",
            "text": "In this section, we will run through installing the Anaconda distribution of Python on Linux, specifically Ubuntu 16.04. Ubuntu 16.04 comes pre-installed with Python (Version 3.3) and legacy Python (Version 2.7). You can confirm this legacy version of Python is installed by opening up a terminal.  In the terminal type:  $ python  You will most likely see version 2.7 is installed. If you enter:  $ python3  You will most likely see version 3.3 is installed. You can use this version of Python, but each time a new package needs to be downloaded, the command:  $ pip3 install  Must be used. In order to follow the examples in the book without installing external packages, the Anaconda distribution of Python can be installed.",
            "title": "Installing Anaconda on Linux"
        },
        {
            "location": "/02-Installing-Python/02.04-Installing-Anaconda-on-Linux/#steps",
            "text": "Visit  Anaconda.com/downloads    Select Linux    Copy the bash (.sh file) installer link    Use  wget  to download the bash installer    Run the bash script to install  Anaconda3    source  the  .bash-rc  file to add Anaconda to your  PATH    Start the Python REPL",
            "title": "Steps:"
        },
        {
            "location": "/02-Installing-Python/02.04-Installing-Anaconda-on-Linux/#1-visit-the-anaconda-downloads-page",
            "text": "Go to the following link:  Anaconda.com/downloads  The Anaconda Downloads Page will look something like this:",
            "title": "1. Visit the Anaconda downloads page"
        },
        {
            "location": "/02-Installing-Python/02.04-Installing-Anaconda-on-Linux/#2-select-linux",
            "text": "On the downloads page, select the Linux opperating system",
            "title": "2. Select Linux"
        },
        {
            "location": "/02-Installing-Python/02.04-Installing-Anaconda-on-Linux/#3-copy-the-bash-sh-file-installer-link",
            "text": "In the  Python 3.6 Version*   box, right-click on the [64-Bit(x86) Installer] link. Select [copy link address].",
            "title": "3. Copy the bash (.sh file) installer link"
        },
        {
            "location": "/02-Installing-Python/02.04-Installing-Anaconda-on-Linux/#4-use-wget-to-download-the-bash-installer",
            "text": "Now that the bash installer (.sh file) link is stored on the clipboard, we will use  wget  to download the installer script. In a terminal,  cd  into the home directory and make a new directory called  tmp .  cd  into  tmp  and use  wget  to download the installer. Although the installer is a bash script, it is still quite large and the download will not be immediate  $ cd ~\n$ mkdir tmp\n$ cd tmp\n$ wget https://repo.anaconda.com/archive/Anaconda3-5.2.0-Linux-x86_64.sh",
            "title": "4. Use wget to download the bash installer"
        },
        {
            "location": "/02-Installing-Python/02.04-Installing-Anaconda-on-Linux/#5-run-the-bash-script-to-install-anaconda3",
            "text": "With the bash installer script downloaded, we can run the script to install  Anaconda3 . Ensure you are in the directory where the installer script downloaded:  $ ls\nAnaconda3-5.2.0-Linux-x86_64.sh  Run the installer script with bash  $ bash Anaconda3-5.2.0-Linux-x86_64.sh  Accept the licence agreement and  allow Anaconda to be added to your  PATH . By adding Anaconda to your  PATH  the Anaconda distribution of Python will be called when you type  $ python .",
            "title": "5. Run the bash script to install Anaconda3"
        },
        {
            "location": "/02-Installing-Python/02.04-Installing-Anaconda-on-Linux/#6-source-the-bash-rc-file-to-add-anaconda-to-your-path",
            "text": "Now that  Anaconda3  is installed and  Anaconda3  is added to our  PATH ,  source  the  .bashrc  file to load the new  PATH  environmnet variable into the current terminal session. Note the  .bashrc  file is in the home directory. You can see it with  ls -a .  $ cd ~\n$ source .bashrc",
            "title": "6. source the .bash-rc file to add Anaconda to your PATH"
        },
        {
            "location": "/02-Installing-Python/02.04-Installing-Anaconda-on-Linux/#7-start-the-python-repl",
            "text": "To verify the installation is complete, try to open Python from the command line:  $ python\n\nPython 3.6.5 |Anaconda, Inc.| (default, Mar 29 2018, 18:21:58)\n[GCC 7.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>  If you see Python 3.6.5 from Anaconda listed, your installation works. To exit the Python REPL, type:  >>> exit()",
            "title": "7. Start the Python REPL"
        },
        {
            "location": "/02-Installing-Python/02.05-Summary/",
            "text": "Summary\n\n\nIn this chapter you learned how to install Anaconda on your computer\n\n\nKey Terms\n\n\nAnaconda\n\n\nDownload\n\n\nInstall\n\n\nPython\n\n\nOpperating System\n\n\nWindows\n\n\nMacOS\n\n\nLinux",
            "title": "Summary"
        },
        {
            "location": "/02-Installing-Python/02.05-Summary/#summary",
            "text": "In this chapter you learned how to install Anaconda on your computer",
            "title": "Summary"
        },
        {
            "location": "/02-Installing-Python/02.05-Summary/#key-terms",
            "text": "Anaconda  Download  Install  Python  Opperating System  Windows  MacOS  Linux",
            "title": "Key Terms"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.00-Introduction/",
            "text": "Jupyter Notebooks\n\n\nIntroduction\n\n\nIn this chapter you will learn:\n\n\n\n\n\n\nWhat a Jupyter Notebook is\n\n\n\n\n\n\nHow to Open a Jupyter Notebook\n\n\n\n\n\n\nHow to write code in a Jupyter Notebook\n\n\n\n\n\n\nHow to run code in a Jupyter Notebook\n\n\n\n\n\n\nHow to save and close a Jupyter Notebook",
            "title": "Introduction"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.00-Introduction/#jupyter-notebooks",
            "text": "",
            "title": "Jupyter Notebooks"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.00-Introduction/#introduction",
            "text": "In this chapter you will learn:    What a Jupyter Notebook is    How to Open a Jupyter Notebook    How to write code in a Jupyter Notebook    How to run code in a Jupyter Notebook    How to save and close a Jupyter Notebook",
            "title": "Introduction"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.01-What-is-a-Jupyter-Notebook/",
            "text": "What is a Jupyter Notebook?\n\n\nA \nJupyter Notebook\n is a type of documenent or electronic file which contains both programming code and text descriptions. Jupyter Notebooks can also contain embedded charts, plots, images, videos and links. Although \nJupyter Notebooks\n can contain many different types of programming code, a lot of Jupyter Notebooks contain Python code. The same type of Python code found in a .py file. The text desciption sections of Jupyter Notebooks contain explanations and clarifications of the programming code in the \nmarkdown\n format. \nMarkdown\n files have the extension \n.md\n. Markdown sections of a jupyter notebook can include formatting to make text bold, italic, form tables and lists, show code listings and images.\n\n\nOne way to think of a Jupyter Notebook is the combination of a \n.py\n file, a Python file, with a \n.md\n file, a markdown file. The Juptyter Notebook file extension is \n.ipynb\n which stands for IPython Notebook. Jupyter notebooks still use the .ipynb extension even if they contain code from a different programming language such as R.\n\n\nJupyter Notebooks function sort of half way between the Python REPL and a Python module .py file. In the Python REPL, only one command can be typed at a time and only one line of output is shown at a time. In a \n.py\n file, the entire file is run at one time and the output of the entire file is produced at once. In a jupyter notebook, chucks of code 1 line to many lines long can be run without running all of the code in the jupyter notebook.\n\n\nPython .py files and markdown .md files are typically edited in a text editor like notepad. Jupyter notebooks run inside a web browser like Google Chrome. Regular .py files only contain Python commands and comments. Jupyter notebooks contain two types of cells: code cells and markdown cells. Lines of Python code are run in code cells. Markdown cells contain comment like descriptions to describe code cells. Out put from the code is also shown in the jupyter notebook. Charts, plots, commadline output and images can all be shown.",
            "title": "What is a Jupyter Notebook?"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.01-What-is-a-Jupyter-Notebook/#what-is-a-jupyter-notebook",
            "text": "A  Jupyter Notebook  is a type of documenent or electronic file which contains both programming code and text descriptions. Jupyter Notebooks can also contain embedded charts, plots, images, videos and links. Although  Jupyter Notebooks  can contain many different types of programming code, a lot of Jupyter Notebooks contain Python code. The same type of Python code found in a .py file. The text desciption sections of Jupyter Notebooks contain explanations and clarifications of the programming code in the  markdown  format.  Markdown  files have the extension  .md . Markdown sections of a jupyter notebook can include formatting to make text bold, italic, form tables and lists, show code listings and images.  One way to think of a Jupyter Notebook is the combination of a  .py  file, a Python file, with a  .md  file, a markdown file. The Juptyter Notebook file extension is  .ipynb  which stands for IPython Notebook. Jupyter notebooks still use the .ipynb extension even if they contain code from a different programming language such as R.  Jupyter Notebooks function sort of half way between the Python REPL and a Python module .py file. In the Python REPL, only one command can be typed at a time and only one line of output is shown at a time. In a  .py  file, the entire file is run at one time and the output of the entire file is produced at once. In a jupyter notebook, chucks of code 1 line to many lines long can be run without running all of the code in the jupyter notebook.  Python .py files and markdown .md files are typically edited in a text editor like notepad. Jupyter notebooks run inside a web browser like Google Chrome. Regular .py files only contain Python commands and comments. Jupyter notebooks contain two types of cells: code cells and markdown cells. Lines of Python code are run in code cells. Markdown cells contain comment like descriptions to describe code cells. Out put from the code is also shown in the jupyter notebook. Charts, plots, commadline output and images can all be shown.",
            "title": "What is a Jupyter Notebook?"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.02-Why-Jupyter-Notebooks/",
            "text": "Why Jupyter Notebooks?\n\n\nThere is a vast array of editors and IDE's (Integrated Development Environments) which can edit and run Python code. Why should engineers learn to use Jupyter Notebooks? \n\n\nBelow is a table of simple text editors and Integrated Development Environments (IDE's) that can edit and run Python code:\n\n\n\n\n\n\n\n\nSimple Text Editors\n\n\n\n\n\n\n\n\n\n\nNotepad\n\n\n\n\n\n\nIdle\n\n\n\n\n\n\nVim\n\n\n\n\n\n\nSublime Text\n\n\n\n\n\n\nAtom\n\n\n\n\n\n\nNano\n\n\n\n\n\n\n\n\nAn example of the notepad text editor is below:\n\n\n\n\n\n\n\n\n\n\nIDE's\n\n\n\n\n\n\n\n\n\n\nPyCharm\n\n\n\n\n\n\nVisual Studio Code\n\n\n\n\n\n\nSpyder\n\n\n\n\n\n\nThoney\n\n\n\n\n\n\n\n\nAn example of the PyCharm IDE is shown below:\n\n\n\n\nA Jupyter Notebook is neigher a simple text editor nor a full-blown IDE. Jupyter Notebooks provide a quick and streamlined way for engineers to prototype code and quickly share code.  Jupyter notebooks also provide a way for engineers to share solutions with team members, supervisors and customers.\n\n\n\n\nIn a way, Jupyter Notebooks strike a balance between Simple Editors, which are fast to start and simple and easy to manipulate, and IDE's which tend to start slower and tend to be feature rich and complex. Simple text editors typically can only edit code, a simple text editor usually can not run code. A full IDE can edit code, run code, debug code, provide syntax highlighting and context help.\nIn the context of problem solving Jupyter Notebooks make a lot of sense. They are quick to spin up and quick to provide output. Data exploration, data cleaning, and plot building can be accomplished in a Jupyter Notebook easier and quicker than in a text editor or an IDE. \n\n\nIn the context of sharing solutions to problems Jupyter Notebooks also make a lot of sense. Markdown cells can render text different sizes, bold and itallic. Tables and images can be insterted and plots and code output are all shown in the notebook.",
            "title": "Why Jupyter Notebooks?"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.02-Why-Jupyter-Notebooks/#why-jupyter-notebooks",
            "text": "There is a vast array of editors and IDE's (Integrated Development Environments) which can edit and run Python code. Why should engineers learn to use Jupyter Notebooks?   Below is a table of simple text editors and Integrated Development Environments (IDE's) that can edit and run Python code:     Simple Text Editors      Notepad    Idle    Vim    Sublime Text    Atom    Nano     An example of the notepad text editor is below:      IDE's      PyCharm    Visual Studio Code    Spyder    Thoney     An example of the PyCharm IDE is shown below:   A Jupyter Notebook is neigher a simple text editor nor a full-blown IDE. Jupyter Notebooks provide a quick and streamlined way for engineers to prototype code and quickly share code.  Jupyter notebooks also provide a way for engineers to share solutions with team members, supervisors and customers.   In a way, Jupyter Notebooks strike a balance between Simple Editors, which are fast to start and simple and easy to manipulate, and IDE's which tend to start slower and tend to be feature rich and complex. Simple text editors typically can only edit code, a simple text editor usually can not run code. A full IDE can edit code, run code, debug code, provide syntax highlighting and context help.\nIn the context of problem solving Jupyter Notebooks make a lot of sense. They are quick to spin up and quick to provide output. Data exploration, data cleaning, and plot building can be accomplished in a Jupyter Notebook easier and quicker than in a text editor or an IDE.   In the context of sharing solutions to problems Jupyter Notebooks also make a lot of sense. Markdown cells can render text different sizes, bold and itallic. Tables and images can be insterted and plots and code output are all shown in the notebook.",
            "title": "Why Jupyter Notebooks?"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.03-Installing-Juypter/",
            "text": "Installing Juypter\n\n\nTo install \nJupyter Notebooks\n, the simplest way is to use the \nAnaconda\n distribution of Python. The \nAnaconda\n distribution of Python has \nJupyter Notebooks\n pre-installed and no further steps are necessary.\n\n\nInstalling Jupyter on Windows\n\n\nTo install jupyter on Windows, open the \nAnaconda Prompt\n and type:\n\n\n> conda install jupyter\n\n\n\n\nType \ny\n for yes when prompted.\n\n\nAlternativly, open a \ncommand prompt\n and type:\n\n\n> pip install jupyter\n\n\n\n\nInstalling Jupyter on Mac OSX\n\n\nTo install jupyter on Mac OSX, open the OSX terminal and type:\n\n\n$ conda install jupyter\n\n\n\n\nType \ny\n for yes when prompted.\n\n\nIf \nconda\n is not installed, the Anaconda Distribution of Python can be installed, which should install \nconda\n for use in the MacOS terminal.\n\n\nAlternativly Jupyter Notebooks can be installed on using the MacOS termal and typing:\n\n\n$ pip install jupyter\n\n\n\n\nor\n\n\n$ pip3 install jupyter\n\n\n\n\nNote there are problems using the system version of Python on MacOS. Packages may not install on the system version of Python. And packages which do install on the system version of Python may not run correctly. It is therefore recommended that MacOS users install the Anaconda distribution of Python or use \nhomebrew\n to install a seperate non-system version of Python from the command line with:\n\n\n$ brew install Python\n\n\n\n\nInstalling Jupyter on Ubuntu Linux\n\n\nTo install jupyter on Ubuntu Linux, open a terminal and type:\n\n\n$ conda install jupyter\n\n\n\n\nType \ny\n for yes when prompted.\n\n\nAlternativly, one can use:\n\n\n$ pip install jupyter",
            "title": "Installing Juypter"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.03-Installing-Juypter/#installing-juypter",
            "text": "To install  Jupyter Notebooks , the simplest way is to use the  Anaconda  distribution of Python. The  Anaconda  distribution of Python has  Jupyter Notebooks  pre-installed and no further steps are necessary.",
            "title": "Installing Juypter"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.03-Installing-Juypter/#installing-jupyter-on-windows",
            "text": "To install jupyter on Windows, open the  Anaconda Prompt  and type:  > conda install jupyter  Type  y  for yes when prompted.  Alternativly, open a  command prompt  and type:  > pip install jupyter",
            "title": "Installing Jupyter on Windows"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.03-Installing-Juypter/#installing-jupyter-on-mac-osx",
            "text": "To install jupyter on Mac OSX, open the OSX terminal and type:  $ conda install jupyter  Type  y  for yes when prompted.  If  conda  is not installed, the Anaconda Distribution of Python can be installed, which should install  conda  for use in the MacOS terminal.  Alternativly Jupyter Notebooks can be installed on using the MacOS termal and typing:  $ pip install jupyter  or  $ pip3 install jupyter  Note there are problems using the system version of Python on MacOS. Packages may not install on the system version of Python. And packages which do install on the system version of Python may not run correctly. It is therefore recommended that MacOS users install the Anaconda distribution of Python or use  homebrew  to install a seperate non-system version of Python from the command line with:  $ brew install Python",
            "title": "Installing Jupyter on Mac OSX"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.03-Installing-Juypter/#installing-jupyter-on-ubuntu-linux",
            "text": "To install jupyter on Ubuntu Linux, open a terminal and type:  $ conda install jupyter  Type  y  for yes when prompted.  Alternativly, one can use:  $ pip install jupyter",
            "title": "Installing Jupyter on Ubuntu Linux"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.04-Opening-a-Jupyter-Notebook/",
            "text": "Opening a Jupyter Notebook\n\n\nIn this section, we will run through how to open a \njupyter notebook\n on Windows 10 and MacOS.  \nJupyter notebooks\n are one way problem solvers can write and execute \nPython\n code. \nJupyter notebooks\n contain \nPython\n code, the output of that code produces when it is run and markdown cells to explain what the code means. On Windows 10, a \njupyter notebook\n can be started from the \nAnaconda Prompt\n, the Windows start menu and the \nAnaconda Navigator\n.\n\n\n3 ways to open a \njupyter notebook\n:\n\n\n\n\n\n\nWindows Start Menu\n\n\n\n\n\n\nAnaconda Prompt\n\n\n\n\n\n\nAnaconda Navigator\n\n\n\n\n\n\nWindows Start Menu\n\n\nA simple way to open a \njupyter notebook\n is to use the Windows start menu. \n\n\nOpen the Windows start menu and select \n[Anaconda3(64 bit)]\n --> \n[Jupyter Notebook]\n\n\n\n\nThis will open the \njupyter file browser\n in a web browser tab. \n\n\nIn the upper right select \n[New]\n --> \n[Python 3]\n\n\n\n\nA new \nnotebook\n will open as a new tab in your web browser\n\n\n\n\nTo rename the \njupyter notebook\n, click the file name at the top of the page to the right of the jupyter icon.\n\n\n\n\nThis will open a dialog box where the new name can be typed.\n\n\n\n\nTry typing this in the first cell in the \nnotebook\n to the right of the \nIn [ ]:\n prompt\n\n\nimport  this\n\n\n\n\nThen click the run button in the middle of the menu at the top of the notebook\n\n\n\n\n2. \nAnaconda Prompt\n\n\nAnother method to start a new \njupyter notebook\n is to use the \nAnaconda Prompt\n.\n\n\nGo to the Windows start menu and select \n[Anaconda Prompt]\n under \n[Anaconda3]\n.\n\n\n\n\nIf you don't see the \nAnaconda Prompt\n in the Windows Start Menu, then you need to install \nAnaconda\n. Download \nAnaconda\n at the following link: \nAnaconda.com/downloads\n\n\nThe \nAnaconda Prompt\n window should look something like:\n\n\n\n\nAt the \nAnaconda Prompt\n type:\n\n\n> jupyter notebook\n\n\n\n\nThis will start the \njupyter notebook\n. The output in the terminal will look something like below:\n\n\nCopy/paste this URL into your browser when you connect for the first time,\n    to login with a token:\n        http://localhost:8888/?token=6bdef677d3503fbb23e1b4fa0c802ee7c20bdcfd4d9b9951\n[I 16:14:12.661 NotebookApp] Accepting one-time-token-authenticated connection from ::1\n\n\n\n\nA web browser should open and you should be able to see the \njupyter file browser\n:\n\n\n\n\nIn the upper right select \n[New]\n --> \n[Python 3]\n\n\nYou will see a new tab open in your web browser. This new page is a \njupyter notebook\n.\n\n\n\n\n3. \nAnaconda Navigator\n\n\nOne additional way to open a \njupyter notebook\n is by using \nAnaconda Navigator\n. You can open \nAnaconda Navigator\n using the Windows start menu and select \n[Anaconda3(64-bit)]\n --> [Anaconda Navigator]\n\n\n\n\nThis will open the \nAnaconda Navigator\n.  In the middle of the page, in the \njupyter notebook\n tile, click \n[Launch]\n\n\n\n\nThis will open the \njupyter file browser\n in a web browser tab. \n\n\nIn the upper right select \n[New]\n --> \n[Python 3]\n\n\n\n\nA new \nnotebook\n will open as a new tab in your web browser\n\n\n\n\nOpening a Jupyter Notebook on MacOS\n\n\nTo open a jupyter notebook on MacOS, open a terminal and type:\n\n\n$ jupyter notebook\n\n\n\n\nIf a web browser does not open, jupyter may not be installed. Refer to the previous section on how to install jupyter on MacOS. There also may be an issue using the system version of Python. A solution is to install the Anaconda distribution of Python or use homebrew to install Python.\n\n\nOpening a Jupyter Notebook on Linux\n\n\nTo open a jupyter notebook on Linux, open a termial and type:\n\n\n$ jupyter notebook\n\n\n\n\nIf a web browser does not open, copy the url listed in the termal when Jupyter starts into a browser window.",
            "title": "Opening a Jupyter Notebook"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.04-Opening-a-Jupyter-Notebook/#opening-a-jupyter-notebook",
            "text": "In this section, we will run through how to open a  jupyter notebook  on Windows 10 and MacOS.   Jupyter notebooks  are one way problem solvers can write and execute  Python  code.  Jupyter notebooks  contain  Python  code, the output of that code produces when it is run and markdown cells to explain what the code means. On Windows 10, a  jupyter notebook  can be started from the  Anaconda Prompt , the Windows start menu and the  Anaconda Navigator .",
            "title": "Opening a Jupyter Notebook"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.04-Opening-a-Jupyter-Notebook/#3-ways-to-open-a-jupyter-notebook",
            "text": "Windows Start Menu    Anaconda Prompt    Anaconda Navigator",
            "title": "3 ways to open a jupyter notebook:"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.04-Opening-a-Jupyter-Notebook/#windows-start-menu",
            "text": "A simple way to open a  jupyter notebook  is to use the Windows start menu.   Open the Windows start menu and select  [Anaconda3(64 bit)]  -->  [Jupyter Notebook]   This will open the  jupyter file browser  in a web browser tab.   In the upper right select  [New]  -->  [Python 3]   A new  notebook  will open as a new tab in your web browser   To rename the  jupyter notebook , click the file name at the top of the page to the right of the jupyter icon.   This will open a dialog box where the new name can be typed.   Try typing this in the first cell in the  notebook  to the right of the  In [ ]:  prompt  import  this  Then click the run button in the middle of the menu at the top of the notebook",
            "title": "Windows Start Menu"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.04-Opening-a-Jupyter-Notebook/#2-anaconda-prompt",
            "text": "Another method to start a new  jupyter notebook  is to use the  Anaconda Prompt .  Go to the Windows start menu and select  [Anaconda Prompt]  under  [Anaconda3] .   If you don't see the  Anaconda Prompt  in the Windows Start Menu, then you need to install  Anaconda . Download  Anaconda  at the following link:  Anaconda.com/downloads  The  Anaconda Prompt  window should look something like:   At the  Anaconda Prompt  type:  > jupyter notebook  This will start the  jupyter notebook . The output in the terminal will look something like below:  Copy/paste this URL into your browser when you connect for the first time,\n    to login with a token:\n        http://localhost:8888/?token=6bdef677d3503fbb23e1b4fa0c802ee7c20bdcfd4d9b9951\n[I 16:14:12.661 NotebookApp] Accepting one-time-token-authenticated connection from ::1  A web browser should open and you should be able to see the  jupyter file browser :   In the upper right select  [New]  -->  [Python 3]  You will see a new tab open in your web browser. This new page is a  jupyter notebook .",
            "title": "2. Anaconda Prompt"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.04-Opening-a-Jupyter-Notebook/#3-anaconda-navigator",
            "text": "One additional way to open a  jupyter notebook  is by using  Anaconda Navigator . You can open  Anaconda Navigator  using the Windows start menu and select  [Anaconda3(64-bit)]  --> [Anaconda Navigator]   This will open the  Anaconda Navigator .  In the middle of the page, in the  jupyter notebook  tile, click  [Launch]   This will open the  jupyter file browser  in a web browser tab.   In the upper right select  [New]  -->  [Python 3]   A new  notebook  will open as a new tab in your web browser",
            "title": "3. Anaconda Navigator"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.04-Opening-a-Jupyter-Notebook/#opening-a-jupyter-notebook-on-macos",
            "text": "To open a jupyter notebook on MacOS, open a terminal and type:  $ jupyter notebook  If a web browser does not open, jupyter may not be installed. Refer to the previous section on how to install jupyter on MacOS. There also may be an issue using the system version of Python. A solution is to install the Anaconda distribution of Python or use homebrew to install Python.",
            "title": "Opening a Jupyter Notebook on MacOS"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.04-Opening-a-Jupyter-Notebook/#opening-a-jupyter-notebook-on-linux",
            "text": "To open a jupyter notebook on Linux, open a termial and type:  $ jupyter notebook  If a web browser does not open, copy the url listed in the termal when Jupyter starts into a browser window.",
            "title": "Opening a Jupyter Notebook on Linux"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/",
            "text": "The Jupyter Notebook Interface\n\n\nWhen a new notebook opens, you will see the Jupter Notebook interface. Accross the top of the notebook will the the Jupyter icon and the Notebook name. You can click in the notebook name field and change the name of the notebook. Note that the file extension \n.ipynb\n is not printed in the file name field, but if you look in the Home tab, you will see that the notebook is saved with the \n.ipynb\n extension.\n\n\nMenus and Buttons\n\n\nA jupyter notebook is comprised of a bunch of cells which are arrayed one after another in boxes below the menu items and buttons. There are two main types of cells: Markdown cells and Code cells.\n\n\nCode Cells\n\n\nIn code cells you can write Python Code, then execute the code and see the resulting output. An example of a code cell is shown below. Note that the code cell has an the text \nIn[ ]\n to the left of it. In the top menu, the cell type drop down will read [Code] when you are editing a code cell.\n\n\nTo run the code in a code cell push the [Run] button or type [Shift]+[Enter]. Hitting [Enter] when inside a code cell will only bring the curor down to a new line.\n\n\nMarkdown Cells\n\n\nIn markdown cells you can type in markdown which will be richly formatted when \"run\". Markdown cells are used for documentation and explaining your code. An example of a markdown cell is shown below. The text in a markdown cell is not executed like code cells are executed. In the top menu, the cell type drop down will read [Markdown] when you are editing a markdown cell. Markdown cells can be formatted with a few special characters. To \"run\" a markdown cell push the [Run] button or type [Shift]+[Enter]. Hitting [Enter] when inside a markdown cell will only bring the curor down to a new line.\n\n\nMarkdown syntax includes the availability of writting headings, bold, itallics, code blocks and tables.\n\n\nHeadings\n\n\n# H1 Heading\n\n\nH1 Heading\n\n\n## H2 Heading\n\n\nH2 Heading\n\n\n### H3 Heading\n\n\nH3 Heading\n\n\n#### H4 Heading\n\n\nH4 Heading\n\n\n\n\nBold and Itallic Text\n\n\nBold text\n and \nitallic text\n can be written in markdown using the double asterisk \n**\n and the underscore \n_\n\n\nSurround bold text with double asterisks \n**\n. Make sure two asterists is used (one asterix will produce itallics).\n\n\n**Bold Text**\n\n\n\n\nWill result in:\n\n\nBold Text\n\n\nSurround itallic text with the underscore \n_\n character:\n\n\n_itallic text_\n\n\n\n\nWill result in\n\n\nitallic text\n\n\nCode Blocks\n\n\nInline code blocks (use the ` left qutoe character, the character to the left of one, and above tab on most keyboards)\n\n\n``` \nInline code blocks\n ```\n\n\n\n\n```\n\n\nSeperated code blocks\n\n\n```\n\n\nSeperated code blocks\n\n\n\n\nTables\n\n\nTables can be formated in markdown cells with the pipe character  \n|\n. The table header row needs to have \n|\n where you want vertical lines. The second line of a table needs the structure \n| --- | --- |\n. All subsequent rows of the table need pipes between cells.\n\n\n| Col 1 Header | Col 2 Header |\n| --- | --- |\n| row 1 col 1 | row 1 col 2 |\n| row 2 col 1 | row 2 col 2|\n\n\n\n\nwill result in:\n\n\n\n\n\n\n\n\nCol 1 Header\n\n\nCol 2 Header\n\n\n\n\n\n\n\n\n\n\nrow 1 col 1\n\n\nrow 1 col 2\n\n\n\n\n\n\nrow 2 col 1\n\n\nrow 2 col 2\n\n\n\n\n\n\n### Saving Jupyter Notebooks in Other Formats\n\n\n\n\n\n\n\n\n\n\nJupyter notebooks can be saved in other formats besides the native \n.ipynb\n format. These formats can be acceed on the [File] --> [Download As] menu.\n\n\n\n\nThe available file types are:\n\n\n\n\nNotebook (.ipynb) - The native jupyter notebook format\n\n\nPython (.py) - The native Python code file format.\n\n\nHTML (.html) - A web page\n\n\nMarkdown (.md) - Markdown format\n\n\nreST (.rst) - Restructured text format\n\n\nLaTeX (.tex) - LaTeX format\n\n\nPDF via LaTeX - a pdf exported from LeTeX, requires a converter\n\n\n\n\nWhen a Notebook is saved as a \n.py\n file, any text in Mardown Cells are converted to commments, and any code cells are kept as Python code. \n\n\n\n\nThe \n.py\n file after this notebook is \nDownloaded as\n a \nPython(.py)\n looks like:",
            "title": "The Jupyter Notebook Interface"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#the-jupyter-notebook-interface",
            "text": "When a new notebook opens, you will see the Jupter Notebook interface. Accross the top of the notebook will the the Jupyter icon and the Notebook name. You can click in the notebook name field and change the name of the notebook. Note that the file extension  .ipynb  is not printed in the file name field, but if you look in the Home tab, you will see that the notebook is saved with the  .ipynb  extension.",
            "title": "The Jupyter Notebook Interface"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#menus-and-buttons",
            "text": "A jupyter notebook is comprised of a bunch of cells which are arrayed one after another in boxes below the menu items and buttons. There are two main types of cells: Markdown cells and Code cells.",
            "title": "Menus and Buttons"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#code-cells",
            "text": "In code cells you can write Python Code, then execute the code and see the resulting output. An example of a code cell is shown below. Note that the code cell has an the text  In[ ]  to the left of it. In the top menu, the cell type drop down will read [Code] when you are editing a code cell.  To run the code in a code cell push the [Run] button or type [Shift]+[Enter]. Hitting [Enter] when inside a code cell will only bring the curor down to a new line.",
            "title": "Code Cells"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#markdown-cells",
            "text": "In markdown cells you can type in markdown which will be richly formatted when \"run\". Markdown cells are used for documentation and explaining your code. An example of a markdown cell is shown below. The text in a markdown cell is not executed like code cells are executed. In the top menu, the cell type drop down will read [Markdown] when you are editing a markdown cell. Markdown cells can be formatted with a few special characters. To \"run\" a markdown cell push the [Run] button or type [Shift]+[Enter]. Hitting [Enter] when inside a markdown cell will only bring the curor down to a new line.  Markdown syntax includes the availability of writting headings, bold, itallics, code blocks and tables.",
            "title": "Markdown Cells"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#headings",
            "text": "# H1 Heading",
            "title": "Headings"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#h1-heading",
            "text": "## H2 Heading",
            "title": "H1 Heading"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#h2-heading",
            "text": "### H3 Heading",
            "title": "H2 Heading"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#h3-heading",
            "text": "#### H4 Heading",
            "title": "H3 Heading"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#h4-heading",
            "text": "",
            "title": "H4 Heading"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#bold-and-itallic-text",
            "text": "Bold text  and  itallic text  can be written in markdown using the double asterisk  **  and the underscore  _  Surround bold text with double asterisks  ** . Make sure two asterists is used (one asterix will produce itallics).  **Bold Text**  Will result in:  Bold Text  Surround itallic text with the underscore  _  character:  _itallic text_  Will result in  itallic text",
            "title": "Bold and Itallic Text"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#code-blocks",
            "text": "Inline code blocks (use the ` left qutoe character, the character to the left of one, and above tab on most keyboards)  ```  Inline code blocks  ```   ```  Seperated code blocks  ```  Seperated code blocks",
            "title": "Code Blocks"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.05-The-Jupyter-Notebook-Interface/#tables",
            "text": "Tables can be formated in markdown cells with the pipe character   | . The table header row needs to have  |  where you want vertical lines. The second line of a table needs the structure  | --- | --- | . All subsequent rows of the table need pipes between cells.  | Col 1 Header | Col 2 Header |\n| --- | --- |\n| row 1 col 1 | row 1 col 2 |\n| row 2 col 1 | row 2 col 2|  will result in:     Col 1 Header  Col 2 Header      row 1 col 1  row 1 col 2    row 2 col 1  row 2 col 2    ### Saving Jupyter Notebooks in Other Formats      Jupyter notebooks can be saved in other formats besides the native  .ipynb  format. These formats can be acceed on the [File] --> [Download As] menu.   The available file types are:   Notebook (.ipynb) - The native jupyter notebook format  Python (.py) - The native Python code file format.  HTML (.html) - A web page  Markdown (.md) - Markdown format  reST (.rst) - Restructured text format  LaTeX (.tex) - LaTeX format  PDF via LaTeX - a pdf exported from LeTeX, requires a converter   When a Notebook is saved as a  .py  file, any text in Mardown Cells are converted to commments, and any code cells are kept as Python code.    The  .py  file after this notebook is  Downloaded as  a  Python(.py)  looks like:",
            "title": "Tables"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.07-Magic-Cells/",
            "text": "Magic Cells\n\n\nJupyter notebook code cells can contain special commands which are not valid Python code, but will affect the behavior of the notebook.\n\n\n%matplotlib inline\n\n\nOne of the most popular magic commands is:\n\n\n%matplotlib inline\n\n\n\n\nUsing this command at the start of a jupyter notebook will produce matplotlib plots in cells of the notebook. Without \n%matplotlib inline\n, plots will jump out as external windows. A typical start to a jupyter notebook using \nmatplotlib\n might start as:\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\n\n\n%load\n\n\nThe \n%load\n command will load a python module, webpage or file into a jupyter notebook\n\n\n\n\n\nIn\u00a0[\u00a0]:\n\n\n\n    \n\n\n# %load hello.py\n\n\nprint\n(\n'This code was run from a seperate Python file'\n)\n\n\nprint\n(\n'Hellow from the file hello.py'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n%run\n\n\nThe \n%run\n magic command followed by the name of a python file will run the current python file as a script. Suppose the file \nhello.py\n is created in the same directory as the running jupyter notebook. The directory structure will look something like this:\n\n\n| folder\n---| notebook.ipynb\n---| hello.py\n\n\n\n\nIn the file \nhello.py\n is the code:\n\n\nprint('This code was run from a seperate Python file')\nprint('Hellow from the file hello.py')\n\n\n\n\nWithin our jupyter notebook, if we \n%run\n this file, we will get the output of or hello.py script in a jupyter notebook output cell.\n\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\n%\nrun\n hello.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis code was run from a seperate Python file\nHello from the file hello.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n\n\n    \n\n\n%\npwd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[10]:\n\n\n\n\n\n\n\n\n'C:\\\\Users\\\\peter.kazarinoff\\\\Documents\\\\book\\\\notebooks\\\\04-Jupyter-Notebooks'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOther usefull magic commands\n\n\nOther usefull magic commands are:\n\n\n\n\n\n\n\n\nmagic command\n\n\nresult\n\n\n\n\n\n\n\n\n\n\n%pwd\n\n\nprint the current working directory\n\n\n\n\n\n\n%cd\n\n\nchange the current working directory\n\n\n\n\n\n\n%ls\n\n\nlist the contents of the current directory\n\n\n\n\n\n\n%history\n\n\nthe history of the \nIn [ ]:\n commands\n\n\n\n\n\n\n\n\nYou can list all of the available magic commands by typing and running \n%lsmagic\n in a jupyter notebook code cell:\n\n\n\n\n\nIn\u00a0[12]:\n\n\n\n    \n\n\n%\nlsmagic\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[12]:\n\n\n\n\n\n\n\n\nAvailable line magics:\n%alias  %alias_magic  %autocall  %automagic  %autosave  %bookmark  %cd  %clear  %cls  %colors  %config  %connect_info  %copy  %ddir  %debug  %dhist  %dirs  %doctest_mode  %echo  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %less  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %macro  %magic  %matplotlib  %mkdir  %more  %notebook  %page  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %popd  %pprint  %precision  %profile  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %qtconsole  %quickref  %recall  %rehashx  %reload_ext  %ren  %rep  %rerun  %reset  %reset_selective  %rmdir  %run  %save  %sc  %set_env  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode\n\nAvailable cell magics:\n%%!  %%HTML  %%SVG  %%bash  %%capture  %%cmd  %%debug  %%file  %%html  %%javascript  %%js  %%latex  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile\n\nAutomagic is ON, % prefix IS NOT needed for line magics.",
            "title": "Magic Cells"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.07-Magic-Cells/#magic-cells",
            "text": "Jupyter notebook code cells can contain special commands which are not valid Python code, but will affect the behavior of the notebook.",
            "title": "Magic Cells"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.07-Magic-Cells/#matplotlib-inline",
            "text": "One of the most popular magic commands is:  %matplotlib inline  Using this command at the start of a jupyter notebook will produce matplotlib plots in cells of the notebook. Without  %matplotlib inline , plots will jump out as external windows. A typical start to a jupyter notebook using  matplotlib  might start as:  import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline",
            "title": "%matplotlib inline"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.07-Magic-Cells/#load",
            "text": "The  %load  command will load a python module, webpage or file into a jupyter notebook   In\u00a0[\u00a0]:  \n      # %load hello.py  print ( 'This code was run from a seperate Python file' )  print ( 'Hellow from the file hello.py' )",
            "title": "%load"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.07-Magic-Cells/#run",
            "text": "The  %run  magic command followed by the name of a python file will run the current python file as a script. Suppose the file  hello.py  is created in the same directory as the running jupyter notebook. The directory structure will look something like this:  | folder\n---| notebook.ipynb\n---| hello.py  In the file  hello.py  is the code:  print('This code was run from a seperate Python file')\nprint('Hellow from the file hello.py')  Within our jupyter notebook, if we  %run  this file, we will get the output of or hello.py script in a jupyter notebook output cell.    In\u00a0[6]:  \n      % run  hello.py          This code was run from a seperate Python file\nHello from the file hello.py         In\u00a0[10]:  \n      % pwd         Out[10]:   'C:\\\\Users\\\\peter.kazarinoff\\\\Documents\\\\book\\\\notebooks\\\\04-Jupyter-Notebooks'",
            "title": "%run"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.07-Magic-Cells/#other-usefull-magic-commands",
            "text": "Other usefull magic commands are:     magic command  result      %pwd  print the current working directory    %cd  change the current working directory    %ls  list the contents of the current directory    %history  the history of the  In [ ]:  commands     You can list all of the available magic commands by typing and running  %lsmagic  in a jupyter notebook code cell:   In\u00a0[12]:  \n      % lsmagic         Out[12]:   Available line magics:\n%alias  %alias_magic  %autocall  %automagic  %autosave  %bookmark  %cd  %clear  %cls  %colors  %config  %connect_info  %copy  %ddir  %debug  %dhist  %dirs  %doctest_mode  %echo  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %less  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %macro  %magic  %matplotlib  %mkdir  %more  %notebook  %page  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %popd  %pprint  %precision  %profile  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %qtconsole  %quickref  %recall  %rehashx  %reload_ext  %ren  %rep  %rerun  %reset  %reset_selective  %rmdir  %run  %save  %sc  %set_env  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode\n\nAvailable cell magics:\n%%!  %%HTML  %%SVG  %%bash  %%capture  %%cmd  %%debug  %%file  %%html  %%javascript  %%js  %%latex  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile\n\nAutomagic is ON, % prefix IS NOT needed for line magics.",
            "title": "Other usefull magic commands"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.08-Getting-Help-in-a-Jupyter-Notebook/",
            "text": "Getting Help in a Jupyter Notebook\n\n\nThere are a couple different ways to get help when using a jupyter notebook\n\n\nUsing \ndir\n\n\nyou can use \ndir()\n and pass a function, method, variable or object and see what some possible options are. For example if we define \na = [1,2,3]\n we can see what methods and attributes are available on \na\n. There are a lot. \n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\na\n \n=\n \n[\n1\n,\n2\n,\n3\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\ndir\n(\na\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[6]:\n\n\n\n\n\n\n\n\n['__add__',\n '__class__',\n '__contains__',\n '__delattr__',\n '__delitem__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getitem__',\n '__gt__',\n '__hash__',\n '__iadd__',\n '__imul__',\n '__init__',\n '__init_subclass__',\n '__iter__',\n '__le__',\n '__len__',\n '__lt__',\n '__mul__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__reversed__',\n '__rmul__',\n '__setattr__',\n '__setitem__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n 'append',\n 'clear',\n 'copy',\n 'count',\n 'extend',\n 'index',\n 'insert',\n 'pop',\n 'remove',\n 'reverse',\n 'sort']\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nusing . [Tab]\n\n\nAfter typing the name of a varibale, object or fucntion follwoing the \n.\n character, hit the tab key. This will bring up a list of available options. You can scroll through the list or type a letter to filter the list to certain starting letters. Use [Enter] to select the option you want.\n\n\nTab completion can also be used during module importing, to see which functions and classes are avaiable in a given module \n\n\n\n\n\nIn\u00a0[22]:\n\n\n\n    \n\n\nfrom\n \nmath\n \nimport\n \n<\ntab\n>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  File \n\"<ipython-input-22-82915b9510c5>\"\n, line \n1\n\n\n    from math import <tab>\n\n\n                     ^\n\n\nSyntaxError\n:\n invalid syntax\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nusing \nhelp()\n function\n\n\nafter importing a module, you can use the help() function to see documentation about the command if it is available:\n\n\n\n\n\nIn\u00a0[13]:\n\n\n\n    \n\n\nimport\n \nmath\n\n\nhelp\n \n(\nmath\n.\nsin\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHelp on built-in function sin in module math:\n\nsin(...)\n    sin(x)\n\n    Return the sine of x (measured in radians).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nusing \n?\n and \n??\n\n\nAfter importing a module, you can view help on it by typing the module name followed by a question mark \n?\n\n\n\n\n\n\nIn\u00a0[15]:\n\n\n\n    \n\n\nimport\n \nstatistics\n\nstatistics.mean\n?\n\n\n\n\n\n\n\n\n\n\n\nYou can view the source code where a particular function lives using a double question mark \n??\n\n\n\n\n\n\nIn\u00a0[21]:\n\n\n\n    \n\n\nmax\n??\n\n\n\n\n\n\n\n\n\n\n\n\n\nHelp online\n\n\nhelp is also avaiable online at on the Jupyter Notebook docs:\n\n\nhttp://jupyter.readthedocs.io/en/latest/\n\n\nAnd can always be accessed by typing something into google. The site stack overflow is devoted to programming questions and answers.",
            "title": "Getting Help in a Jupyter Notebook"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.08-Getting-Help-in-a-Jupyter-Notebook/#getting-help-in-a-jupyter-notebook",
            "text": "There are a couple different ways to get help when using a jupyter notebook",
            "title": "Getting Help in a Jupyter Notebook"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.08-Getting-Help-in-a-Jupyter-Notebook/#using-dir",
            "text": "you can use  dir()  and pass a function, method, variable or object and see what some possible options are. For example if we define  a = [1,2,3]  we can see what methods and attributes are available on  a . There are a lot.    In\u00a0[5]:  \n      a   =   [ 1 , 2 , 3 ]         In\u00a0[6]:  \n      dir ( a )         Out[6]:   ['__add__',\n '__class__',\n '__contains__',\n '__delattr__',\n '__delitem__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getitem__',\n '__gt__',\n '__hash__',\n '__iadd__',\n '__imul__',\n '__init__',\n '__init_subclass__',\n '__iter__',\n '__le__',\n '__len__',\n '__lt__',\n '__mul__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__reversed__',\n '__rmul__',\n '__setattr__',\n '__setitem__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n 'append',\n 'clear',\n 'copy',\n 'count',\n 'extend',\n 'index',\n 'insert',\n 'pop',\n 'remove',\n 'reverse',\n 'sort']",
            "title": "Using dir"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.08-Getting-Help-in-a-Jupyter-Notebook/#using-tab",
            "text": "After typing the name of a varibale, object or fucntion follwoing the  .  character, hit the tab key. This will bring up a list of available options. You can scroll through the list or type a letter to filter the list to certain starting letters. Use [Enter] to select the option you want.  Tab completion can also be used during module importing, to see which functions and classes are avaiable in a given module    In\u00a0[22]:  \n      from   math   import   < tab >              File  \"<ipython-input-22-82915b9510c5>\" , line  1      from math import <tab>                       ^  SyntaxError :  invalid syntax",
            "title": "using . [Tab]"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.08-Getting-Help-in-a-Jupyter-Notebook/#using-help-function",
            "text": "after importing a module, you can use the help() function to see documentation about the command if it is available:   In\u00a0[13]:  \n      import   math  help   ( math . sin )           Help on built-in function sin in module math:\n\nsin(...)\n    sin(x)\n\n    Return the sine of x (measured in radians).",
            "title": "using help() function"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.08-Getting-Help-in-a-Jupyter-Notebook/#using-and",
            "text": "After importing a module, you can view help on it by typing the module name followed by a question mark  ?    In\u00a0[15]:  \n      import   statistics \nstatistics.mean ?      \nYou can view the source code where a particular function lives using a double question mark  ??    In\u00a0[21]:  \n      max ??",
            "title": "using ? and ??"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.08-Getting-Help-in-a-Jupyter-Notebook/#help-online",
            "text": "help is also avaiable online at on the Jupyter Notebook docs:  http://jupyter.readthedocs.io/en/latest/  And can always be accessed by typing something into google. The site stack overflow is devoted to programming questions and answers.",
            "title": "Help online"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.09-Summary/",
            "text": "Summary\n\n\nIn this chapter we learned...\n\n\nKey Vocabulary and Terms\n\n\nKernal\n\n\nNotebook\n\n\nJupyter\n\n\niPython\n\n\nExecute\n\n\n.ipynb file\n\n\nPython Commands and Functions\n\n\n%matplotlib inline",
            "title": "Summary"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.09-Summary/#summary",
            "text": "In this chapter we learned...",
            "title": "Summary"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.09-Summary/#key-vocabulary-and-terms",
            "text": "Kernal  Notebook  Jupyter  iPython  Execute  .ipynb file",
            "title": "Key Vocabulary and Terms"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.09-Summary/#python-commands-and-functions",
            "text": "%matplotlib inline",
            "title": "Python Commands and Functions"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.10-Review-Questions/",
            "text": "Review Questions\n\n\n\n\n\n\n\n\n2.\n\n\n3.\n\n\n4.\n\n\n5.\n\n\n6.\n\n\n7.\n\n\n8.",
            "title": "Review Questions"
        },
        {
            "location": "/03-Jupyter-Notebooks/03.10-Review-Questions/#review-questions",
            "text": "2.  3.  4.  5.  6.  7.  8.",
            "title": "Review Questions"
        },
        {
            "location": "/04-The-Python-REPL/02.00-Introduction/",
            "text": "The Python REPL\n\n\nIntroduction\n\n\nBy the end of this chapter, you will be able to:\n\n\n\n\n\n\nComplete mathematical calculations at the Python command line\n\n\n\n\n\n\nBe able to open and close the Python REPL\n\n\n\n\n\n\nImport the math and statistics module from the standard library and use their functions\n\n\n\n\n\n\nUse the output from Python command line as input in another problem\n\n\n\n\n\n\nCombine \nTrue\n and \nFalse\n in logical statements",
            "title": "Introduction"
        },
        {
            "location": "/04-The-Python-REPL/02.00-Introduction/#the-python-repl",
            "text": "",
            "title": "The Python REPL"
        },
        {
            "location": "/04-The-Python-REPL/02.00-Introduction/#introduction",
            "text": "By the end of this chapter, you will be able to:    Complete mathematical calculations at the Python command line    Be able to open and close the Python REPL    Import the math and statistics module from the standard library and use their functions    Use the output from Python command line as input in another problem    Combine  True  and  False  in logical statements",
            "title": "Introduction"
        },
        {
            "location": "/04-The-Python-REPL/02.01-Python-as-a-fancy-calculator/",
            "text": "Python as a fancy calculator\n\n\nPython can be used as a fancy calculator to do arithmetic like addition, subtraction, multiplication and division. It can also be used for trigonometric calculations and statistical calculations.\n\n\nArithmetic\n\n\nPython can be used as a calculator to make simple or complex calculations. \n\n\nWe can do this easily with Python at the Python Prompt, often called the Python REPL for Read Evaluate Print Loop. The Python REPL shows three arrow symbols \n>>>\n after which you will see a blinking cursor. Programmers type commands at the prompt then hit [ENTER]. The is Read by the interperator, results of running the commands are Evaluated then Printed to the command window.  After the output a new \n>>>\n prompt appears on a new line. This process happens over and over again (in a loop). Try the following commands at the Python REPL:\n\n\n\n\nThe mass of a battery is 5 kg and the mass of the battery cables is 3 kg. What is the mass of the battery cable assembly?\n\n\n\n\n>>> 5 + 3\n8\n\n\n\n\n\n\nSuppose one of the cables above is removed and it has a mass of 1.5 kg. What is the mass of the left over assembly\n\n\n\n\n>>> 8 - 1.5\n6.5\n\n\n\n\n\n\nIf the battery has a mass of 5000 g and a volume of 2500 \ncm^3\ncm^3\n What is the density of the battery? The formula for density is below, where D is density, m is mass and v is volume.\n\n\n\n\n\n\n D = \\frac{m}{v} \n\n\n D = \\frac{m}{v} \n\n\n\n\nIn the problem above \nm = 5000\nm = 5000\n and \nv=2500\nv=2500\n\n\nLet's solve this with Python\n\n\n>>> 5000 / 2500\n2.0\n\n\n\n\n\n\nWhat if we have 2 batteries that each weight 5 kg? How much mass is two batteries?\n\n\n\n\n>>> 5 * 2\n2.0\n\n\n\n\n\n\nThe dimension of the battery of each battery is 3 cm. What is the area of the base of the battery?\nTo do this probems we use the the ** symbol to raise a number to a power. This is similar to using \n3^2\n3^2\n.\n\n\n\n\n>>> 3 ** 2\n9\n\n\n\n\n\n\nWhat is the volume of the battery if each the length, width and height of the battery are all 3cm?\n\n\n\n\n>>> 3 ** 3\n27\n\n\n\n\n\n\nFind the mass of the two batteries, and two cables\n\n\n\n\nWe can use Python to find the mass of the batteries and then use the answer, which Python saves as an underscore _ to use in our next operation. (This is similar to ans in MatLab)\n\n\n>>> 2 * 5 \n10\n>>> _ + 1.5 + 1\n12.5\n\n\n\n\nSection Summary\n\n\nA summary of the arithmetic operations in python are below\n+ , - , * , /, ** \nthe answer is saved as underscore _\n\n\nTrig: sin, cos, tan\n\n\nPython as a fancy calculator is not limited to simple arithmetic. Trig functions sin, cos and tan are also available. In order to use these functions, we need to learn a new concept: importing modules. \nIn python there are many functions built into the language when it starts. These include + , -, *, / like we say in the last section. However not all functions will work right when python starts. Say we want to find the sin of an angle. Try the following:\n\n\n>>> sin(60)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sin' is not defined\n\n\n\n\nThis error is returned because we have not told python to include the sin function. The sin function is part of the \\textit{standard library}. The standard library comes with every python installation and includes many functions, but not all of these functions are available to us when we start a new python window. In order to use the sin function, we first need to import it from math \\textit{module} which is part of the standard library. \n\n\nImporting modules and functions is easy. We use the following syntax: from \\textit{module name} import textit{function name} \n\n\nTo import the sin function from the math module try:\n\n\n>>> from math import sin\n>>> sin(60)\n-0.3048106211022167\n\n\n\n\nsuccess! You can also import multiple modules at once. Say we want to use a bunch of different trig functions to solve the following problem.\n\n\n\n\nA vector is at an angle of pi/6 radians. What is the sin, cos and tan of the angle?\n\n\n\n\nTo solve this problem we need to import the sin, cos, and tan fuctions. It would also be usefull to have the value of pi, rather than having to write 3.14.... We can import these all at the same time with commas in between. \n\n\nTry:\n\n\n>>> from math import sin, cos, tan, pi\n>>> pi\n3.141592653589793\n>>> pi/4\n0.7853981633974483\n>>> sin(pi/4)\n0.7853981633974483\n>>> sin(2*pi)\n\n\n\n\ncos\ntan\npi\ndegrees(x) rad --> deg\nradians(x) deg --> rad\nasin\nacos\natan\n\n\nExponents and Logarithms\n\n\nIt is easy to calculate expnents and logarithms as well. Note that these need to be imported from the \nmath\n module just like the trig functions above. \n\n\nThe following functions can be imported from the math module:\n\n\nlog\nlog10\nexp\ne\npow(x,y)\nsqrt\n\n\nLet's try a couple of examples\n\n\n>>> from math import log, log10, exp, e, pow, sqrt\n>>> F = 3.0*e**3.4  \n>>> log(F)         # note: natural log\n4.4986122886681095\n\n\n\n\ntriangle with sides 3 and 4 what is the hypotenuse?\n\n\n>>> a=3\n>>> b=4\n>>> c=sqrt(a**2 + b**2)\n>>> c\n5.0 \n\n\n\n\nThe power function works like the \n**\n operator to raise a number to a power\n\n\n>>> a = 5**2\n>>> a\n\n\n\n\n>>> b = pow(5,2)\n>>> b\n25.0\n\n\n\n\nProblem: The arranous relationship states that\n\n\n\n\n n = n_{v}e^{-Q_v/(RT)} \n\n\n n = n_{v}e^{-Q_v/(RT)} \n\n\n\n\n>>> nv = 2.0**(-0.3)\n>>> Qv = 5\n>>> R = 3.18\n>>> T = 293\n>>> n = nv*e**(-1*Qv/(R*T))\n>>> n\n0.8079052775625613\n\n\n\n\nStaticstics\n\n\nTo round out this section, we will look at a couple of statistics functions. These functions are part of the \nstandard library\n but not part of the \nmath\n module. To access these statistics functions we need to import them from the \nstatistics\n module using the statement \nfrom statistics import mean, median, mode, stdev\n. Then the functions \nmean\n, \nmedian\n, \nmode\n and \nstdev\n(standard deviation) can be used.  \n\n\n>>> from statistics import mean, median, mode, stdev\n\n>>> test_scores = [ 60 , 83, 83, 91, 100]\n\n>>> mean(test_scores)\n83.4\n\n>>> median(test_scores)\n83\n\n>>> mode(test_scores)\n83\n\n>>> stdev(test_scores) # standard deviation of a sample\n14.842506526863986 \n\n\n\n\nAlternativly, we can import the whole \nstatistics\n module using the statement \nimport statistics\n. Then to use the functions, we need to use the names \nstatistics.mean\n, \nstatistics.median\n, \nstatistics.mode\n, and \nstatistics.stdev\n. See below:\n\n\n>>> import statistics\n\n>>> test_scores = [ 60 , 83, 83, 91, 100]\n\n>>> statistics.mean(test_scores)\n83.4\n\n>>> statistics.median(test_scores)\n83\n\n>>> statistics.mode(test_scores)\n83\n\n>>> statistics.stdev(test_scores) # standard deviation of a sample\n14.842506526863986",
            "title": "Python as a fancy calculator"
        },
        {
            "location": "/04-The-Python-REPL/02.01-Python-as-a-fancy-calculator/#python-as-a-fancy-calculator",
            "text": "Python can be used as a fancy calculator to do arithmetic like addition, subtraction, multiplication and division. It can also be used for trigonometric calculations and statistical calculations.",
            "title": "Python as a fancy calculator"
        },
        {
            "location": "/04-The-Python-REPL/02.01-Python-as-a-fancy-calculator/#arithmetic",
            "text": "Python can be used as a calculator to make simple or complex calculations.   We can do this easily with Python at the Python Prompt, often called the Python REPL for Read Evaluate Print Loop. The Python REPL shows three arrow symbols  >>>  after which you will see a blinking cursor. Programmers type commands at the prompt then hit [ENTER]. The is Read by the interperator, results of running the commands are Evaluated then Printed to the command window.  After the output a new  >>>  prompt appears on a new line. This process happens over and over again (in a loop). Try the following commands at the Python REPL:   The mass of a battery is 5 kg and the mass of the battery cables is 3 kg. What is the mass of the battery cable assembly?   >>> 5 + 3\n8   Suppose one of the cables above is removed and it has a mass of 1.5 kg. What is the mass of the left over assembly   >>> 8 - 1.5\n6.5   If the battery has a mass of 5000 g and a volume of 2500  cm^3 cm^3  What is the density of the battery? The formula for density is below, where D is density, m is mass and v is volume.     D = \\frac{m}{v}    D = \\frac{m}{v}    In the problem above  m = 5000 m = 5000  and  v=2500 v=2500  Let's solve this with Python  >>> 5000 / 2500\n2.0   What if we have 2 batteries that each weight 5 kg? How much mass is two batteries?   >>> 5 * 2\n2.0   The dimension of the battery of each battery is 3 cm. What is the area of the base of the battery?\nTo do this probems we use the the ** symbol to raise a number to a power. This is similar to using  3^2 3^2 .   >>> 3 ** 2\n9   What is the volume of the battery if each the length, width and height of the battery are all 3cm?   >>> 3 ** 3\n27   Find the mass of the two batteries, and two cables   We can use Python to find the mass of the batteries and then use the answer, which Python saves as an underscore _ to use in our next operation. (This is similar to ans in MatLab)  >>> 2 * 5 \n10\n>>> _ + 1.5 + 1\n12.5",
            "title": "Arithmetic"
        },
        {
            "location": "/04-The-Python-REPL/02.01-Python-as-a-fancy-calculator/#section-summary",
            "text": "A summary of the arithmetic operations in python are below\n+ , - , * , /, ** \nthe answer is saved as underscore _",
            "title": "Section Summary"
        },
        {
            "location": "/04-The-Python-REPL/02.01-Python-as-a-fancy-calculator/#trig-sin-cos-tan",
            "text": "Python as a fancy calculator is not limited to simple arithmetic. Trig functions sin, cos and tan are also available. In order to use these functions, we need to learn a new concept: importing modules. \nIn python there are many functions built into the language when it starts. These include + , -, *, / like we say in the last section. However not all functions will work right when python starts. Say we want to find the sin of an angle. Try the following:  >>> sin(60)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'sin' is not defined  This error is returned because we have not told python to include the sin function. The sin function is part of the \\textit{standard library}. The standard library comes with every python installation and includes many functions, but not all of these functions are available to us when we start a new python window. In order to use the sin function, we first need to import it from math \\textit{module} which is part of the standard library.   Importing modules and functions is easy. We use the following syntax: from \\textit{module name} import textit{function name}   To import the sin function from the math module try:  >>> from math import sin\n>>> sin(60)\n-0.3048106211022167  success! You can also import multiple modules at once. Say we want to use a bunch of different trig functions to solve the following problem.   A vector is at an angle of pi/6 radians. What is the sin, cos and tan of the angle?   To solve this problem we need to import the sin, cos, and tan fuctions. It would also be usefull to have the value of pi, rather than having to write 3.14.... We can import these all at the same time with commas in between.   Try:  >>> from math import sin, cos, tan, pi\n>>> pi\n3.141592653589793\n>>> pi/4\n0.7853981633974483\n>>> sin(pi/4)\n0.7853981633974483\n>>> sin(2*pi)  cos\ntan\npi\ndegrees(x) rad --> deg\nradians(x) deg --> rad\nasin\nacos\natan",
            "title": "Trig: sin, cos, tan"
        },
        {
            "location": "/04-The-Python-REPL/02.01-Python-as-a-fancy-calculator/#exponents-and-logarithms",
            "text": "It is easy to calculate expnents and logarithms as well. Note that these need to be imported from the  math  module just like the trig functions above.   The following functions can be imported from the math module:  log\nlog10\nexp\ne\npow(x,y)\nsqrt  Let's try a couple of examples  >>> from math import log, log10, exp, e, pow, sqrt\n>>> F = 3.0*e**3.4  \n>>> log(F)         # note: natural log\n4.4986122886681095  triangle with sides 3 and 4 what is the hypotenuse?  >>> a=3\n>>> b=4\n>>> c=sqrt(a**2 + b**2)\n>>> c\n5.0   The power function works like the  **  operator to raise a number to a power  >>> a = 5**2\n>>> a  >>> b = pow(5,2)\n>>> b\n25.0  Problem: The arranous relationship states that    n = n_{v}e^{-Q_v/(RT)}    n = n_{v}e^{-Q_v/(RT)}    >>> nv = 2.0**(-0.3)\n>>> Qv = 5\n>>> R = 3.18\n>>> T = 293\n>>> n = nv*e**(-1*Qv/(R*T))\n>>> n\n0.8079052775625613",
            "title": "Exponents and Logarithms"
        },
        {
            "location": "/04-The-Python-REPL/02.01-Python-as-a-fancy-calculator/#staticstics",
            "text": "To round out this section, we will look at a couple of statistics functions. These functions are part of the  standard library  but not part of the  math  module. To access these statistics functions we need to import them from the  statistics  module using the statement  from statistics import mean, median, mode, stdev . Then the functions  mean ,  median ,  mode  and  stdev (standard deviation) can be used.    >>> from statistics import mean, median, mode, stdev\n\n>>> test_scores = [ 60 , 83, 83, 91, 100]\n\n>>> mean(test_scores)\n83.4\n\n>>> median(test_scores)\n83\n\n>>> mode(test_scores)\n83\n\n>>> stdev(test_scores) # standard deviation of a sample\n14.842506526863986   Alternativly, we can import the whole  statistics  module using the statement  import statistics . Then to use the functions, we need to use the names  statistics.mean ,  statistics.median ,  statistics.mode , and  statistics.stdev . See below:  >>> import statistics\n\n>>> test_scores = [ 60 , 83, 83, 91, 100]\n\n>>> statistics.mean(test_scores)\n83.4\n\n>>> statistics.median(test_scores)\n83\n\n>>> statistics.mode(test_scores)\n83\n\n>>> statistics.stdev(test_scores) # standard deviation of a sample\n14.842506526863986",
            "title": "Staticstics"
        },
        {
            "location": "/04-The-Python-REPL/02.02-Variables/",
            "text": "Variables and Data Types\n\n\nVariables are assigned in Python using the \n=\n equals sign also called the assignment opperator. The statment:\n\n\na = 2\n\n\n\n\nAssigns the integer \n2\n to the variable \na\n. Note this is different from the logical opperator \n==\n equivalent to.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\na\n \n=\n \n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\na\n \n==\n \n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[2]:\n\n\n\n\n\n\n\n\nTrue",
            "title": "Variables and Data Types"
        },
        {
            "location": "/04-The-Python-REPL/02.02-Variables/#variables-and-data-types",
            "text": "Variables are assigned in Python using the  =  equals sign also called the assignment opperator. The statment:  a = 2  Assigns the integer  2  to the variable  a . Note this is different from the logical opperator  ==  equivalent to.   In\u00a0[1]:  \n      a   =   2         In\u00a0[2]:  \n      a   ==   2         Out[2]:   True",
            "title": "Variables and Data Types"
        },
        {
            "location": "/04-The-Python-REPL/02.03-Boolean-Arithemtic/",
            "text": "Boolean Arithemtic\n\n\nBoolean Arithemtic is the Arithemtic of Logic. A boolean or logical value can either be True or False.\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nA\n \n=\n \nTrue\n\n\nB\n \n=\n \nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[2]:\n\n\n\n\n\n\n\n\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[3]:\n\n\n\n\n\n\n\n\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nA\n \nor\n \nB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[4]:\n\n\n\n\n\n\n\n\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\nA\n \nand\n \nB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[5]:\n\n\n\n\n\n\n\n\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nnot\n \nA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[6]:\n\n\n\n\n\n\n\n\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\nnot\n \nB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[7]:\n\n\n\n\n\n\n\n\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[8]:\n\n\n\n    \n\n\nA\n \n==\n \nB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[8]:\n\n\n\n\n\n\n\n\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[9]:\n\n\n\n    \n\n\nA\n \n!=\n \nB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[9]:\n\n\n\n\n\n\n\n\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n\n\n    \n\n\nC\n \n=\n \nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[11]:\n\n\n\n    \n\n\nA\n \nor\n \n(\nC\n \nand\n \nB\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[11]:\n\n\n\n\n\n\n\n\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[12]:\n\n\n\n    \n\n\n(\nA\n \nand\n \nB\n)\n \nor\n \nC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[12]:\n\n\n\n\n\n\n\n\nFalse",
            "title": "Boolean Arithemtic"
        },
        {
            "location": "/04-The-Python-REPL/02.03-Boolean-Arithemtic/#boolean-arithemtic",
            "text": "Boolean Arithemtic is the Arithemtic of Logic. A boolean or logical value can either be True or False.   In\u00a0[1]:  \n      A   =   True  B   =   False         In\u00a0[2]:  \n      A         Out[2]:   True         In\u00a0[3]:  \n      B         Out[3]:   False         In\u00a0[4]:  \n      A   or   B         Out[4]:   True         In\u00a0[5]:  \n      A   and   B         Out[5]:   False         In\u00a0[6]:  \n      not   A         Out[6]:   False         In\u00a0[7]:  \n      not   B         Out[7]:   True         In\u00a0[8]:  \n      A   ==   B         Out[8]:   False         In\u00a0[9]:  \n      A   !=   B         Out[9]:   True         In\u00a0[10]:  \n      C   =   False         In\u00a0[11]:  \n      A   or   ( C   and   B )         Out[11]:   True         In\u00a0[12]:  \n      ( A   and   B )   or   C         Out[12]:   False",
            "title": "Boolean Arithemtic"
        },
        {
            "location": "/04-The-Python-REPL/02.04-String-Opperations/",
            "text": "String Opperations\n\n\nSome opperations we can do on strings include indexing, concatination, and logical comparisions\n\n\nIndexing\n\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nname\n \n=\n \n'Lady Ada'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nname\n[\n1\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[2]:\n\n\n\n\n\n\n\n\n'a'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nname\n[\n2\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[3]:\n\n\n\n\n\n\n\n\n'd'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nname\n[\n1\n:\n4\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[6]:\n\n\n\n\n\n\n\n\n'ady'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\nname\n[:]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[7]:\n\n\n\n\n\n\n\n\n'Lady Ada'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[9]:\n\n\n\n    \n\n\nname\n[\n-\n1\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[9]:\n\n\n\n\n\n\n\n\n'a'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n\n\n    \n\n\nname\n[\n-\n3\n:\n-\n1\n]\n  \n#not including ending\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[10]:\n\n\n\n\n\n\n\n\n'Ad'",
            "title": "String Opperations"
        },
        {
            "location": "/04-The-Python-REPL/02.04-String-Opperations/#string-opperations",
            "text": "Some opperations we can do on strings include indexing, concatination, and logical comparisions",
            "title": "String Opperations"
        },
        {
            "location": "/04-The-Python-REPL/02.04-String-Opperations/#indexing",
            "text": "In\u00a0[1]:  \n      name   =   'Lady Ada'         In\u00a0[2]:  \n      name [ 1 ]         Out[2]:   'a'         In\u00a0[3]:  \n      name [ 2 ]         Out[3]:   'd'         In\u00a0[6]:  \n      name [ 1 : 4 ]         Out[6]:   'ady'         In\u00a0[7]:  \n      name [:]         Out[7]:   'Lady Ada'         In\u00a0[9]:  \n      name [ - 1 ]         Out[9]:   'a'         In\u00a0[10]:  \n      name [ - 3 : - 1 ]    #not including ending         Out[10]:   'Ad'",
            "title": "Indexing"
        },
        {
            "location": "/04-The-Python-REPL/02.05-Print-and-Input-Statements/",
            "text": "Print and Input Statements\n\n\nThe \nprint\n and \ninput\n functions are useful in Python. Below is a code example:\n\n\nname = input('Type your name: ')\nprint('Your name is: ')\nprint(name)",
            "title": "Print and Input Statements"
        },
        {
            "location": "/04-The-Python-REPL/02.05-Print-and-Input-Statements/#print-and-input-statements",
            "text": "The  print  and  input  functions are useful in Python. Below is a code example:  name = input('Type your name: ')\nprint('Your name is: ')\nprint(name)",
            "title": "Print and Input Statements"
        },
        {
            "location": "/04-The-Python-REPL/02.06-Summary/",
            "text": "Summary\n\n\nThis is the text summary for the chapter. Will be about half a page long\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n\nKey Terms and Concepts\n\n\n\n\n\n\n\n\nKey Terms and Concepts\n\n\n\n\n\n\n\n\n\n\nREPL\n\n\n\n\n\n\nOperator\n\n\n\n\n\n\nMathematical Operator\n\n\n\n\n\n\nCommand Line\n\n\n\n\n\n\nError\n\n\n\n\n\n\nModule\n\n\n\n\n\n\nStandard Library\n\n\n\n\n\n\nImport\n\n\n\n\n\n\n\n\nSummary of Python Functions and Commands\n\n\nBelow is a summary of the functions and operators used in this chapter:\n\n\n\n\n\n\n\n\nArithmetic Opperators\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\n+\n\n\nAddition\n\n\n\n\n\n\n-\n\n\nSubtraction\n\n\n\n\n\n\n*\n\n\nMultiplication\n\n\n\n\n\n\n/\n\n\nDivision\n\n\n\n\n\n\n**\n\n\nExponents\n\n\n\n\n\n\n_\n\n\nanswer in memory\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrig Function\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsin\n\n\nsine of angle in radians\n\n\n\n\n\n\ncos\n\n\ncosine of angle in radians\n\n\n\n\n\n\ntan\n\n\ntangent of angle in radians\n\n\n\n\n\n\npi\n\n\n\\pi\n\\pi\n\n\n\n\n\n\ndegress\n\n\nconvert radians to degress\n\n\n\n\n\n\nradians\n\n\nconvert degrees to radians\n\n\n\n\n\n\nasin\n\n\ninverse sine\n\n\n\n\n\n\nacos\n\n\ninverse cosine\n\n\n\n\n\n\natan\n\n\ninverse tangent\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLogarithem and Eponents Function\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nfrom math import *\n\n\n\n\n\n\n\n\nlog\n\n\nlog base e, natural log\n\n\n\n\n\n\nlog10\n\n\nlog base 10\n\n\n\n\n\n\nexp\n\n\ne^{power}\ne^{power}\n\n\n\n\n\n\ne\n\n\nthe constant e\n\n\n\n\n\n\npow(x,y)\n\n\nx raised to the y power\n\n\n\n\n\n\nsqrt\n\n\nsquare root\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStaticstical Function\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nfrom statistics import *\n\n\n\n\n\n\n\n\nmean\n\n\nmean (average)\n\n\n\n\n\n\nmedian\n\n\nmedian (middle value)\n\n\n\n\n\n\nmode\n\n\n(most often)\n\n\n\n\n\n\nstdev\n\n\nstandard deviation of a sample\n\n\n\n\n\n\npstdev\n\n\nstandard deviation of a population",
            "title": "Summary"
        },
        {
            "location": "/04-The-Python-REPL/02.06-Summary/#summary",
            "text": "This is the text summary for the chapter. Will be about half a page long  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
            "title": "Summary"
        },
        {
            "location": "/04-The-Python-REPL/02.06-Summary/#key-terms-and-concepts",
            "text": "Key Terms and Concepts      REPL    Operator    Mathematical Operator    Command Line    Error    Module    Standard Library    Import",
            "title": "Key Terms and Concepts"
        },
        {
            "location": "/04-The-Python-REPL/02.06-Summary/#summary-of-python-functions-and-commands",
            "text": "Below is a summary of the functions and operators used in this chapter:     Arithmetic Opperators  description      +  Addition    -  Subtraction    *  Multiplication    /  Division    **  Exponents    _  answer in memory        Trig Function  description      sin  sine of angle in radians    cos  cosine of angle in radians    tan  tangent of angle in radians    pi  \\pi \\pi    degress  convert radians to degress    radians  convert degrees to radians    asin  inverse sine    acos  inverse cosine    atan  inverse tangent        Logarithem and Eponents Function  description      from math import *     log  log base e, natural log    log10  log base 10    exp  e^{power} e^{power}    e  the constant e    pow(x,y)  x raised to the y power    sqrt  square root        Staticstical Function  description      from statistics import *     mean  mean (average)    median  median (middle value)    mode  (most often)    stdev  standard deviation of a sample    pstdev  standard deviation of a population",
            "title": "Summary of Python Functions and Commands"
        },
        {
            "location": "/04-The-Python-REPL/02.07-Review-Questions/",
            "text": "Review Questions\n\n\n2.1\n\n\n2.2\n\n\n2.3\n\n\n2.4\n\n\n2.5\n\n\n2.6\n\n\n2.7\n\n\n2.8\n\n\n2.9\n\n\n2.10",
            "title": "Review Questions"
        },
        {
            "location": "/04-The-Python-REPL/02.07-Review-Questions/#review-questions",
            "text": "2.1  2.2  2.3  2.4  2.5  2.6  2.7  2.8  2.9  2.10",
            "title": "Review Questions"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.00-Introduction/",
            "text": "Plotting with Matplotlib\n\n\nIntroduction\n\n\nBy the end of this chapter you will be able to:\n\n\n\n\n\n\nImport matplotlib into a Python script or jupyter notebook\n\n\n\n\n\n\nConstruct line plots\n\n\n\n\n\n\nAdd axis labels, titles and legends to plots\n\n\n\n\n\n\nConstruct bar charts\n\n\n\n\n\n\nAdd error bars to bar charts\n\n\n\n\n\n\nPlot histograms",
            "title": "Introduction"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.00-Introduction/#plotting-with-matplotlib",
            "text": "",
            "title": "Plotting with Matplotlib"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.00-Introduction/#introduction",
            "text": "By the end of this chapter you will be able to:    Import matplotlib into a Python script or jupyter notebook    Construct line plots    Add axis labels, titles and legends to plots    Construct bar charts    Add error bars to bar charts    Plot histograms",
            "title": "Introduction"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.01-What-is-Matplotlib/",
            "text": "What is Matplotlib?\n\n\n\n\nMatplotlib is a popular Python package used to plot data. Matplotlib started as a project in the early 2000's partly to to use Python to visualize the electonic signals in the brain of epilepsy patients. Matplotlib's creator, John D. Hunter was a neurobilogist. He was looking for way to replicate MATLAB's plotting capability with Python. In addition to starting matplotlib, Dr. Hunter was part of the founding group that created Numfocus. The Numfocus group oversees some major Python projects including matplotlib, numpy, pandas and jupyter.\n\n\nWhy use Matplotlib?\n\n\nMatplotlib is useful for creating static 2D plots, the kind of plots included in scientific publications and presentations. Almost any plot created in Micrsoft Excel can be created with matplotlib. Matplotlib can also be used to make 3D plots and animations.",
            "title": "What is Matplotlib?"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.01-What-is-Matplotlib/#what-is-matplotlib",
            "text": "Matplotlib is a popular Python package used to plot data. Matplotlib started as a project in the early 2000's partly to to use Python to visualize the electonic signals in the brain of epilepsy patients. Matplotlib's creator, John D. Hunter was a neurobilogist. He was looking for way to replicate MATLAB's plotting capability with Python. In addition to starting matplotlib, Dr. Hunter was part of the founding group that created Numfocus. The Numfocus group oversees some major Python projects including matplotlib, numpy, pandas and jupyter.",
            "title": "What is Matplotlib?"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.01-What-is-Matplotlib/#why-use-matplotlib",
            "text": "Matplotlib is useful for creating static 2D plots, the kind of plots included in scientific publications and presentations. Almost any plot created in Micrsoft Excel can be created with matplotlib. Matplotlib can also be used to make 3D plots and animations.",
            "title": "Why use Matplotlib?"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.02-Installing Matplotlib/",
            "text": "Installing Matplotlib\n\n\nInstalling matplotlib with the Anaconda Prompt\n\n\nTo install matplotlib, open the Anaconda Prompt and type:\n\n\n$ conda install matplotlib\n\n\n\n\nType \ny\n for yes when prompted.\n\n\nInstalling Matplotlib with pip\n\n\nTo install \nmatplotlib\n with pip, bring up a terminal window and type:\n\n\n$ pip install matplotlib\n\n\n\n\nThis will install \nmatplotlib\n in the current working python environment\nOnce installed, you can confirm matplotlib is available for import by opening up the Python REPL or a jupyter notebook and typing:\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\n>>>\n \nimport\n \nmatplotlib\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\n>>>\n \nmatplotlib\n.\nversion\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOut[2]:\n\n\n\n\n\n\n\n\n'2.0.2'",
            "title": "Installing Matplotlib"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.02-Installing Matplotlib/#installing-matplotlib",
            "text": "",
            "title": "Installing Matplotlib"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.02-Installing Matplotlib/#installing-matplotlib-with-the-anaconda-prompt",
            "text": "To install matplotlib, open the Anaconda Prompt and type:  $ conda install matplotlib  Type  y  for yes when prompted.",
            "title": "Installing matplotlib with the Anaconda Prompt"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.02-Installing Matplotlib/#installing-matplotlib-with-pip",
            "text": "To install  matplotlib  with pip, bring up a terminal window and type:  $ pip install matplotlib  This will install  matplotlib  in the current working python environment\nOnce installed, you can confirm matplotlib is available for import by opening up the Python REPL or a jupyter notebook and typing:   In\u00a0[1]:  \n      >>>   import   matplotlib         In\u00a0[2]:  \n      >>>   matplotlib . version         Out[2]:   '2.0.2'",
            "title": "Installing Matplotlib with pip"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.03-Line-Plots/",
            "text": "Line Plots\n\n\nLine plots in matplotlib can be created using matplotlib's pyplot library. To create a plot with Python and matplotlib, first import matplotlib's pyplot library using the line\n\n\nimport matplot.pyplot as plt\n\n\n\n\nIt is common practice to use the alias \nplt\n for the \nmatplotlib.pyplot\n library. Defining \nmatplotlib.pyplot\n as \nplt\n allows us to use \nplt.<function name>\n instead of \nmatplotlib.pyplot.<function name>\n in the rest of our code. See the differences below:\n\n\nimporting \nmatplotlib.pyplot\n with no alias\n\n\nimport matplotlib.pyplot\n\nmatplotlib.pyplot.plot(x, y)\n\n\n\n\nimporting \nmatplotlib.pyplot\n with the alias \nplt\n\n\nimport matplotlib.pyplot as plt\n\nplt.plot(x, y)\n\n\n\n\nUsing the alias \nplt\n simplifies the look of the code and cuts down on the amount of typing we have to do. You can use any alias you like such as \nimport matplotlib.pyplot as RainbowUnicorn\n, but the \nplt\n alias is common convention.\n\n\nIf building matplotlib plots in a jupyter notebook, include the line:\n\n\n%matplotlib inline\n\n\n\n\nbelow the import line. \nFirst import matplotlib. If using a jupyter notebook include the line \n%matplotlib inline\n\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# if using a jupyter notebook, include:\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\nOnce we have imported matplotlib and instructed our jupyternotebook to display plots inline, we can create some data to plot. We will create this data as a Pyton \nlist\n. A list is a built in data structure in Python that can store multiple values. Lists are defined in Python using square brackets \n[ ]\n. The elements of a list are seperated using commas \n[item1, item2, item 3]\n.\n\n\nAn example line of code to create a list of numbers in Python is:\n\n\na = [1, 3, 4, 8]\n\n\n\n\nWe can define a list of numbers in a code cell and plot them with matplotlib using matplotlib's \nplt.plot()\n function. We pass in our list of numbers as an \nargument\n of the \nplt.plot()\n function. To show the plot use the command \nplt.show()\n. Make sure to include the double parenthesis \n()\n\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\na\n \n=\n \n[\n1\n,\n \n3\n,\n \n4\n,\n \n8\n]\n\n\nplt\n.\nplot\n(\na\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis produces a plot of our four points on a set of axes. Note that our points are the y-values on the plot. The x-axis starts at zero and ends at three. Matplotlib automatically put set the x-axis as we only specified one list. Let's specifiy two lists, one for the x-values on the plot called \nx\n and one for the y-values on the plot called \ny\n. With these two lists created, we can call \nplt.plot(x,y)\n and \nplt.show()\n and we can see the changes in a new plot.\n\n\nCustomizing matplotlib plots\n\n\nAxis Labels, Title and Legend\n\n\nMatplotlib plots can be customized in a lot of ways. We are going to build upon our previous example and add a couple features to our plot. These additional plot features are: \n\n\n\n\naxis labels\n\n\ntitle\n\n\nlegend. \n\n\n\n\nEach of these features is specified by a different matplotlib command.\n\n\n\n\n\n\n\n\nPlot feature\n\n\nmatplotlib command\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nx-axis label\n\n\nplt.xlabel()\n\n\nplt.xlabel('time in seconds')\n\n\n\n\n\n\nx-axis limits\n\n\nplt.xlim()\n\n\nplt.xlim([0, 10])\n\n\n\n\n\n\ny-axis label\n\n\nplt.ylabel()\n\n\nplt.ylabel('distance in meters')\n\n\n\n\n\n\ny-axis limits\n\n\nplt.ylim()\n\n\nplt.ylim([-5, 5])\n\n\n\n\n\n\ntitle\n\n\nplt.title()\n\n\nplt.title('distance vs. time')\n\n\n\n\n\n\nlegend\n\n\nplt.legend()\n\n\nplt.legend(['run 1'])\n\n\n\n\n\n\n\n\nNote the words passed into the \nplt.xlabel()\n, \nplt.ylabel()\n and \nplt.title()\n need to be enclosed in quotation marks \n'  '\n. In Python, quotation marks denote \nstrings\n. A string is a data type which contains letter, numbers, punctuation, symbols and spaces. The \nplt.legend()\n function expects a list of strings. \n\n\nA list of strings is similar to a list of numbers. The list is defined using square brackets \n[ ]\n. A list of strings needs to have each string enclosed in quotes \n'  '\n and separated by a comma \n,\n as in \n['string1','string2',string3']\n. If there is only one line on a plot, only one string needs to be in the list strings passed to \nplt.legend()\n. Even if there is only one string in a list, the square brackets used to define the list still need to be included (otherwise a simple string is defined, not a list of strings).\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\nx\n \n=\n \n[\n0\n,\n \n2\n,\n \n4\n,\n \n6\n]\n\n\ny\n \n=\n \n[\n1\n,\n \n3\n,\n \n4\n,\n \n8\n]\n\n\nplt\n.\nplot\n(\nx\n,\ny\n)\n\n\nplt\n.\nxlabel\n(\n'x values'\n)\n\n\nplt\n.\nylabel\n(\n'y values'\n)\n\n\nplt\n.\ntitle\n(\n'plotted x and y values'\n)\n\n\nplt\n.\nlegend\n([\n'line 1'\n])\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLine Color, Line Width, Line Style, Line Opacity and Marker Options\n\n\nThe color, width and style of lines and markers in a matplotlib plot can be customized. Line color, line width and line style are included as extra \nkey word arguments\n in the \nplt.plot()\n function call. A key word argument is a special type of argument passed into a function that must be stated explicitly by name. Regular arguments passed to functions are called \npositional arguments\n. Positional arguments need to be passed to the function in order, but their names do not need to be specified. In the code line below \nx\n and \ny\n are postional arguments and \ncolor\n is a key word argument.\n\n\nplt.plot(x, y, color='r')\n\n\n\n\nExamples of some of the keyword arguments that can be specified in a \nplt.plot()\n function call are in the table below:\n\n\n\n\n\n\n\n\nPlot feature\n\n\nplt.plot() keyword argument\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nwidth of line\n\n\nlinewidth\n\n\nplt.plot(x, y, linewidth = 4)\n\n\n\n\n\n\nsolid, dashed, dotted line\n\n\nlinestyle\n\n\nplt.plot(x, y, linestyle = '-')\n\n\n\n\n\n\nline color\n\n\ncolor\n\n\nplt.plot(x, y, color = 'red')\n\n\n\n\n\n\nline opacity (transparency)\n\n\nalpha\n\n\nplt.plot(x, y, alpha = 0.5)\n\n\n\n\n\n\nmarker shape\n\n\nmarker\n\n\nplt.plot(x, y, marker = 'o')\n\n\n\n\n\n\n\n\nThe general format of a long \nplt.plot()\n function call is: \n\n\nplt.plot(<x-data>,<y-data>, linewideth=<float or int>, linestyle='<linestyle abbreviation>', color='<color abbreviation>', marker='<marker abbreviation>')\n\n\n\n\nAn example \nplt.plot()\n line including line width, style, color, opacity  and marker type is: \n\n\nplt.plot(x, y, linewidth=2.0, linestyle='+', color='b', alpha=0.5, marker='o')\n\n\n\n\nlinewidth\n\n\nBelow is a list of linewidths (many other widths are also available)\n\n\n\n\n\n\n\n\nlinewidth=<float or int>\n\n\nLine Width\n\n\n\n\n\n\n\n\n\n\n0.5\n\n\n0.5 pixels wide\n\n\n\n\n\n\n1\n\n\n1 pixel wide\n\n\n\n\n\n\n1.5\n\n\n1.5 pixels wide\n\n\n\n\n\n\n2\n\n\n2 pixels wide\n\n\n\n\n\n\n3\n\n\n3 pixels wide\n\n\n\n\n\n\n\n\nline style\n\n\nBelow is a list of line styles\n\n\n\n\n\n\n\n\nlinestyle='<style abbreviation>'\n\n\nLine Style\n\n\n\n\n\n\n\n\n\n\n'-'\n or \n'solid'\n\n\nsolid line (default)\n\n\n\n\n\n\n'--'\n or \n'dashed'\n\n\ndashed line\n\n\n\n\n\n\n'-.'\n or \n'dashdot'\n\n\ndash-dot line\n\n\n\n\n\n\n':'\n or \n'dotted'\n\n\ndotted line\n\n\n\n\n\n\n'None'\n or \n' '\n or \n''\n\n\nno line\n\n\n\n\n\n\n\n\ncolor\n\n\nBelow is a list of color abbreviations. Note \n'b'\n is used for blue and \n'k'\n is used for black.\n\n\n\n\n\n\n\n\ncolor ='<color abbreviation>'\n\n\nColor Name\n\n\n\n\n\n\n\n\n\n\n'b'\n\n\nBlue\n\n\n\n\n\n\n'c'\n\n\nCyan\n\n\n\n\n\n\n'g'\n\n\nGreen\n\n\n\n\n\n\n'k'\n\n\nBlack\n\n\n\n\n\n\n'm'\n\n\nmagenta\n\n\n\n\n\n\n'r'\n\n\nRed\n\n\n\n\n\n\n'w'\n\n\nWhite\n\n\n\n\n\n\n'y'\n\n\nYellow\n\n\n\n\n\n\n\n\nColors can also be specified in hexadecimal form surrounded by quotation marks like \n'#FF69B4'\n or in RGBA (red,green,blue,oppacity) color surounded by parenthesis like \n(255,182,193,0.5)\n.\n\n\n\n\n\n\n\n\ncolor ='<color abbreviation>'\n\n\nColor Format\n\n\n\n\n\n\n\n\n\n\n'#FF69B4'\n\n\nhexadecimal\n\n\n\n\n\n\n(255,182,193,0.5)\n\n\nRGBA\n\n\n\n\n\n\n\n\nalpha\n\n\nBelow is a list of alpha (opacity) values (any alpha value between 0.0 and 1.0 is possible)\n\n\n\n\n\n\n\n\nalpha = <float or int>\n\n\nOpacity\n\n\n\n\n\n\n\n\n\n\n0\n\n\ntransparent\n\n\n\n\n\n\n0.5\n\n\nHalf transparent\n\n\n\n\n\n\n1.0\n\n\nOpaque\n\n\n\n\n\n\n\n\nmarker shape\n\n\nBelow is a list of maker styles\n\n\n\n\n\n\n\n\nmarker='<marker abbreviation>'\n\n\nMarker Style\n\n\n\n\n\n\n\n\n\n\n\".\"\n\n\npoint\n\n\n\n\n\n\n\"o\"\n\n\ncircle\n\n\n\n\n\n\n\"v\"\n\n\ntriangle_down\n\n\n\n\n\n\n\"^\"\n\n\ntriangle_up\n\n\n\n\n\n\n\"s\"\n\n\nsquare\n\n\n\n\n\n\n\"*\"\n\n\nstar\n\n\n\n\n\n\n\"h\"\n\n\nhexagon\n\n\n\n\n\n\n\"+\"\n\n\nplus\n\n\n\n\n\n\n\"P\"\n\n\nfilled plus\n\n\n\n\n\n\n\"x\"\n\n\nx\n\n\n\n\n\n\n\"X\"\n\n\nfilled x\n\n\n\n\n\n\n\"D\"\n\n\ndiamond\n\n\n\n\n\n\n\"d\"\n\n\nthin diamond\n\n\n\n\n\n\n\n\nIn addition to \nmarker='<marker style>'\n, the color of the marker edge, the color of the marker face and the size of the marker can be specified with:\n\n\nplt.plot( .... markeredgecolor='<color abbreviation>', markerfacecolor='<color abbreviation>', markersize=<float or int>....)\n\n\nLet's customize our plot with:\n\n\n\n\nline width of 0.5\n\n\ndashed line\n\n\nred line\n\n\ncircle markers\n\n\nmarker size of 10\n\n\nmarker face color mostly transparent (alpha = 0.1)\n\n\n\n\nWe can do this with one \nplt.plot()\n function call:\n\n\n\n\n\nIn\u00a0[8]:\n\n\n\n    \n\n\nx\n \n=\n \n[\n0\n,\n \n2\n,\n \n4\n,\n \n6\n]\n\n\ny\n \n=\n \n[\n1\n,\n \n3\n,\n \n4\n,\n \n8\n]\n\n\nplt\n.\nplot\n(\nx\n,\n \ny\n,\n \nlinewidth\n=\n0.5\n,\n \nlinestyle\n=\n'--'\n,\n \ncolor\n=\n'r'\n,\n \nmarker\n=\n'o'\n,\n \nmarkersize\n=\n10\n,\n \nmarkerfacecolor\n=\n(\n1\n,\n0\n,\n0\n,\n0.1\n))\n\n\nplt\n.\nshow\n()",
            "title": "Customizing matplotlib plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.03-Line-Plots/#line-plots",
            "text": "Line plots in matplotlib can be created using matplotlib's pyplot library. To create a plot with Python and matplotlib, first import matplotlib's pyplot library using the line  import matplot.pyplot as plt  It is common practice to use the alias  plt  for the  matplotlib.pyplot  library. Defining  matplotlib.pyplot  as  plt  allows us to use  plt.<function name>  instead of  matplotlib.pyplot.<function name>  in the rest of our code. See the differences below:  importing  matplotlib.pyplot  with no alias  import matplotlib.pyplot\n\nmatplotlib.pyplot.plot(x, y)  importing  matplotlib.pyplot  with the alias  plt  import matplotlib.pyplot as plt\n\nplt.plot(x, y)  Using the alias  plt  simplifies the look of the code and cuts down on the amount of typing we have to do. You can use any alias you like such as  import matplotlib.pyplot as RainbowUnicorn , but the  plt  alias is common convention.  If building matplotlib plots in a jupyter notebook, include the line:  %matplotlib inline  below the import line. \nFirst import matplotlib. If using a jupyter notebook include the line  %matplotlib inline    In\u00a0[4]:  \n      import   matplotlib.pyplot   as   plt  # if using a jupyter notebook, include:  % matplotlib  inline     \nOnce we have imported matplotlib and instructed our jupyternotebook to display plots inline, we can create some data to plot. We will create this data as a Pyton  list . A list is a built in data structure in Python that can store multiple values. Lists are defined in Python using square brackets  [ ] . The elements of a list are seperated using commas  [item1, item2, item 3] .  An example line of code to create a list of numbers in Python is:  a = [1, 3, 4, 8]  We can define a list of numbers in a code cell and plot them with matplotlib using matplotlib's  plt.plot()  function. We pass in our list of numbers as an  argument  of the  plt.plot()  function. To show the plot use the command  plt.show() . Make sure to include the double parenthesis  ()    In\u00a0[5]:  \n      a   =   [ 1 ,   3 ,   4 ,   8 ]  plt . plot ( a )  plt . show ()                \nThis produces a plot of our four points on a set of axes. Note that our points are the y-values on the plot. The x-axis starts at zero and ends at three. Matplotlib automatically put set the x-axis as we only specified one list. Let's specifiy two lists, one for the x-values on the plot called  x  and one for the y-values on the plot called  y . With these two lists created, we can call  plt.plot(x,y)  and  plt.show()  and we can see the changes in a new plot.",
            "title": "Line Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.03-Line-Plots/#customizing-matplotlib-plots",
            "text": "",
            "title": "Customizing matplotlib plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.03-Line-Plots/#axis-labels-title-and-legend",
            "text": "Matplotlib plots can be customized in a lot of ways. We are going to build upon our previous example and add a couple features to our plot. These additional plot features are:    axis labels  title  legend.    Each of these features is specified by a different matplotlib command.     Plot feature  matplotlib command  Example      x-axis label  plt.xlabel()  plt.xlabel('time in seconds')    x-axis limits  plt.xlim()  plt.xlim([0, 10])    y-axis label  plt.ylabel()  plt.ylabel('distance in meters')    y-axis limits  plt.ylim()  plt.ylim([-5, 5])    title  plt.title()  plt.title('distance vs. time')    legend  plt.legend()  plt.legend(['run 1'])     Note the words passed into the  plt.xlabel() ,  plt.ylabel()  and  plt.title()  need to be enclosed in quotation marks  '  ' . In Python, quotation marks denote  strings . A string is a data type which contains letter, numbers, punctuation, symbols and spaces. The  plt.legend()  function expects a list of strings.   A list of strings is similar to a list of numbers. The list is defined using square brackets  [ ] . A list of strings needs to have each string enclosed in quotes  '  '  and separated by a comma  ,  as in  ['string1','string2',string3'] . If there is only one line on a plot, only one string needs to be in the list strings passed to  plt.legend() . Even if there is only one string in a list, the square brackets used to define the list still need to be included (otherwise a simple string is defined, not a list of strings).   In\u00a0[7]:  \n      x   =   [ 0 ,   2 ,   4 ,   6 ]  y   =   [ 1 ,   3 ,   4 ,   8 ]  plt . plot ( x , y )  plt . xlabel ( 'x values' )  plt . ylabel ( 'y values' )  plt . title ( 'plotted x and y values' )  plt . legend ([ 'line 1' ])  plt . show ()",
            "title": "Axis Labels, Title and Legend"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.03-Line-Plots/#line-color-line-width-line-style-line-opacity-and-marker-options",
            "text": "The color, width and style of lines and markers in a matplotlib plot can be customized. Line color, line width and line style are included as extra  key word arguments  in the  plt.plot()  function call. A key word argument is a special type of argument passed into a function that must be stated explicitly by name. Regular arguments passed to functions are called  positional arguments . Positional arguments need to be passed to the function in order, but their names do not need to be specified. In the code line below  x  and  y  are postional arguments and  color  is a key word argument.  plt.plot(x, y, color='r')  Examples of some of the keyword arguments that can be specified in a  plt.plot()  function call are in the table below:     Plot feature  plt.plot() keyword argument  Example      width of line  linewidth  plt.plot(x, y, linewidth = 4)    solid, dashed, dotted line  linestyle  plt.plot(x, y, linestyle = '-')    line color  color  plt.plot(x, y, color = 'red')    line opacity (transparency)  alpha  plt.plot(x, y, alpha = 0.5)    marker shape  marker  plt.plot(x, y, marker = 'o')     The general format of a long  plt.plot()  function call is:   plt.plot(<x-data>,<y-data>, linewideth=<float or int>, linestyle='<linestyle abbreviation>', color='<color abbreviation>', marker='<marker abbreviation>')  An example  plt.plot()  line including line width, style, color, opacity  and marker type is:   plt.plot(x, y, linewidth=2.0, linestyle='+', color='b', alpha=0.5, marker='o')",
            "title": "Line Color, Line Width, Line Style, Line Opacity and Marker Options"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.03-Line-Plots/#linewidth",
            "text": "Below is a list of linewidths (many other widths are also available)     linewidth=<float or int>  Line Width      0.5  0.5 pixels wide    1  1 pixel wide    1.5  1.5 pixels wide    2  2 pixels wide    3  3 pixels wide",
            "title": "linewidth"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.03-Line-Plots/#line-style",
            "text": "Below is a list of line styles     linestyle='<style abbreviation>'  Line Style      '-'  or  'solid'  solid line (default)    '--'  or  'dashed'  dashed line    '-.'  or  'dashdot'  dash-dot line    ':'  or  'dotted'  dotted line    'None'  or  ' '  or  ''  no line",
            "title": "line style"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.03-Line-Plots/#color",
            "text": "Below is a list of color abbreviations. Note  'b'  is used for blue and  'k'  is used for black.     color ='<color abbreviation>'  Color Name      'b'  Blue    'c'  Cyan    'g'  Green    'k'  Black    'm'  magenta    'r'  Red    'w'  White    'y'  Yellow     Colors can also be specified in hexadecimal form surrounded by quotation marks like  '#FF69B4'  or in RGBA (red,green,blue,oppacity) color surounded by parenthesis like  (255,182,193,0.5) .     color ='<color abbreviation>'  Color Format      '#FF69B4'  hexadecimal    (255,182,193,0.5)  RGBA",
            "title": "color"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.03-Line-Plots/#alpha",
            "text": "Below is a list of alpha (opacity) values (any alpha value between 0.0 and 1.0 is possible)     alpha = <float or int>  Opacity      0  transparent    0.5  Half transparent    1.0  Opaque",
            "title": "alpha"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.03-Line-Plots/#marker-shape",
            "text": "Below is a list of maker styles     marker='<marker abbreviation>'  Marker Style      \".\"  point    \"o\"  circle    \"v\"  triangle_down    \"^\"  triangle_up    \"s\"  square    \"*\"  star    \"h\"  hexagon    \"+\"  plus    \"P\"  filled plus    \"x\"  x    \"X\"  filled x    \"D\"  diamond    \"d\"  thin diamond     In addition to  marker='<marker style>' , the color of the marker edge, the color of the marker face and the size of the marker can be specified with:  plt.plot( .... markeredgecolor='<color abbreviation>', markerfacecolor='<color abbreviation>', markersize=<float or int>....)  Let's customize our plot with:   line width of 0.5  dashed line  red line  circle markers  marker size of 10  marker face color mostly transparent (alpha = 0.1)   We can do this with one  plt.plot()  function call:   In\u00a0[8]:  \n      x   =   [ 0 ,   2 ,   4 ,   6 ]  y   =   [ 1 ,   3 ,   4 ,   8 ]  plt . plot ( x ,   y ,   linewidth = 0.5 ,   linestyle = '--' ,   color = 'r' ,   marker = 'o' ,   markersize = 10 ,   markerfacecolor = ( 1 , 0 , 0 , 0.1 ))  plt . show ()",
            "title": "marker shape"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.04-Saving-Plots/",
            "text": "Saving plots\n\n\nPlots can be saved with the \nplt.savefig()\n fuction. The \nsavefig()\n fuction should be called right below the \nplt.show()\n line. You want all the features of the plot specified and created before the figure is saved. If the figure is saved after the plt.show() command, the figure will not be saved until the plot window is closed which can be problematic if building plots in a jupyter notebook with \n%matplotlib inline\n enabled. A standard save fig command is:\n\n\nplt.savefig('plot.png', dpi=300, bbox_inches='tight')\n\n\n\n\nWhere \n'plot.png'\n is the name of the saved image. Matplotlib will infern the image file format (.png, .jpg etc) based on the extension included in the file name. \n\n\nThe keyword argument \ndpi=\n specifies how many dots per inch the saved (saved image resolution). For an image on a webpage \ndpi=72\n is fine. For an image designed to go in a written report or .pdf \ndpi=300\n is probobly better. \n\n\nThe keyword argument \nbbox_inches='tight'\n may or may not be needed. If the axis labels of the plot are cut off in the image, setting \nbbox_inches='tight'\n can help solve the problem.\n\n\nLet's save one of the line plots from the previous section the file name: plot.png\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n%\nmatplotlib\n inline\n\n\nx\n \n=\n \n[\n0\n,\n \n2\n,\n \n4\n,\n \n6\n]\n\n\ny\n \n=\n \n[\n1\n,\n \n3\n,\n \n4\n,\n \n8\n]\n\n\nplt\n.\nplot\n(\nx\n,\ny\n)\n\n\nplt\n.\nxlabel\n(\n'x values'\n)\n\n\nplt\n.\nylabel\n(\n'y values'\n)\n\n\nplt\n.\ntitle\n(\n'plotted x and y values'\n)\n\n\nplt\n.\nlegend\n([\n'line 1'\n])\n\n\n#save the figure\n\n\nplt\n.\nsavefig\n(\n'plot.png'\n,\n \ndpi\n=\n300\n,\n \nbbox_inches\n=\n'tight'\n)\n\n\nplt\n.\nshow\n()",
            "title": "Saving plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.04-Saving-Plots/#saving-plots",
            "text": "Plots can be saved with the  plt.savefig()  fuction. The  savefig()  fuction should be called right below the  plt.show()  line. You want all the features of the plot specified and created before the figure is saved. If the figure is saved after the plt.show() command, the figure will not be saved until the plot window is closed which can be problematic if building plots in a jupyter notebook with  %matplotlib inline  enabled. A standard save fig command is:  plt.savefig('plot.png', dpi=300, bbox_inches='tight')  Where  'plot.png'  is the name of the saved image. Matplotlib will infern the image file format (.png, .jpg etc) based on the extension included in the file name.   The keyword argument  dpi=  specifies how many dots per inch the saved (saved image resolution). For an image on a webpage  dpi=72  is fine. For an image designed to go in a written report or .pdf  dpi=300  is probobly better.   The keyword argument  bbox_inches='tight'  may or may not be needed. If the axis labels of the plot are cut off in the image, setting  bbox_inches='tight'  can help solve the problem.  Let's save one of the line plots from the previous section the file name: plot.png   In\u00a0[3]:  \n      import   matplotlib.pyplot   as   plt  % matplotlib  inline  x   =   [ 0 ,   2 ,   4 ,   6 ]  y   =   [ 1 ,   3 ,   4 ,   8 ]  plt . plot ( x , y )  plt . xlabel ( 'x values' )  plt . ylabel ( 'y values' )  plt . title ( 'plotted x and y values' )  plt . legend ([ 'line 1' ])  #save the figure  plt . savefig ( 'plot.png' ,   dpi = 300 ,   bbox_inches = 'tight' )  plt . show ()",
            "title": "Saving plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.05-Multi-Line-Plots/",
            "text": "Multi Line Plots\n\n\nMulti-line plots in matplotlib are created using matplotlib's pyplot library. In this section we will build upon the work in the previous section where a plot with one line was created\nTo construct the data series for our multi-line plot, we'll use the \nnumpy\n module. \nNumpy\n is a module for dealing with numerical data in Python, particularly with numerical data stored in matricies and arrays. Instead of defining a Python list of numbers to plot, we'll use \nnumpy\n to create an \narray\n of numbers. An array is a data structure that is multi-dimensional and only contains one data type. Arrays are different from lists in Python because lists are one dimensional and can contain many different data types.\n\n\nThe array below is 2D array. It has both rows and columns. It is a 3 x 3 array (3 rows by 3 columns) and only contains floats\n\n\n| | | \n| --- | --- | ---|\n| 4.0 | 2.1 | 3.2 |\n| 0.0 | 0.5 | 1.77 |\n| 15.0 | -0.2 | 1.0 |\n\n\nThe Python list below is a 1D data structure. It only has one row. The list contains three different data types: an integer, a float and a string\n\n\nmylist = [ 4, 0.003, 'red' ]\n\n\n\n\nTo use the numpy module we must import it into our script. By convention \nnumpy\n is imported as \nnp\n\n\nimport numpy as np\n\n\n\n\nOnce imported we can use any of numpy's functions, such as the \nnp.arange()\n function and the \nnp.sin()\n function. A difference with the numpy \nnp.sin()\n function compared to the \nmath.sin()\n function from Python's standard library is that \nnp.sin()\n can take the sine of every element in an array, while \nmath.sin()\n can only find the sine of one number. \n\n\nThe \nnp.arange\n function will create an array according to the following specifications:\n\n\nnp.arange( start, stop, step )\n\n\n\n\nWhere \nstart\n is the first number in the array, \nstop\n is the last number in the array (actually the last number in the array is \nstop - 1step\n) and \nstep\n is how far apart the numbers in the array are. \n\n\nTo create an array starting at 0, ending at 12 and counting by 2's we would code:\n\n\nmyarray = np.arange(0, 10, 2)\n\n\n\n\nLet's import \nnumpy\n and build an array that goes from 0 to 4\npi\npi\n in increments of 0.01. Then we will find the sine of each number in the array and plot the results with matplotlib.\n\n\n\n\n\nIn\u00a0[9]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nx\n \n=\n \nnp\n.\narange\n(\n0\n,\n4\n*\nnp\n.\npi\n,\n0.1\n)\n\n\ny\n \n=\n \nnp\n.\nsin\n(\nx\n)\n\n\nplt\n.\nplot\n(\nx\n,\ny\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo build a plot with two lines, construct two arrays of y-points and pass them into the \nplt.plot()\n function in the form of:\n\n\nplt.plot(x1,y1,x2,y2)\n\n\n\n\nWhere \nx1\n and \ny1\n denote the first line of the plot and \nx2\n,\ny2\n denotes the second line of the plot\n\n\n\n\n\nIn\u00a0[10]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nx\n \n=\n \nnp\n.\narange\n(\n0\n,\n4\n*\nnp\n.\npi\n,\n0.1\n)\n\n\ny1\n \n=\n \nnp\n.\nsin\n(\nx\n)\n\n\ny2\n \n=\n \nnp\n.\ncos\n(\nx\n)\n\n\nplt\n.\nplot\n(\nx\n,\ny1\n,\nx\n,\ny2\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can add a legend to our plot to show which line is which. In list of strings we supply to the \nplt.legend()\n function the first set of points \nx1\n, \ny1\n will be labeled with the first string in the list. The second set of points \nx2\n,\ny2\n will be labeled with the second string in the list. We can also add x-axis and y-axis labels to the plot with \nplt.xlabel()\n and \nplt.ylabel()\n. \nplt.title()\n adds the plot tile. \n\n\n\n\n\nIn\u00a0[34]:\n\n\n\n    \n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nx\n \n=\n \nnp\n.\narange\n(\n0\n,\n4\n*\nnp\n.\npi\n,\n0.1\n)\n\n\ny1\n \n=\n \nnp\n.\nsin\n(\nx\n)\n\n\ny2\n \n=\n \nnp\n.\ncos\n(\nx\n)\n\n\nplt\n.\nplot\n(\nx\n,\ny1\n,\nx\n,\ny2\n)\n\n\nplt\n.\nlegend\n([\n'sine'\n,\n'cosine'\n])\n\n\nplt\n.\nxlabel\n(\n'Angle (radians)'\n)\n\n\nplt\n.\nylabel\n(\n'Sine or Cosine'\n)\n\n\nplt\n.\ntitle\n(\n'Sine and Cosine of Angles 0 to 4\n\\pi\n\\pi\n radians'\n)\n\n\nplt\n.\nshow\n()",
            "title": "Multi Line Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.05-Multi-Line-Plots/#multi-line-plots",
            "text": "Multi-line plots in matplotlib are created using matplotlib's pyplot library. In this section we will build upon the work in the previous section where a plot with one line was created\nTo construct the data series for our multi-line plot, we'll use the  numpy  module.  Numpy  is a module for dealing with numerical data in Python, particularly with numerical data stored in matricies and arrays. Instead of defining a Python list of numbers to plot, we'll use  numpy  to create an  array  of numbers. An array is a data structure that is multi-dimensional and only contains one data type. Arrays are different from lists in Python because lists are one dimensional and can contain many different data types.  The array below is 2D array. It has both rows and columns. It is a 3 x 3 array (3 rows by 3 columns) and only contains floats  | | | \n| --- | --- | ---|\n| 4.0 | 2.1 | 3.2 |\n| 0.0 | 0.5 | 1.77 |\n| 15.0 | -0.2 | 1.0 |  The Python list below is a 1D data structure. It only has one row. The list contains three different data types: an integer, a float and a string  mylist = [ 4, 0.003, 'red' ]  To use the numpy module we must import it into our script. By convention  numpy  is imported as  np  import numpy as np  Once imported we can use any of numpy's functions, such as the  np.arange()  function and the  np.sin()  function. A difference with the numpy  np.sin()  function compared to the  math.sin()  function from Python's standard library is that  np.sin()  can take the sine of every element in an array, while  math.sin()  can only find the sine of one number.   The  np.arange  function will create an array according to the following specifications:  np.arange( start, stop, step )  Where  start  is the first number in the array,  stop  is the last number in the array (actually the last number in the array is  stop - 1step ) and  step  is how far apart the numbers in the array are.   To create an array starting at 0, ending at 12 and counting by 2's we would code:  myarray = np.arange(0, 10, 2)  Let's import  numpy  and build an array that goes from 0 to 4 pi pi  in increments of 0.01. Then we will find the sine of each number in the array and plot the results with matplotlib.   In\u00a0[9]:  \n      import   numpy   as   np  x   =   np . arange ( 0 , 4 * np . pi , 0.1 )  y   =   np . sin ( x )  plt . plot ( x , y )  plt . show ()                \nTo build a plot with two lines, construct two arrays of y-points and pass them into the  plt.plot()  function in the form of:  plt.plot(x1,y1,x2,y2)  Where  x1  and  y1  denote the first line of the plot and  x2 , y2  denotes the second line of the plot   In\u00a0[10]:  \n      import   numpy   as   np  x   =   np . arange ( 0 , 4 * np . pi , 0.1 )  y1   =   np . sin ( x )  y2   =   np . cos ( x )  plt . plot ( x , y1 , x , y2 )  plt . show ()                \nWe can add a legend to our plot to show which line is which. In list of strings we supply to the  plt.legend()  function the first set of points  x1 ,  y1  will be labeled with the first string in the list. The second set of points  x2 , y2  will be labeled with the second string in the list. We can also add x-axis and y-axis labels to the plot with  plt.xlabel()  and  plt.ylabel() .  plt.title()  adds the plot tile.    In\u00a0[34]:  \n      import   numpy   as   np  x   =   np . arange ( 0 , 4 * np . pi , 0.1 )  y1   =   np . sin ( x )  y2   =   np . cos ( x )  plt . plot ( x , y1 , x , y2 )  plt . legend ([ 'sine' , 'cosine' ])  plt . xlabel ( 'Angle (radians)' )  plt . ylabel ( 'Sine or Cosine' )  plt . title ( 'Sine and Cosine of Angles 0 to 4 \\pi \\pi  radians' )  plt . show ()",
            "title": "Multi Line Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.06-Bar-Charts-and-Pie-Charts/",
            "text": "Bar Plots\n\n\nBar plots in \nmatplotlib\n can be created using \nmatplotlib's\n \npyplot\n library\nTo contstruct a bar plot using \nmatplotlib\n, first import matplotlib. If using a jupyter notebook include the line \n%matplotlib inline\n\n\n\n\n\n\nIn\u00a0[10]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\nTo create a bar chart using matplotlib, we need some data. In this case the data is from a set of \ncoefficient of thermal expansion\n measurements. The coefficient of thermal expansion (CTE) is a material property that describes how much a material will change in length as a result of a change in temperature. Different materials have different CTE's and we can use the data to determine which material will expand the most if all three are heated up to the same temperature (assuming all three start at the same temperature). Below is a list of 3 materials and their corresponding CTE.\n\n\n\n\nAluminum CTE ~ 24 \u00d7 10\n-6\n \u00b0C\n-1\n\n\nCopper CTE ~ 17 \u00d7 10\n-6\n \u00b0C\n-1\n\n\nSteel CTE ~ 12 \u00d7 10\n-6\n \u00b0C\n-1\n\n\n\n\nTo build a bar chart, first we create a list of the names of the materials and a list of the coefficients of thermal expansion. We also need a list of bar positions. This seems sort of strange, but the \nplt.bar()\n method needs to know where along the x-axis to put the bars. The \nax.bar()\n method requires two positional arguments:\n\n\nplt.bar([list of bar positions],[list of bar heights])\n\n\n\n\nIf we just pass in the list of bar heights, we'll be thrown an error.\n\n\n\n\n\nIn\u00a0[20]:\n\n\n\n    \n\n\n# define the bar labels, heights, and postions\n\n\nmaterials\n \n=\n \n[\n'Aluminum'\n,\n \n'Copper'\n,\n \n'Steel'\n]\n\n\nheights\n \n=\n \n[\n24e-6\n,\n \n17e-6\n,\n \n12e-6\n]\n\n\nx_pos\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n]\n\n\n\n\n\n\n\n\n\n\n\nNext we build the plot and pass in the list of bar position \nx_pos\n and list of bar heights \nheights\n as positional arguments (they have to be in the right order) to the \nplt.bar()\n function.\n\n\n\n\n\nIn\u00a0[31]:\n\n\n\n    \n\n\n# Build the plot\n\n\nplt\n.\nbar\n(\nx_pos\n,\nheights\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet's add some details to our bar plot by specifying the bar labels and where to put those labels. We'll also decrease the opacity of the bars to make the plot look slightly different.  Besides changing opacity, there are number of other keyword arguments we can add to the \nplt.bar()\n function call to modify the plot. A table of a few of the \nplt.bar()\n keyword arguments is below:\n\n\n\n\n\n\n\n\nbar plot feature\n\n\nplt.bar() keyword argument\n\n\nExample\n\n\n\n\n\n\n\n\n\n\ncolor of the bars\n\n\ncolor\n\n\nplt.bar(x_pos, heights, color = 'g')\n\n\n\n\n\n\ncolor of bar outlines\n\n\nedgecolor\n\n\nplt.edgecolor(x_pos, heights, edgecolor = 'k')\n\n\n\n\n\n\nthickness of bar outlines\n\n\nlinewidth\n\n\nplt.bar(x_pos, heights, linewidth = 3)\n\n\n\n\n\n\ny error bar heights\n\n\nyerr\n\n\nplt.bar(x_pos, heights, yerr = [0.1, 0.3, 0.2])\n\n\n\n\n\n\nwidth of error bar caps\n\n\ncapsize\n\n\nplt.bar(x_pos, heights, capsize = 5)\n\n\n\n\n\n\n\n\nAssuming \nx_pos\n is a list of x-positions for the bars, and \nheights\n is a list of bar heights, an example \nplt.bar()\n function call might be:\n\n\nplt.bar(x_pos, heights, color='b', edgecolor='k', linewidth=4, yerr=[0.1, 0.3, 0.1], capsize=5)\n\n\n\n\nLabels can be added to the bar plot with the same \nplt\n functions used to customize line plots. These include\n\n\n\n\n\n\nIn\u00a0[15]:\n\n\n\n    \n\n\n# bar plot\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n%\nmatplotlib\n inline\n\n\nmaterials\n \n=\n \n[\n'Aluminum'\n,\n \n'Copper'\n,\n \n'Steel'\n]\n\n\nCTEs\n \n=\n \n[\n24e-6\n,\n \n17e-6\n,\n \n12e-6\n]\n\n\nbar_pos\n \n=\n \n[\n1\n,\n2\n,\n3\n]\n\n\n\nplt\n.\nbar\n(\nbar_pos\n,\n \nCTEs\n,\n \nalpha\n=\n0.5\n)\n\n\nplt\n.\nylabel\n(\n'CTE (1/*C)'\n)\n\n\nplt\n.\nxlabel\n(\n'Metals'\n)\n\n\nplt\n.\nxticks\n([\n1\n,\n2\n,\n3\n],\n \nmaterials\n)\n\n\nplt\n.\ngrid\n(\naxis\n=\n'y'\n)\n\n\nplt\n.\ntitle\n(\n'Coefficients of Thermal Expanion of three metals'\n)\n\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPie Charts\n\n\nMatplotlib can produce pie charts with the \nplt.pie()\n function. Decimal percentages or any list of floats and integers can be used to make a pie chart.\nFor a manufactured item cost can be broken down to engineering (including design), manufacturing (including raw materials), sales (including marketing) and profit.\n\n\nIf these costs for an $9.00 microcontroller are\n\n\n\n\nEngineering 1.35\n\n\nManufacturing 3.60\n\n\nSales 2.25 \n\n\nProfit 1.80\n\n\n\n\nWe can build a pie chart that shows this breakdown with \nplt.pie()\n. \nlabels=\n is a keyword argument in the \nplt.pie()\n fuction call to show labels on our pie chart. The only required positional argument is a list of the sizes for the pie pieces.\n\n\nFor pie charts in matplotlib, it is important to include the line \nplt.axis('equal')\n. This sets the x and y axis scales as equal which forces the pie chart into a circle shape. Without that line, the pie chart will look like an oval. \n\n\n\n\n\nIn\u00a0[39]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n# Pie chart, where the slices will be ordered and plotted counter-clockwise:\n\n\nlabels\n \n=\n \n'Engineering'\n,\n \n'Manufacturing'\n,\n \n'Sales'\n,\n \n'Profit'\n\n\nsizes\n \n=\n \n[\n1.35\n,\n \n3.60\n,\n \n2.25\n,\n \n1.80\n]\n\n\nplt\n.\npie\n(\nsizes\n,\n \nlabels\n=\nlabels\n)\n\n\nplt\n.\naxis\n(\n'equal'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can highlight the engineering cost by exploding out that piece of the pie chart. \nexplode=\n is an example of a \nplt.pie()\n keyword argument. The table below shows a number of useful pie chart keyword arguments:\n\n\n\n\n\n\n\n\npie chart feature\n\n\nplt.pie() keyword argument\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nlabels of pieces\n\n\nlabels\n\n\nplt.pie(sizes, labels = ['pigs','nats','elks'])\n\n\n\n\n\n\nshow percentages\n\n\nautopct\n\n\nplt.pie(sizes, autopct = '%1.1f%%'])\n\n\n\n\n\n\ncolors of pieces\n\n\ncolors\n\n\nplt.pie(sizes, colors = ['red','green','blue'])\n\n\n\n\n\n\nexplode out pieces\n\n\nexplode\n\n\nplt.pie(sizes, explode = (0.1, 0, 0))\n\n\n\n\n\n\nstarting angle of first piece\n\n\nstartangle\n\n\nplt.pie(sizes, startangle=90)\n\n\n\n\n\n\nrotate labels with pieces\n\n\nrotatelabels\n\n\nplt.pie(sizes, rotatelabels = True)\n\n\n\n\n\n\nshadow behind pieces\n\n\nshadow\n\n\nplt.pie(sizes, shadow = True)\n\n\n\n\n\n\nLet's build the following into our pie chart:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstandard colors\n\n\nEngineering piece is exploded outwards\n\n\npercentages auto calculated and shown\n\n\nshadow on each piece\n\n\nEngineering piece start at zero degrees relative to the positive x-axis\n\n\n\n\n\nIn\u00a0[38]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\n\n\n# Pie chart, where the slices will be ordered and plotted counter-clockwise:\n\n\nlabels\n \n=\n \n'Engineering'\n,\n \n'Manufacturing'\n,\n \n'Sales'\n,\n \n'Profit'\n\n\nsizes\n \n=\n \n[\n1.35\n,\n \n3.60\n,\n \n2.25\n,\n \n1.80\n]\n\n\nexplode\n \n=\n \n(\n0.1\n,\n \n0\n,\n \n0\n,\n \n0\n)\n  \n# \"explode\" the 1st slice, 'Engineering'\n\n\nplt\n.\npie\n(\nsizes\n,\n \nlabels\n=\nlabels\n,\n \n        \nexplode\n=\nexplode\n,\n \nautopct\n=\n'\n%1.1f%%\n'\n,\nshadow\n=\nTrue\n,\n \nstartangle\n=\n0\n)\n\n\nplt\n.\naxis\n(\n'equal'\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n%\nmatplotlib\n inline",
            "title": "Pie Charts"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.06-Bar-Charts-and-Pie-Charts/#bar-plots",
            "text": "Bar plots in  matplotlib  can be created using  matplotlib's   pyplot  library\nTo contstruct a bar plot using  matplotlib , first import matplotlib. If using a jupyter notebook include the line  %matplotlib inline    In\u00a0[10]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  % matplotlib  inline     \nTo create a bar chart using matplotlib, we need some data. In this case the data is from a set of  coefficient of thermal expansion  measurements. The coefficient of thermal expansion (CTE) is a material property that describes how much a material will change in length as a result of a change in temperature. Different materials have different CTE's and we can use the data to determine which material will expand the most if all three are heated up to the same temperature (assuming all three start at the same temperature). Below is a list of 3 materials and their corresponding CTE.   Aluminum CTE ~ 24 \u00d7 10 -6  \u00b0C -1  Copper CTE ~ 17 \u00d7 10 -6  \u00b0C -1  Steel CTE ~ 12 \u00d7 10 -6  \u00b0C -1   To build a bar chart, first we create a list of the names of the materials and a list of the coefficients of thermal expansion. We also need a list of bar positions. This seems sort of strange, but the  plt.bar()  method needs to know where along the x-axis to put the bars. The  ax.bar()  method requires two positional arguments:  plt.bar([list of bar positions],[list of bar heights])  If we just pass in the list of bar heights, we'll be thrown an error.   In\u00a0[20]:  \n      # define the bar labels, heights, and postions  materials   =   [ 'Aluminum' ,   'Copper' ,   'Steel' ]  heights   =   [ 24e-6 ,   17e-6 ,   12e-6 ]  x_pos   =   [ 1 ,   2 ,   3 ]      \nNext we build the plot and pass in the list of bar position  x_pos  and list of bar heights  heights  as positional arguments (they have to be in the right order) to the  plt.bar()  function.   In\u00a0[31]:  \n      # Build the plot  plt . bar ( x_pos , heights )  plt . show ()                \nLet's add some details to our bar plot by specifying the bar labels and where to put those labels. We'll also decrease the opacity of the bars to make the plot look slightly different.  Besides changing opacity, there are number of other keyword arguments we can add to the  plt.bar()  function call to modify the plot. A table of a few of the  plt.bar()  keyword arguments is below:     bar plot feature  plt.bar() keyword argument  Example      color of the bars  color  plt.bar(x_pos, heights, color = 'g')    color of bar outlines  edgecolor  plt.edgecolor(x_pos, heights, edgecolor = 'k')    thickness of bar outlines  linewidth  plt.bar(x_pos, heights, linewidth = 3)    y error bar heights  yerr  plt.bar(x_pos, heights, yerr = [0.1, 0.3, 0.2])    width of error bar caps  capsize  plt.bar(x_pos, heights, capsize = 5)     Assuming  x_pos  is a list of x-positions for the bars, and  heights  is a list of bar heights, an example  plt.bar()  function call might be:  plt.bar(x_pos, heights, color='b', edgecolor='k', linewidth=4, yerr=[0.1, 0.3, 0.1], capsize=5)  Labels can be added to the bar plot with the same  plt  functions used to customize line plots. These include    In\u00a0[15]:  \n      # bar plot  import   numpy   as   np  import   matplotlib.pyplot   as   plt  % matplotlib  inline materials   =   [ 'Aluminum' ,   'Copper' ,   'Steel' ]  CTEs   =   [ 24e-6 ,   17e-6 ,   12e-6 ]  bar_pos   =   [ 1 , 2 , 3 ]  plt . bar ( bar_pos ,   CTEs ,   alpha = 0.5 )  plt . ylabel ( 'CTE (1/*C)' )  plt . xlabel ( 'Metals' )  plt . xticks ([ 1 , 2 , 3 ],   materials )  plt . grid ( axis = 'y' )  plt . title ( 'Coefficients of Thermal Expanion of three metals' )  plt . show ()",
            "title": "Bar Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.06-Bar-Charts-and-Pie-Charts/#pie-charts",
            "text": "Matplotlib can produce pie charts with the  plt.pie()  function. Decimal percentages or any list of floats and integers can be used to make a pie chart.\nFor a manufactured item cost can be broken down to engineering (including design), manufacturing (including raw materials), sales (including marketing) and profit.  If these costs for an $9.00 microcontroller are   Engineering 1.35  Manufacturing 3.60  Sales 2.25   Profit 1.80   We can build a pie chart that shows this breakdown with  plt.pie() .  labels=  is a keyword argument in the  plt.pie()  fuction call to show labels on our pie chart. The only required positional argument is a list of the sizes for the pie pieces.  For pie charts in matplotlib, it is important to include the line  plt.axis('equal') . This sets the x and y axis scales as equal which forces the pie chart into a circle shape. Without that line, the pie chart will look like an oval.    In\u00a0[39]:  \n      import   matplotlib.pyplot   as   plt  # Pie chart, where the slices will be ordered and plotted counter-clockwise:  labels   =   'Engineering' ,   'Manufacturing' ,   'Sales' ,   'Profit'  sizes   =   [ 1.35 ,   3.60 ,   2.25 ,   1.80 ]  plt . pie ( sizes ,   labels = labels )  plt . axis ( 'equal' )  plt . show ()                \nWe can highlight the engineering cost by exploding out that piece of the pie chart.  explode=  is an example of a  plt.pie()  keyword argument. The table below shows a number of useful pie chart keyword arguments:     pie chart feature  plt.pie() keyword argument  Example      labels of pieces  labels  plt.pie(sizes, labels = ['pigs','nats','elks'])    show percentages  autopct  plt.pie(sizes, autopct = '%1.1f%%'])    colors of pieces  colors  plt.pie(sizes, colors = ['red','green','blue'])    explode out pieces  explode  plt.pie(sizes, explode = (0.1, 0, 0))    starting angle of first piece  startangle  plt.pie(sizes, startangle=90)    rotate labels with pieces  rotatelabels  plt.pie(sizes, rotatelabels = True)    shadow behind pieces  shadow  plt.pie(sizes, shadow = True)    Let's build the following into our pie chart:        standard colors  Engineering piece is exploded outwards  percentages auto calculated and shown  shadow on each piece  Engineering piece start at zero degrees relative to the positive x-axis   In\u00a0[38]:  \n      import   matplotlib.pyplot   as   plt   # Pie chart, where the slices will be ordered and plotted counter-clockwise:  labels   =   'Engineering' ,   'Manufacturing' ,   'Sales' ,   'Profit'  sizes   =   [ 1.35 ,   3.60 ,   2.25 ,   1.80 ]  explode   =   ( 0.1 ,   0 ,   0 ,   0 )    # \"explode\" the 1st slice, 'Engineering'  plt . pie ( sizes ,   labels = labels ,  \n         explode = explode ,   autopct = ' %1.1f%% ' , shadow = True ,   startangle = 0 )  plt . axis ( 'equal' )  plt . show ()                   In\u00a0[10]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  % matplotlib  inline",
            "title": "Pie Charts"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.08-Histograms/",
            "text": "Histograms\n\n\nHistorgram plots can be created with \nmatplotlib\n\nFirst import matplotlib. If using a jupyter notebook include the line \n%matplotlib inline\n\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\nLet's set a mean value mu = 80 and a standard deviation sigma = 7. We can use numpys \nnp.random.normal()\n function to produce a set of random data. The general format is:\n\n\nvar = np.random.normal(mean, stddev, size=<number of values>\n\n\n\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\nmu\n \n=\n \n80\n\n\nsigma\n \n=\n \n7\n\n\nx\n \n=\n \nnp\n.\nrandom\n.\nnormal\n(\nmu\n,\n \nsigma\n,\n \nsize\n=\n200\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe \nplt.hist()\n function will produce a historgram plot. Like line plots, bar plots and pie charts. There is a set of keyword arguments which can be added to the function call.\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nplt\n.\nhist\n(\nx\n,\n \n20\n,\n \ndensity\n=\nTrue\n,\n \nhisttype\n=\n'bar'\n,\n \nfacecolor\n=\n'b'\n,\n \nalpha\n=\n0.5\n)\n\n\nplt\n.\ntitle\n(\n'Historgram'\n)\n\n\nplt\n.\nxlabel\n(\n'x-axis'\n)\n\n\nplt\n.\nylabel\n(\n'y-axis'\n)\n\n\n#fig.tight_layout()\n\n\nplt\n.\nshow\n()",
            "title": "Histograms"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.08-Histograms/#histograms",
            "text": "Historgram plots can be created with  matplotlib \nFirst import matplotlib. If using a jupyter notebook include the line  %matplotlib inline    In\u00a0[2]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  % matplotlib  inline     \nLet's set a mean value mu = 80 and a standard deviation sigma = 7. We can use numpys  np.random.normal()  function to produce a set of random data. The general format is:  var = np.random.normal(mean, stddev, size=<number of values>    In\u00a0[5]:  \n      mu   =   80  sigma   =   7  x   =   np . random . normal ( mu ,   sigma ,   size = 200 )       The  plt.hist()  function will produce a historgram plot. Like line plots, bar plots and pie charts. There is a set of keyword arguments which can be added to the function call.   In\u00a0[6]:  \n      plt . hist ( x ,   20 ,   density = True ,   histtype = 'bar' ,   facecolor = 'b' ,   alpha = 0.5 )  plt . title ( 'Historgram' )  plt . xlabel ( 'x-axis' )  plt . ylabel ( 'y-axis' )  #fig.tight_layout()  plt . show ()",
            "title": "Histograms"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.10-Scatter-Plots/",
            "text": "Scatter Plots\n\n\nFirst import \nmatplotlib\n. If using a jupyter notebook include the line \n%matplotlib inline\n\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nN\n \n=\n \n100\n\n\nx1\n \n=\n \n1.5\n \n \nnp\n.\nrandom\n.\nrandn\n(\nN\n)\n \n+\n \n10\n\n\ny1\n \n=\n \n1.5\n \n \nnp\n.\nrandom\n.\nrandn\n(\nN\n)\n \n+\n \n10\n\n\nx2\n \n=\n \n1.5\n \n \nnp\n.\nrandom\n.\nrandn\n(\nN\n)\n \n+\n \n4\n\n\ny2\n \n=\n \n1.5\n \n \nnp\n.\nrandom\n.\nrandn\n(\nN\n)\n \n+\n \n4\n\n\nx\n \n=\n \nnp\n.\nappend\n(\nx1\n,\nx2\n)\n\n\ny\n \n=\n \nnp\n.\nappend\n(\ny1\n,\ny2\n)\n\n\ncolors\n \n=\n \nnp\n.\nrandom\n.\nrand\n(\nN\n2\n)\n\n\narea\n \n=\n \nnp\n.\npi\n \n \n(\n8\n \n \nnp\n.\nrandom\n.\nrand\n(\nN\n2\n))\n**\n2\n  \n# 0 to 15 point radii\n\n\nplt\n.\nscatter\n(\nx\n,\n \ny\n,\n \ns\n=\narea\n,\n \nc\n=\ncolors\n,\n \nalpha\n=\n0.5\n)\n\n\nplt\n.\nshow\n()",
            "title": "Scatter Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.10-Scatter-Plots/#scatter-plots",
            "text": "First import  matplotlib . If using a jupyter notebook include the line  %matplotlib inline    In\u00a0[1]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  % matplotlib  inline        In\u00a0[2]:  \n      N   =   100  x1   =   1.5     np . random . randn ( N )   +   10  y1   =   1.5     np . random . randn ( N )   +   10  x2   =   1.5     np . random . randn ( N )   +   4  y2   =   1.5     np . random . randn ( N )   +   4  x   =   np . append ( x1 , x2 )  y   =   np . append ( y1 , y2 )  colors   =   np . random . rand ( N 2 )  area   =   np . pi     ( 8     np . random . rand ( N 2 )) ** 2    # 0 to 15 point radii  plt . scatter ( x ,   y ,   s = area ,   c = colors ,   alpha = 0.5 )  plt . show ()",
            "title": "Scatter Plots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.11-Plot-Annotations/",
            "text": "Plot annotations\n\n\nSometimes it is useful for engineers to annotate plots. Text can be included on a plot to indicate a point of intrest. \nFirst import \nmatplotlib\n. If using a jupyter notebook include the line \n%matplotlib inline\n\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nt\n \n=\n \nnp\n.\narange\n(\n0.0\n,\n \n5.0\n,\n \n0.01\n)\n\n\ns\n \n=\n \nnp\n.\ncos\n(\n2\nnp\n.\npi\nt\n)\n\n\n# Plot a line and add some simple annotations\n\n\nline\n,\n \n=\n \nax\n.\nplot\n(\nt\n,\n \ns\n)\n\n\nax\n.\nannotate\n(\n'figure pixels'\n,\n\n            \nxy\n=\n(\n10\n,\n \n10\n),\n \nxycoords\n=\n'figure pixels'\n)\n\n\nax\n.\nannotate\n(\n'figure points'\n,\n\n            \nxy\n=\n(\n80\n,\n \n80\n),\n \nxycoords\n=\n'figure points'\n)\n\n\nax\n.\nannotate\n(\n'figure fraction'\n,\n\n            \nxy\n=\n(\n.\n025\n,\n \n.\n975\n),\n \nxycoords\n=\n'figure fraction'\n,\n\n            \nhorizontalalignment\n=\n'left'\n,\n \nverticalalignment\n=\n'top'\n,\n\n            \nfontsize\n=\n20\n)\n\n\n# The following examples show off how these arrows are drawn.\n\n\nax\n.\nannotate\n(\n'point offset from data'\n,\n\n            \nxy\n=\n(\n2\n,\n \n1\n),\n \nxycoords\n=\n'data'\n,\n\n            \nxytext\n=\n(\n-\n15\n,\n \n25\n),\n \ntextcoords\n=\n'offset points'\n,\n\n            \narrowprops\n=\ndict\n(\nfacecolor\n=\n'black'\n,\n \nshrink\n=\n0.05\n),\n\n            \nhorizontalalignment\n=\n'right'\n,\n \nverticalalignment\n=\n'bottom'\n)\n\n\nax\n.\nannotate\n(\n'axes fraction'\n,\n\n            \nxy\n=\n(\n3\n,\n \n1\n),\n \nxycoords\n=\n'data'\n,\n\n            \nxytext\n=\n(\n0.8\n,\n \n0.95\n),\n \ntextcoords\n=\n'axes fraction'\n,\n\n            \narrowprops\n=\ndict\n(\nfacecolor\n=\n'black'\n,\n \nshrink\n=\n0.05\n),\n\n            \nhorizontalalignment\n=\n'right'\n,\n \nverticalalignment\n=\n'top'\n)\n\n\n# You may also use negative points or pixels to specify from (right, top).\n\n\n# E.g., (-10, 10) is 10 points to the left of the right side of the axes and 10\n\n\n# points above the bottom\n\n\nax\n.\nannotate\n(\n'pixel offset from axes fraction'\n,\n\n            \nxy\n=\n(\n1\n,\n \n0\n),\n \nxycoords\n=\n'axes fraction'\n,\n\n            \nxytext\n=\n(\n-\n20\n,\n \n20\n),\n \ntextcoords\n=\n'offset pixels'\n,\n\n            \nhorizontalalignment\n=\n'right'\n,\n\n            \nverticalalignment\n=\n'bottom'\n)\n\n\nax\n.\nset\n(\nxlim\n=\n(\n-\n1\n,\n \n5\n),\n \nylim\n=\n(\n-\n3\n,\n \n5\n))\n\n\nplt\n.\nshow\n()",
            "title": "Plot annotations"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.11-Plot-Annotations/#plot-annotations",
            "text": "Sometimes it is useful for engineers to annotate plots. Text can be included on a plot to indicate a point of intrest. \nFirst import  matplotlib . If using a jupyter notebook include the line  %matplotlib inline    In\u00a0[1]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  % matplotlib  inline        In\u00a0[2]:  \n      fig ,   ax   =   plt . subplots ()  t   =   np . arange ( 0.0 ,   5.0 ,   0.01 )  s   =   np . cos ( 2 np . pi t )  # Plot a line and add some simple annotations  line ,   =   ax . plot ( t ,   s )  ax . annotate ( 'figure pixels' , \n             xy = ( 10 ,   10 ),   xycoords = 'figure pixels' )  ax . annotate ( 'figure points' , \n             xy = ( 80 ,   80 ),   xycoords = 'figure points' )  ax . annotate ( 'figure fraction' , \n             xy = ( . 025 ,   . 975 ),   xycoords = 'figure fraction' , \n             horizontalalignment = 'left' ,   verticalalignment = 'top' , \n             fontsize = 20 )  # The following examples show off how these arrows are drawn.  ax . annotate ( 'point offset from data' , \n             xy = ( 2 ,   1 ),   xycoords = 'data' , \n             xytext = ( - 15 ,   25 ),   textcoords = 'offset points' , \n             arrowprops = dict ( facecolor = 'black' ,   shrink = 0.05 ), \n             horizontalalignment = 'right' ,   verticalalignment = 'bottom' )  ax . annotate ( 'axes fraction' , \n             xy = ( 3 ,   1 ),   xycoords = 'data' , \n             xytext = ( 0.8 ,   0.95 ),   textcoords = 'axes fraction' , \n             arrowprops = dict ( facecolor = 'black' ,   shrink = 0.05 ), \n             horizontalalignment = 'right' ,   verticalalignment = 'top' )  # You may also use negative points or pixels to specify from (right, top).  # E.g., (-10, 10) is 10 points to the left of the right side of the axes and 10  # points above the bottom  ax . annotate ( 'pixel offset from axes fraction' , \n             xy = ( 1 ,   0 ),   xycoords = 'axes fraction' , \n             xytext = ( - 20 ,   20 ),   textcoords = 'offset pixels' , \n             horizontalalignment = 'right' , \n             verticalalignment = 'bottom' )  ax . set ( xlim = ( - 1 ,   5 ),   ylim = ( - 3 ,   5 ))  plt . show ()",
            "title": "Plot annotations"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.12-Subplots/",
            "text": "Subplots\n\n\nSometimes it is useful for engineers to include a couple plots side by side. This can be done in \nmatplotlib\n using \nsubplots\n\nFirst import matplotlib. If using a jupyter notebook include the line \n%matplotlib inline\n\n\n\n\n\n\nIn\u00a0[1]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\n# Data for plotting\n\n\nt\n \n=\n \nnp\n.\narange\n(\n0.01\n,\n \n20.0\n,\n \n0.01\n)\n\n\n# Create figure\n\n\nfig\n,\n \n((\nax1\n,\n \nax2\n),\n \n(\nax3\n,\n \nax4\n))\n \n=\n \nplt\n.\nsubplots\n(\n2\n,\n \n2\n)\n\n\n# linear x and y axis\n\n\nax1\n.\nplot\n(\nt\n,\n \nnp\n.\nexp\n(\n-\nt\n \n/\n \n5.0\n))\n\n\nax1\n.\nset\n(\ntitle\n=\n'linear x and y'\n)\n\n\nax1\n.\ngrid\n()\n\n\n# log y axis\n\n\nax2\n.\nsemilogy\n(\nt\n,\n \nnp\n.\nexp\n(\n-\nt\n \n/\n \n5.0\n))\n\n\nax2\n.\nset\n(\ntitle\n=\n'semilogy'\n)\n\n\nax2\n.\ngrid\n()\n\n\n# log x axis\n\n\nax3\n.\nsemilogx\n(\nt\n,\n \nnp\n.\nsin\n(\n2\n \n \nnp\n.\npi\n \n \nt\n))\n\n\nax3\n.\nset\n(\ntitle\n=\n'semilogx'\n)\n\n\nax3\n.\ngrid\n()\n\n\n# log x and y axis\n\n\nax4\n.\nloglog\n(\nt\n,\n \n20\n \n*\n \nnp\n.\nexp\n(\n-\nt\n \n/\n \n10.0\n),\n \nbasex\n=\n2\n)\n\n\nax4\n.\nset\n(\ntitle\n=\n'loglog base 2 on x'\n)\n\n\nax4\n.\ngrid\n()\n\n\nfig\n.\ntight_layout\n()\n\n\nplt\n.\nshow\n()",
            "title": "Subplots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.12-Subplots/#subplots",
            "text": "Sometimes it is useful for engineers to include a couple plots side by side. This can be done in  matplotlib  using  subplots \nFirst import matplotlib. If using a jupyter notebook include the line  %matplotlib inline    In\u00a0[1]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  % matplotlib  inline        In\u00a0[4]:  \n      # Data for plotting  t   =   np . arange ( 0.01 ,   20.0 ,   0.01 )  # Create figure  fig ,   (( ax1 ,   ax2 ),   ( ax3 ,   ax4 ))   =   plt . subplots ( 2 ,   2 )  # linear x and y axis  ax1 . plot ( t ,   np . exp ( - t   /   5.0 ))  ax1 . set ( title = 'linear x and y' )  ax1 . grid ()  # log y axis  ax2 . semilogy ( t ,   np . exp ( - t   /   5.0 ))  ax2 . set ( title = 'semilogy' )  ax2 . grid ()  # log x axis  ax3 . semilogx ( t ,   np . sin ( 2     np . pi     t ))  ax3 . set ( title = 'semilogx' )  ax3 . grid ()  # log x and y axis  ax4 . loglog ( t ,   20   *   np . exp ( - t   /   10.0 ),   basex = 2 )  ax4 . set ( title = 'loglog base 2 on x' )  ax4 . grid ()  fig . tight_layout ()  plt . show ()",
            "title": "Subplots"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.13-Plot-Styles/",
            "text": "Plot Styles\n\n\nSometimes it is useful for engineers to include a couple plots side by side. This can be done in \nmatplotlib\n using \nsubplots\n\nFirst import matplotlib. If using a jupyter notebook include the line \n%matplotlib inline\n\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\n%\nmatplotlib\n inline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[11]:\n\n\n\n    \n\n\nplt\n.\nstyle\n.\nuse\n(\n'default'\n)\n\n\nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n \n10\n)\n\n\n# Fixing random state for reproducibility\n\n\nnp\n.\nrandom\n.\nseed\n(\n19680801\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \n0.5\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \n2\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n-\n \n0.5\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n-\n \n2\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nset_title\n(\n\"'default' style sheet\"\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[14]:\n\n\n\n    \n\n\nprint\n(\nplt\n.\nstyle\n.\navailable\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n['bmh', 'classic', 'dark_background', 'fast', 'fivethirtyeight', 'ggplot', 'grayscale', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark-palette', 'seaborn-dark', 'seaborn-darkgrid', 'seaborn-deep', 'seaborn-muted', 'seaborn-notebook', 'seaborn-paper', 'seaborn-pastel', 'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white', 'seaborn-whitegrid', 'seaborn', 'Solarize_Light2', 'tableau-colorblind10', '_classic_test']\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[4]:\n\n\n\n    \n\n\nimport\n \nmatplotlib.pyplot\n \nas\n \nplt\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nplt\n.\nstyle\n.\nuse\n(\n'fivethirtyeight'\n)\n\n\nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n \n10\n)\n\n\n# Fixing random state for reproducibility\n\n\nnp\n.\nrandom\n.\nseed\n(\n19680801\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \n0.5\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \n2\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n-\n \n0.5\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n-\n \n2\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nset_title\n(\n\"'fivethirtyeight' style sheet\"\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\nplt\n.\nstyle\n.\nuse\n(\n'ggplot'\n)\n\n\nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n \n10\n)\n\n\n# Fixing random state for reproducibility\n\n\nnp\n.\nrandom\n.\nseed\n(\n19680801\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \n0.5\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \n2\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n-\n \n0.5\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n-\n \n2\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nset_title\n(\n\"'ggplot' style sheet\"\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[8]:\n\n\n\n    \n\n\nplt\n.\nstyle\n.\nuse\n(\n'seaborn'\n)\n\n\nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n \n10\n)\n\n\n# Fixing random state for reproducibility\n\n\nnp\n.\nrandom\n.\nseed\n(\n19680801\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \n0.5\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \n2\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n-\n \n0.5\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n-\n \n2\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nset_title\n(\n\"'seaborn' style sheet\"\n)\n\n\nplt\n.\nshow\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n\n\n    \n\n\nplt\n.\nstyle\n.\nuse\n(\n'tableau-colorblind10'\n)\n\n\nx\n \n=\n \nnp\n.\nlinspace\n(\n0\n,\n \n10\n)\n\n\n# Fixing random state for reproducibility\n\n\nnp\n.\nrandom\n.\nseed\n(\n19680801\n)\n\n\nfig\n,\n \nax\n \n=\n \nplt\n.\nsubplots\n()\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \n0.5\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \n2\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n-\n \n0.5\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n-\n \n2\n \n \nx\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nplot\n(\nx\n,\n \nnp\n.\nsin\n(\nx\n)\n \n+\n \nnp\n.\nrandom\n.\nrandn\n(\n50\n))\n\n\nax\n.\nset_title\n(\n\"'tableau-colorblind10' style sheet\"\n)\n\n\nplt\n.\nshow\n()",
            "title": "Plot Styles"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.13-Plot-Styles/#plot-styles",
            "text": "Sometimes it is useful for engineers to include a couple plots side by side. This can be done in  matplotlib  using  subplots \nFirst import matplotlib. If using a jupyter notebook include the line  %matplotlib inline    In\u00a0[3]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  % matplotlib  inline        In\u00a0[11]:  \n      plt . style . use ( 'default' )  x   =   np . linspace ( 0 ,   10 )  # Fixing random state for reproducibility  np . random . seed ( 19680801 )  fig ,   ax   =   plt . subplots ()  ax . plot ( x ,   np . sin ( x )   +   x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   0.5     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   2     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   -   0.5     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   -   2     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   np . random . randn ( 50 ))  ax . set_title ( \"'default' style sheet\" )  plt . show ()                   In\u00a0[14]:  \n      print ( plt . style . available )           ['bmh', 'classic', 'dark_background', 'fast', 'fivethirtyeight', 'ggplot', 'grayscale', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark-palette', 'seaborn-dark', 'seaborn-darkgrid', 'seaborn-deep', 'seaborn-muted', 'seaborn-notebook', 'seaborn-paper', 'seaborn-pastel', 'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white', 'seaborn-whitegrid', 'seaborn', 'Solarize_Light2', 'tableau-colorblind10', '_classic_test']         In\u00a0[4]:  \n      import   matplotlib.pyplot   as   plt  import   numpy   as   np  plt . style . use ( 'fivethirtyeight' )  x   =   np . linspace ( 0 ,   10 )  # Fixing random state for reproducibility  np . random . seed ( 19680801 )  fig ,   ax   =   plt . subplots ()  ax . plot ( x ,   np . sin ( x )   +   x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   0.5     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   2     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   -   0.5     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   -   2     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   np . random . randn ( 50 ))  ax . set_title ( \"'fivethirtyeight' style sheet\" )  plt . show ()                   In\u00a0[7]:  \n      plt . style . use ( 'ggplot' )  x   =   np . linspace ( 0 ,   10 )  # Fixing random state for reproducibility  np . random . seed ( 19680801 )  fig ,   ax   =   plt . subplots ()  ax . plot ( x ,   np . sin ( x )   +   x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   0.5     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   2     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   -   0.5     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   -   2     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   np . random . randn ( 50 ))  ax . set_title ( \"'ggplot' style sheet\" )  plt . show ()                   In\u00a0[8]:  \n      plt . style . use ( 'seaborn' )  x   =   np . linspace ( 0 ,   10 )  # Fixing random state for reproducibility  np . random . seed ( 19680801 )  fig ,   ax   =   plt . subplots ()  ax . plot ( x ,   np . sin ( x )   +   x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   0.5     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   2     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   -   0.5     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   -   2     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   np . random . randn ( 50 ))  ax . set_title ( \"'seaborn' style sheet\" )  plt . show ()                   In\u00a0[10]:  \n      plt . style . use ( 'tableau-colorblind10' )  x   =   np . linspace ( 0 ,   10 )  # Fixing random state for reproducibility  np . random . seed ( 19680801 )  fig ,   ax   =   plt . subplots ()  ax . plot ( x ,   np . sin ( x )   +   x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   0.5     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   2     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   -   0.5     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   -   2     x   +   np . random . randn ( 50 ))  ax . plot ( x ,   np . sin ( x )   +   np . random . randn ( 50 ))  ax . set_title ( \"'tableau-colorblind10' style sheet\" )  plt . show ()",
            "title": "Plot Styles"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.17-Summary/",
            "text": "Summary\n\n\nIn this chapter you learned how to create plots using Python and \nmatplotlib\n. \nTypes of charts:\n * line plots\n * muiltline plots\n * bar graphs\n * pie charts\n * scatter plots\n * histograms\n\n\nplt.plot() functions\n\n\n\n\n\n\n\n\nplot type\n\n\nmatplotlib function\n\n\nexample\n\n\n\n\n\n\n\n\n\n\nline plot\n\n\nplt.plot()\n\n\nplt.plot([1, 4, 5])\n\n\n\n\n\n\nmultiline plot\n\n\nplt.plot()\n\n\nplt.plot(x1,y1,x2,y2)\n\n\n\n\n\n\nbar chart\n\n\nplt.bar()\n\n\nplt.bar(x_pos, heights)\n\n\n\n\n\n\npie chart\n\n\nplt.pie()\n\n\nplt.pie(slices_list)\n\n\n\n\n\n\nhistogram\n\n\nplt.hist()\n\n\nplt.hist(x, 20, density=True, histtype='bar')\n\n\n\n\n\n\nscatter plot\n\n\nplt.scatter()\n\n\nplt.scatter(x, y, s=area, c=colors, alpha=0.5)\n\n\n\n\n\n\n### Additional Resources\n\n\n\n\n\n\n\n\n\n\nMatplotlib official documentation:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhttps://matplotlib.org/contents.html\n\n\n\n\nMatplotlib summary notebook on Kaggle:\n\n\n\n\nhttps://www.kaggle.com/grroverpr/matplotlib-plotting-guide/notebook\n\n\n\n\nPython Plotting With Matplotlib (Guide) on Real Python:\n\n\n\n\nhttps://realpython.com/python-matplotlib-guide/#why-can-matplotlib-be-confusing\n\n\n\n\nPython For Data Science: Matplotlib Cheat Sheet from DataCamp:\n\n\n\n\nhttps://s3.amazonaws.com/assets.datacamp.com/blog_assets/Python_Matplotlib_Cheat_Sheet.pdf",
            "title": "Summary"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.17-Summary/#summary",
            "text": "In this chapter you learned how to create plots using Python and  matplotlib . \nTypes of charts:\n * line plots\n * muiltline plots\n * bar graphs\n * pie charts\n * scatter plots\n * histograms",
            "title": "Summary"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.17-Summary/#pltplot-functions",
            "text": "plot type  matplotlib function  example      line plot  plt.plot()  plt.plot([1, 4, 5])    multiline plot  plt.plot()  plt.plot(x1,y1,x2,y2)    bar chart  plt.bar()  plt.bar(x_pos, heights)    pie chart  plt.pie()  plt.pie(slices_list)    histogram  plt.hist()  plt.hist(x, 20, density=True, histtype='bar')    scatter plot  plt.scatter()  plt.scatter(x, y, s=area, c=colors, alpha=0.5)    ### Additional Resources      Matplotlib official documentation:        https://matplotlib.org/contents.html   Matplotlib summary notebook on Kaggle:   https://www.kaggle.com/grroverpr/matplotlib-plotting-guide/notebook   Python Plotting With Matplotlib (Guide) on Real Python:   https://realpython.com/python-matplotlib-guide/#why-can-matplotlib-be-confusing   Python For Data Science: Matplotlib Cheat Sheet from DataCamp:   https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Python_Matplotlib_Cheat_Sheet.pdf",
            "title": "plt.plot() functions"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.18-Review-Questions/",
            "text": "Review Questions\n\n\n6.1\n\n\n6.2\n\n\n6.3\n\n\n6.4\n\n\n6.5\n\n\n6.6\n\n\n6.7\n\n\n6.8\n\n\n6.9",
            "title": "Review Questions"
        },
        {
            "location": "/05-Plotting-with-Matplotlib/06.18-Review-Questions/#review-questions",
            "text": "6.1  6.2  6.3  6.4  6.5  6.6  6.7  6.8  6.9",
            "title": "Review Questions"
        },
        {
            "location": "/06-User-Input-and-Loops/06.00-Introduction/",
            "text": "User Input and Loops\n\n\nIntroduction\n\n\nBy the end of this chapter you will be able to:\n\n\n\n\n\n\nuse a while loop\n\n\n\n\n\n\nuse a for loop\n\n\n\n\n\n\nuse the break statment\n\n\n\n\n\n\nuse the continue statment\n\n\n\n\n\n\nconstruct flow charts that describe a program which contains a loop",
            "title": "Introduction"
        },
        {
            "location": "/06-User-Input-and-Loops/06.00-Introduction/#user-input-and-loops",
            "text": "",
            "title": "User Input and Loops"
        },
        {
            "location": "/06-User-Input-and-Loops/06.00-Introduction/#introduction",
            "text": "By the end of this chapter you will be able to:    use a while loop    use a for loop    use the break statment    use the continue statment    construct flow charts that describe a program which contains a loop",
            "title": "Introduction"
        },
        {
            "location": "/06-User-Input-and-Loops/06.01-User-Input/",
            "text": "User Input\n\n\nPython can be used to as users for input and then calculate something with the resulting input. The input function is written below:\n\n\n<var> = input('<message>')\n\n\n\n\nWhere \n<var>\n is the variable that stores the user's input and \n is the message the user sees at the prompt. Let's ask a user for their age.\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nage\n \n=\n \ninput\n(\n'how old are you?'\n)\n\n\n\n\n\n\n\n\n\n\n\nNow we can do something with the input. Let's print the user's age back to them. Note the \nf' '\n before the string. The \nf\n does not get printed. It indicates to Python that variables are going to be inserted in the string. A set of curley braces \n{  }\n need to surround the variable name.\n\n\n\n\n\nIn\u00a0[3]:\n\n\n\n    \n\n\nage\n \n=\n \ninput\n(\n'how old are you?'\n)\n\n\nprint\n(\nf\n'you are \n{age}\n years old'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nyou are 10 years old\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet's do something more useful. How about we ask for the base and height of a triagble and print back the area of the triangle\n\n\n\n\n\nIn\u00a0[6]:\n\n\n\n    \n\n\nb\n \n=\n \ninput\n(\n'base of triangle: '\n)\n\n\nh\n \n=\n \ninput\n(\n'height of triangle: '\n)\n\n\nA\n \n=\n \n0.5\nfloat\n(\nb\n)\nfloat\n(\nh\n)\n\n\nprint\n(\nf\n'The area of the triangle is: \n{A}\n'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe area of the triangle is: 15.0",
            "title": "User Input"
        },
        {
            "location": "/06-User-Input-and-Loops/06.01-User-Input/#user-input",
            "text": "Python can be used to as users for input and then calculate something with the resulting input. The input function is written below:  <var> = input('<message>')  Where  <var>  is the variable that stores the user's input and   is the message the user sees at the prompt. Let's ask a user for their age.   In\u00a0[2]:  \n      age   =   input ( 'how old are you?' )      \nNow we can do something with the input. Let's print the user's age back to them. Note the  f' '  before the string. The  f  does not get printed. It indicates to Python that variables are going to be inserted in the string. A set of curley braces  {  }  need to surround the variable name.   In\u00a0[3]:  \n      age   =   input ( 'how old are you?' )  print ( f 'you are  {age}  years old' )           you are 10 years old      \nLet's do something more useful. How about we ask for the base and height of a triagble and print back the area of the triangle   In\u00a0[6]:  \n      b   =   input ( 'base of triangle: ' )  h   =   input ( 'height of triangle: ' )  A   =   0.5 float ( b ) float ( h )  print ( f 'The area of the triangle is:  {A} ' )           The area of the triangle is: 15.0",
            "title": "User Input"
        },
        {
            "location": "/99-Appendix/99.00-Appendix/",
            "text": "Appendix\n\n\nContents\n\n\nThe following will be detailed in the appendix:\n\n\n\n\n\n\nReserved and Key Words in Python\n\n\n\n\n\n\nPython \nmath\n and \nstatistics\n module fuctions\n\n\n\n\n\n\nAnswers to selected problems\n\n\n\n\n\n\nGlossary\n\n\n\n\n\n\nAbout the Author\n\n\n\n\n\n\nAbout the contirubuors",
            "title": "Contents"
        },
        {
            "location": "/99-Appendix/99.00-Appendix/#appendix",
            "text": "",
            "title": "Appendix"
        },
        {
            "location": "/99-Appendix/99.00-Appendix/#contents",
            "text": "The following will be detailed in the appendix:    Reserved and Key Words in Python    Python  math  and  statistics  module fuctions    Answers to selected problems    Glossary    About the Author    About the contirubuors",
            "title": "Contents"
        },
        {
            "location": "/99-Appendix/99.01-Reserved-and-Key-Words-in-Python/",
            "text": "Reserved and Key Words in Python\n\n\nThe following are reserved and key words in Python. These words should not be used as the names for user-defined functions, classes, methods or modules. The key words can be accessed with the following code:\n\n\n\n\n\nIn\u00a0[5]:\n\n\n\n    \n\n\nimport\n \nkeyword\n\n\nprint\n(\n'There are \n{}\n key words'\n.\nformat\n(\nlen\n(\nkeyword\n.\nkwlist\n)))\n\n\nfor\n \nkeywrd\n \nin\n \nkeyword\n.\nkwlist\n:\n\n    \nprint\n(\nkeywrd\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are 33 key words\nFalse\nNone\nTrue\nand\nas\nassert\nbreak\nclass\ncontinue\ndef\ndel\nelif\nelse\nexcept\nfinally\nfor\nfrom\nglobal\nif\nimport\nin\nis\nlambda\nnonlocal\nnot\nor\npass\nraise\nreturn\ntry\nwhile\nwith\nyield\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLogical Key Words\n\n\nTrue\n\n\nFalse\n\n\nnot\n\n\nand\n\n\nor\n\n\nis\n\n\nNone\n\n\nin\n\n\nControl Flow Key Words\n\n\nif\n\n\nelse\n\n\nelif\n\n\nfor\n\n\nwhile\n\n\nbreak\n\n\ncontinue\n\n\npass\n\n\ntry\n\n\nexcept\n\n\nfinally\n\n\nraise\n\n\nreturn\n\n\nyield\n\n\nDefinition Key Words\n\n\ndef\n\n\nglobal\n\n\nnonlocal\n\n\nclass\n\n\nlambda\n\n\nwith\n\n\nassert\n\n\ndel\n\n\nModule Key Words\n\n\nimport\n\n\nfrom\n\n\nas\n\n\nwith",
            "title": "Reserved and Key Words in Python"
        },
        {
            "location": "/99-Appendix/99.01-Reserved-and-Key-Words-in-Python/#reserved-and-key-words-in-python",
            "text": "The following are reserved and key words in Python. These words should not be used as the names for user-defined functions, classes, methods or modules. The key words can be accessed with the following code:   In\u00a0[5]:  \n      import   keyword  print ( 'There are  {}  key words' . format ( len ( keyword . kwlist )))  for   keywrd   in   keyword . kwlist : \n     print ( keywrd )           There are 33 key words\nFalse\nNone\nTrue\nand\nas\nassert\nbreak\nclass\ncontinue\ndef\ndel\nelif\nelse\nexcept\nfinally\nfor\nfrom\nglobal\nif\nimport\nin\nis\nlambda\nnonlocal\nnot\nor\npass\nraise\nreturn\ntry\nwhile\nwith\nyield",
            "title": "Reserved and Key Words in Python"
        },
        {
            "location": "/99-Appendix/99.01-Reserved-and-Key-Words-in-Python/#logical-key-words",
            "text": "True  False  not  and  or  is  None  in",
            "title": "Logical Key Words"
        },
        {
            "location": "/99-Appendix/99.01-Reserved-and-Key-Words-in-Python/#control-flow-key-words",
            "text": "if  else  elif  for  while  break  continue  pass  try  except  finally  raise  return  yield",
            "title": "Control Flow Key Words"
        },
        {
            "location": "/99-Appendix/99.01-Reserved-and-Key-Words-in-Python/#definition-key-words",
            "text": "def  global  nonlocal  class  lambda  with  assert  del",
            "title": "Definition Key Words"
        },
        {
            "location": "/99-Appendix/99.01-Reserved-and-Key-Words-in-Python/#module-key-words",
            "text": "import  from  as  with",
            "title": "Module Key Words"
        },
        {
            "location": "/99-Appendix/99.02-ASCII-Character-Codes/",
            "text": "ASCII Character Codes\n\n\nThe following is a list of ASCII character codes. These character codes can also be acccessed using the following code:\n\n\n\n\n\nIn\u00a0[2]:\n\n\n\n    \n\n\nfor\n \nASCIIcode\n \nin\n \nrange\n(\n32\n,\n127\n):\n\n    \nprint\n(\n'ASCII code: \n{}\n    Character: \n{}\n'\n.\nformat\n(\nASCIIcode\n,\nchr\n(\nASCIIcode\n)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nASCII code: 32    Character:  \nASCII code: 33    Character: !\nASCII code: 34    Character: \"\nASCII code: 35    Character: #\nASCII code: 36    Character: $\nASCII code: 37    Character: %\nASCII code: 38    Character: &\nASCII code: 39    Character: '\nASCII code: 40    Character: (\nASCII code: 41    Character: )\nASCII code: 42    Character: *\nASCII code: 43    Character: +\nASCII code: 44    Character: ,\nASCII code: 45    Character: -\nASCII code: 46    Character: .\nASCII code: 47    Character: /\nASCII code: 48    Character: 0\nASCII code: 49    Character: 1\nASCII code: 50    Character: 2\nASCII code: 51    Character: 3\nASCII code: 52    Character: 4\nASCII code: 53    Character: 5\nASCII code: 54    Character: 6\nASCII code: 55    Character: 7\nASCII code: 56    Character: 8\nASCII code: 57    Character: 9\nASCII code: 58    Character: :\nASCII code: 59    Character: ;\nASCII code: 60    Character: <\nASCII code: 61    Character: =\nASCII code: 62    Character: >\nASCII code: 63    Character: ?\nASCII code: 64    Character: @\nASCII code: 65    Character: A\nASCII code: 66    Character: B\nASCII code: 67    Character: C\nASCII code: 68    Character: D\nASCII code: 69    Character: E\nASCII code: 70    Character: F\nASCII code: 71    Character: G\nASCII code: 72    Character: H\nASCII code: 73    Character: I\nASCII code: 74    Character: J\nASCII code: 75    Character: K\nASCII code: 76    Character: L\nASCII code: 77    Character: M\nASCII code: 78    Character: N\nASCII code: 79    Character: O\nASCII code: 80    Character: P\nASCII code: 81    Character: Q\nASCII code: 82    Character: R\nASCII code: 83    Character: S\nASCII code: 84    Character: T\nASCII code: 85    Character: U\nASCII code: 86    Character: V\nASCII code: 87    Character: W\nASCII code: 88    Character: X\nASCII code: 89    Character: Y\nASCII code: 90    Character: Z\nASCII code: 91    Character: [\nASCII code: 92    Character: \\\nASCII code: 93    Character: ]\nASCII code: 94    Character: ^\nASCII code: 95    Character: _\nASCII code: 96    Character: `\nASCII code: 97    Character: a\nASCII code: 98    Character: b\nASCII code: 99    Character: c\nASCII code: 100    Character: d\nASCII code: 101    Character: e\nASCII code: 102    Character: f\nASCII code: 103    Character: g\nASCII code: 104    Character: h\nASCII code: 105    Character: i\nASCII code: 106    Character: j\nASCII code: 107    Character: k\nASCII code: 108    Character: l\nASCII code: 109    Character: m\nASCII code: 110    Character: n\nASCII code: 111    Character: o\nASCII code: 112    Character: p\nASCII code: 113    Character: q\nASCII code: 114    Character: r\nASCII code: 115    Character: s\nASCII code: 116    Character: t\nASCII code: 117    Character: u\nASCII code: 118    Character: v\nASCII code: 119    Character: w\nASCII code: 120    Character: x\nASCII code: 121    Character: y\nASCII code: 122    Character: z\nASCII code: 123    Character: {\nASCII code: 124    Character: |\nASCII code: 125    Character: }\nASCII code: 126    Character: ~",
            "title": "ASCII Character Codes"
        },
        {
            "location": "/99-Appendix/99.02-ASCII-Character-Codes/#ascii-character-codes",
            "text": "The following is a list of ASCII character codes. These character codes can also be acccessed using the following code:   In\u00a0[2]:  \n      for   ASCIIcode   in   range ( 32 , 127 ): \n     print ( 'ASCII code:  {}     Character:  {} ' . format ( ASCIIcode , chr ( ASCIIcode )))           ASCII code: 32    Character:  \nASCII code: 33    Character: !\nASCII code: 34    Character: \"\nASCII code: 35    Character: #\nASCII code: 36    Character: $\nASCII code: 37    Character: %\nASCII code: 38    Character: &\nASCII code: 39    Character: '\nASCII code: 40    Character: (\nASCII code: 41    Character: )\nASCII code: 42    Character: *\nASCII code: 43    Character: +\nASCII code: 44    Character: ,\nASCII code: 45    Character: -\nASCII code: 46    Character: .\nASCII code: 47    Character: /\nASCII code: 48    Character: 0\nASCII code: 49    Character: 1\nASCII code: 50    Character: 2\nASCII code: 51    Character: 3\nASCII code: 52    Character: 4\nASCII code: 53    Character: 5\nASCII code: 54    Character: 6\nASCII code: 55    Character: 7\nASCII code: 56    Character: 8\nASCII code: 57    Character: 9\nASCII code: 58    Character: :\nASCII code: 59    Character: ;\nASCII code: 60    Character: <\nASCII code: 61    Character: =\nASCII code: 62    Character: >\nASCII code: 63    Character: ?\nASCII code: 64    Character: @\nASCII code: 65    Character: A\nASCII code: 66    Character: B\nASCII code: 67    Character: C\nASCII code: 68    Character: D\nASCII code: 69    Character: E\nASCII code: 70    Character: F\nASCII code: 71    Character: G\nASCII code: 72    Character: H\nASCII code: 73    Character: I\nASCII code: 74    Character: J\nASCII code: 75    Character: K\nASCII code: 76    Character: L\nASCII code: 77    Character: M\nASCII code: 78    Character: N\nASCII code: 79    Character: O\nASCII code: 80    Character: P\nASCII code: 81    Character: Q\nASCII code: 82    Character: R\nASCII code: 83    Character: S\nASCII code: 84    Character: T\nASCII code: 85    Character: U\nASCII code: 86    Character: V\nASCII code: 87    Character: W\nASCII code: 88    Character: X\nASCII code: 89    Character: Y\nASCII code: 90    Character: Z\nASCII code: 91    Character: [\nASCII code: 92    Character: \\\nASCII code: 93    Character: ]\nASCII code: 94    Character: ^\nASCII code: 95    Character: _\nASCII code: 96    Character: `\nASCII code: 97    Character: a\nASCII code: 98    Character: b\nASCII code: 99    Character: c\nASCII code: 100    Character: d\nASCII code: 101    Character: e\nASCII code: 102    Character: f\nASCII code: 103    Character: g\nASCII code: 104    Character: h\nASCII code: 105    Character: i\nASCII code: 106    Character: j\nASCII code: 107    Character: k\nASCII code: 108    Character: l\nASCII code: 109    Character: m\nASCII code: 110    Character: n\nASCII code: 111    Character: o\nASCII code: 112    Character: p\nASCII code: 113    Character: q\nASCII code: 114    Character: r\nASCII code: 115    Character: s\nASCII code: 116    Character: t\nASCII code: 117    Character: u\nASCII code: 118    Character: v\nASCII code: 119    Character: w\nASCII code: 120    Character: x\nASCII code: 121    Character: y\nASCII code: 122    Character: z\nASCII code: 123    Character: {\nASCII code: 124    Character: |\nASCII code: 125    Character: }\nASCII code: 126    Character: ~",
            "title": "ASCII Character Codes"
        },
        {
            "location": "/99-Appendix/99.03-Virtual-Environments/",
            "text": "Virtual Environments\n\n\nUsing \nvirtual environments\n is a good standard of practice in Python",
            "title": "Virtual Environments"
        },
        {
            "location": "/99-Appendix/99.03-Virtual-Environments/#virtual-environments",
            "text": "Using  virtual environments  is a good standard of practice in Python",
            "title": "Virtual Environments"
        },
        {
            "location": "/99-Appendix/99.04-Numpy-Math-Functions/",
            "text": "Numpy Math Functions\n\n\nThe code below will print out all of the numpy functions and methods:\n\n\n\n\n\nIn\u00a0[7]:\n\n\n\n    \n\n\n#import numpy as np\n\n\n#for func in dir(np):\n\n\n#    print(func)\n\n\n\n\n\n\n\n\n\n\n\n\n\nNumpy Statistics Fuctions and Methods\n\n\nnp.mean\nnp.median\nnp.std\nnp.var\nnp.erf\n\n\n\n\nNumpy Trigonometric Functions and Methods\n\n\nnp.pi\nnp.sin\nnp.cos\nnp.tan\nnp.arcsin\nnp.arccos\nnp.arctan\nnp.arcsinh\nnp.arccosh\nnp.arctanh\nnp.arctan2\nnp.radians\nnp.rad2deg\nnp.deg2rad\nnp.radians\n\nnp.sinc\nnp.sinh\nnp.tanh\n\nnp.angle\n\n\n\n\nNumpy Exponential and Logrithmic Functions and Methods\n\n\nnp.log\nnp.log10\nnp.log1p\nnp.log2\nnp.logaddexp\nnp.logaddexp2\nnp.exp\nnp.exp2\nnp.sqrt\nnp.power\nnp.e\n\n\n\n\nNumpy Matrix Creation and Manipulation Functions and Methods\n\n\nnp.linspace\nnp.zeros\nnp.ones\nnp.ndarray\nnp.matrix\nnp.traspose\nnp.size\nnp.shape\nnp.reshape\nnp.meshgrid\nnp.dot\nnp.asmatrix\nnp.asarray\nnp.arange\nnp.array",
            "title": "Numpy Math Functions"
        },
        {
            "location": "/99-Appendix/99.04-Numpy-Math-Functions/#numpy-math-functions",
            "text": "The code below will print out all of the numpy functions and methods:   In\u00a0[7]:  \n      #import numpy as np  #for func in dir(np):  #    print(func)",
            "title": "Numpy Math Functions"
        },
        {
            "location": "/99-Appendix/99.04-Numpy-Math-Functions/#numpy-statistics-fuctions-and-methods",
            "text": "np.mean\nnp.median\nnp.std\nnp.var\nnp.erf",
            "title": "Numpy Statistics Fuctions and Methods"
        },
        {
            "location": "/99-Appendix/99.04-Numpy-Math-Functions/#numpy-trigonometric-functions-and-methods",
            "text": "np.pi\nnp.sin\nnp.cos\nnp.tan\nnp.arcsin\nnp.arccos\nnp.arctan\nnp.arcsinh\nnp.arccosh\nnp.arctanh\nnp.arctan2\nnp.radians\nnp.rad2deg\nnp.deg2rad\nnp.radians\n\nnp.sinc\nnp.sinh\nnp.tanh\n\nnp.angle  Numpy Exponential and Logrithmic Functions and Methods  np.log\nnp.log10\nnp.log1p\nnp.log2\nnp.logaddexp\nnp.logaddexp2\nnp.exp\nnp.exp2\nnp.sqrt\nnp.power\nnp.e",
            "title": "Numpy Trigonometric Functions and Methods"
        },
        {
            "location": "/99-Appendix/99.04-Numpy-Math-Functions/#numpy-matrix-creation-and-manipulation-functions-and-methods",
            "text": "np.linspace\nnp.zeros\nnp.ones\nnp.ndarray\nnp.matrix\nnp.traspose\nnp.size\nnp.shape\nnp.reshape\nnp.meshgrid\nnp.dot\nnp.asmatrix\nnp.asarray\nnp.arange\nnp.array",
            "title": "Numpy Matrix Creation and Manipulation Functions and Methods"
        },
        {
            "location": "/99-Appendix/99.05-Git-and-github/",
            "text": "Git and github.com\n\n\nGit\n is a common version control tool used by computer program developers to save code and work on code as a team. \nGit\n is a program run from the command line or \nAnaconda Prompt\n.\n\ngithub.com\n is a website and service used by open source projects to share code and allow other users to make changes to exhisting code.\nBoth \ngit\n and \ngithub.com\n are useful of engineers working in teams.\nTo use git and github the understanding of a few terms is import:\n\n\n\n\ngit\n - a command line program used to track file changes and colaborate on code with others\n\n\nrepo\n - short name for \"repository\". A repo is a directory that contains files and other subfolders with files\n\n\nlocal repo\n -  a directory that contains files and subfolders on your computer that git knows about\n\n\nremote repo\n - a set of files and subfolders stored in the cloud that git knows about\nThe useful git commands are summarized below:\n\n\n\n\n\n\n\n\n\n\ncommand\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ngit init\n\n\ninitialize a new repository\n\n\n\n\n\n\ngit remote add origin https://github.com/username/reponame.git\n\n\nlinks a local git repo with a remote git repo on github.com\n\n\n\n\n\n\ngit add .\n\n\nadds all the files and changes to the local git repo\n\n\n\n\n\n\ngit commit -m \"commit message\"\n\n\ncommits the changes in the local repo\n\n\n\n\n\n\ngit push origin master\n\n\npushes the changes up to the remote repo on github.com\n\n\n\n\n\n\ngit pull origin master\n\n\npulls the version in the remote repo down to the local repo\n\n\n\n\n\n\ngit clone https://github.com/username/reponame.git\n\n\ncopies a remote repo on github.com to a local directory",
            "title": "Git and github.com"
        },
        {
            "location": "/99-Appendix/99.05-Git-and-github/#git-and-githubcom",
            "text": "Git  is a common version control tool used by computer program developers to save code and work on code as a team.  Git  is a program run from the command line or  Anaconda Prompt . github.com  is a website and service used by open source projects to share code and allow other users to make changes to exhisting code.\nBoth  git  and  github.com  are useful of engineers working in teams.\nTo use git and github the understanding of a few terms is import:   git  - a command line program used to track file changes and colaborate on code with others  repo  - short name for \"repository\". A repo is a directory that contains files and other subfolders with files  local repo  -  a directory that contains files and subfolders on your computer that git knows about  remote repo  - a set of files and subfolders stored in the cloud that git knows about\nThe useful git commands are summarized below:      command  description      git init  initialize a new repository    git remote add origin https://github.com/username/reponame.git  links a local git repo with a remote git repo on github.com    git add .  adds all the files and changes to the local git repo    git commit -m \"commit message\"  commits the changes in the local repo    git push origin master  pushes the changes up to the remote repo on github.com    git pull origin master  pulls the version in the remote repo down to the local repo    git clone https://github.com/username/reponame.git  copies a remote repo on github.com to a local directory",
            "title": "Git and github.com"
        },
        {
            "location": "/99-Appendix/99.06-Python-for-Undergaduate-Engineers-Book-Construction/",
            "text": "Python for Undergraduate Engineers Book Construction\n\n\nJupyter Notebooks\n\n\nThis book was constructed using \njupyter notebooks\n saved on github.com. The github repo for the books can be found at:\n\n\nhttps://github.com/ProfessorKazarinoff/PythonForUndergraduateEngineers\n\nThe directory structure of the github repo contains the \njupyter notebooks\n that were use the write the book, a set of conversion tools and the output of these conversion tools, the book website and pdf's that make the hard copy of the book\n\n\nPythonForUndergraduateEngineers/\n|-- conversion_tools/\n|-- notebooks/\n|-- LICENSE\n|-- notebooks/\n|-- pdf/\n|-- README.md\n|-- website/\n\n\n\n\nThe notebooks directory contains a folder for each chapter of the book:\n\n\nNotebooks/\n|-- 00-Preface/\n|-- 01-Orientation/\n|-- 02-The-Python-REPL/\n|-- 03-Data-Types-and-Variables/\n|-- 04-Jupyter-Notebooks/\n|-- 05-Functions-and-Modules/\n|-- 06-Plotting-with-Matplotlib/\n|-- 07-If-Else-Try-Except/\n|-- 08-Loops/\n|-- 09-Linear-Algebra/\n|-- 10-Symbolic-Math/\n|-- 11-Python-and-External-Hardware/\n|-- 12-MicroPython/\n|-- 99-Appendix/\n|-- figures/\n`-- TOC.ipynb\n\n\n\n\nWithin each chapter directory there is a \njupyter notebook\n for each section and an images directory for any images used in the markdown sections of the notebooks\n\n\n01-Orientation/\n|-- 01.00-Welcome.ipynb\n|-- 01.01-Why-Python.ipynb\n|-- 01.02-Installing-Python.ipynb\n|-- 01.03-Installing-Anaconda.ipynb\n|-- 01.04-Installing-Anaconda-on-OSX.ipynb\n|-- 01.05-Summary.ipynb\n|-- 01.06-Review-Questions.ipynb\n`-- images/\n\n\n\n\nWebsite\n\n\nThe website for the book was constructed using mkdocs. Jupyter noteboks were exported to html with the markdown cells unformatted. \n\n\nHardcopy\n\n\nThe hard copy of the book was constructed using \nLateX\n and \nnbconvert\n. A conversion script combined all of the notebooks into one BIG notebook and converted the one BIG notebook to \nLaTeX\n using a custom template.",
            "title": "Python for Undergraduate Engineers Book Construction"
        },
        {
            "location": "/99-Appendix/99.06-Python-for-Undergaduate-Engineers-Book-Construction/#python-for-undergraduate-engineers-book-construction",
            "text": "",
            "title": "Python for Undergraduate Engineers Book Construction"
        },
        {
            "location": "/99-Appendix/99.06-Python-for-Undergaduate-Engineers-Book-Construction/#jupyter-notebooks",
            "text": "This book was constructed using  jupyter notebooks  saved on github.com. The github repo for the books can be found at:  https://github.com/ProfessorKazarinoff/PythonForUndergraduateEngineers \nThe directory structure of the github repo contains the  jupyter notebooks  that were use the write the book, a set of conversion tools and the output of these conversion tools, the book website and pdf's that make the hard copy of the book  PythonForUndergraduateEngineers/\n|-- conversion_tools/\n|-- notebooks/\n|-- LICENSE\n|-- notebooks/\n|-- pdf/\n|-- README.md\n|-- website/  The notebooks directory contains a folder for each chapter of the book:  Notebooks/\n|-- 00-Preface/\n|-- 01-Orientation/\n|-- 02-The-Python-REPL/\n|-- 03-Data-Types-and-Variables/\n|-- 04-Jupyter-Notebooks/\n|-- 05-Functions-and-Modules/\n|-- 06-Plotting-with-Matplotlib/\n|-- 07-If-Else-Try-Except/\n|-- 08-Loops/\n|-- 09-Linear-Algebra/\n|-- 10-Symbolic-Math/\n|-- 11-Python-and-External-Hardware/\n|-- 12-MicroPython/\n|-- 99-Appendix/\n|-- figures/\n`-- TOC.ipynb  Within each chapter directory there is a  jupyter notebook  for each section and an images directory for any images used in the markdown sections of the notebooks  01-Orientation/\n|-- 01.00-Welcome.ipynb\n|-- 01.01-Why-Python.ipynb\n|-- 01.02-Installing-Python.ipynb\n|-- 01.03-Installing-Anaconda.ipynb\n|-- 01.04-Installing-Anaconda-on-OSX.ipynb\n|-- 01.05-Summary.ipynb\n|-- 01.06-Review-Questions.ipynb\n`-- images/",
            "title": "Jupyter Notebooks"
        },
        {
            "location": "/99-Appendix/99.06-Python-for-Undergaduate-Engineers-Book-Construction/#website",
            "text": "The website for the book was constructed using mkdocs. Jupyter noteboks were exported to html with the markdown cells unformatted.",
            "title": "Website"
        },
        {
            "location": "/99-Appendix/99.06-Python-for-Undergaduate-Engineers-Book-Construction/#hardcopy",
            "text": "The hard copy of the book was constructed using  LateX  and  nbconvert . A conversion script combined all of the notebooks into one BIG notebook and converted the one BIG notebook to  LaTeX  using a custom template.",
            "title": "Hardcopy"
        },
        {
            "location": "/99-Appendix/99.07-About-the-Author/",
            "text": "About the Author\n\n\nPeter D. Kazarinoff, PhD is a full-time faculty member in Engineering and Engineering Technology at Portland Community College in Portland, OR. Peter earned a PhD in Engineering from the University of Washington and a BA from Cornell University. \n\n\nPeter currently lives in Portland OR with his wife and two kids.",
            "title": "About the Author"
        },
        {
            "location": "/99-Appendix/99.07-About-the-Author/#about-the-author",
            "text": "Peter D. Kazarinoff, PhD is a full-time faculty member in Engineering and Engineering Technology at Portland Community College in Portland, OR. Peter earned a PhD in Engineering from the University of Washington and a BA from Cornell University.   Peter currently lives in Portland OR with his wife and two kids.",
            "title": "About the Author"
        }
    ]
}